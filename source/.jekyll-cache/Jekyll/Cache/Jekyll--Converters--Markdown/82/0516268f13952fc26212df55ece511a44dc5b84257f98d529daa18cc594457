I"[X<p>The <code>mqtt</code> cover platform allows you to control an MQTT cover (such as blinds, a rollershutter or a garage door).</p>
<h2>Configuration</h2>
<p>The device state (<code>open</code> or <code>closed</code>) will be updated only after a new message is published on <code>state_topic</code> matching <code>state_open</code> or <code>state_closed</code>. If these messages are published with the <code>retain</code> flag set, the cover will receive an instant state update after subscription and Home Assistant will display the correct state on startup. Otherwise, the initial state displayed in Home Assistant will be <code>unknown</code>.
<code>state_topic</code> can only manage <code>state_open</code> and <code>state_closed</code>. No percentage positions etc.</p>
<p>For this purpose is <code>position_topic</code> which can set state of the cover and position.
Default setting are 0 means the device is <code>closed</code> and all other intermediate positions means the device is <code>open</code>.
<code>position_topic</code> is managed by <code>position_open</code> and <code>position_closed</code>
You can set it up in opossite way as well.
If position topic is defined than state topic is ignored.</p>
<p>If a state topic and position topic are not defined, the cover will work in optimistic mode. In this mode, the cover will immediately change state (<code>open</code> or <code>closed</code>) after every command sent by Home Assistant. If a state topic/position topic is defined, the cover will wait for a message on <code>state_topic</code> or <code>position_topic</code>.</p>
<p>Optimistic mode can be forced, even if a <code>state_topic</code> / <code>position_topic</code> is defined. Try to enable it if experiencing incorrect cover operation (Google Assistant gauge may need optimistic mode as it often send request to your Home Assistant immediately after send set_cover_position in which case MQTT could be too slow).</p>
<p>The <code>mqtt</code> cover platform optionally supports an <code>availability_topic</code> to receive online and offline messages (birth and LWT messages) from the MQTT cover device. During normal operation, if the MQTT cover device goes offline (i.e. publishes <code>payload_not_available</code> to <code>availability_topic</code>), Home Assistant will display the cover as “unavailable”. If these messages are published with the <code>retain</code> flag set, the cover will receive an instant update after subscription and Home Assistant will display correct availability state of the cover when Home Assistant starts up. If the <code>retain</code> flag is not set, Home Assistant will display the cover as “unavailable” when Home Assistant starts up.</p>
<p>To use your MQTT cover in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: mqtt
    command_topic: &quot;home-assistant/cover/set&quot;
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='command_topic' href='#command_topic'></a> command_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic to publish commands to control the cover.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the cover.</p>
</span></p><p class='default'>
Default value: <p>MQTT Cover</p>
</p></dd><dt><a class='title-link' name='payload_open' href='#payload_open'></a> payload_open</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The command payload that opens the cover.</p>
</span></p><p class='default'>
Default value: <p>OPEN</p>
</p></dd><dt><a class='title-link' name='payload_close' href='#payload_close'></a> payload_close</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The command payload that closes the cover.</p>
</span></p><p class='default'>
Default value: <p>CLOSE</p>
</p></dd><dt><a class='title-link' name='payload_stop' href='#payload_stop'></a> payload_stop</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The command payload that stops the cover.</p>
</span></p><p class='default'>
Default value: <p>STOP</p>
</p></dd><dt><a class='title-link' name='state_topic' href='#state_topic'></a> state_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive cover state messages. Use only if not using <code>position_topic</code>. State topic can only read open/close state. Cannot read position state. If <code>position_topic</code> is set <code>state_topic</code> is ignored.</p>
</span></p></dd><dt><a class='title-link' name='state_open' href='#state_open'></a> state_open</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the open state.</p>
</span></p><p class='default'>
Default value: <p>open</p>
</p></dd><dt><a class='title-link' name='state_closed' href='#state_closed'></a> state_closed</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the closed state.</p>
</span></p><p class='default'>
Default value: <p>closed</p>
</p></dd><dt><a class='title-link' name='position_topic' href='#position_topic'></a> position_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive cover position messages. If <code>position_topic</code> is set <code>state_topic</code> is ignored.</p>
</span></p></dd><dt><a class='title-link' name='position_open' href='#position_open'></a> position_open</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Number which represents open position.</p>
</span></p><p class='default'>
Default value: <p>100</p>
</p></dd><dt><a class='title-link' name='position_closed' href='#position_closed'></a> position_closed</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Number which represents closed position.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='availability_topic' href='#availability_topic'></a> availability_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to to receive birth and LWT messages from the MQTT cover device. If <code>availability_topic</code> is not defined, the cover availability state will always be <code>available</code>. If <code>availability_topic</code> is defined, the cover availability state will be <code>unavailable</code> by default.</p>
</span></p></dd><dt><a class='title-link' name='payload_available' href='#payload_available'></a> payload_available</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the online state.</p>
</span></p><p class='default'>
Default value: <p>online</p>
</p></dd><dt><a class='title-link' name='payload_not_available' href='#payload_not_available'></a> payload_not_available</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the offline state.</p>
</span></p><p class='default'>
Default value: <p>offline</p>
</p></dd><dt><a class='title-link' name='optimistic' href='#optimistic'></a> optimistic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Flag that defines if switch works in optimistic mode.</p>
</span></p><p class='default'>
Default value: <p><code>true</code> if no state topic defined, else <code>false</code>.</p>
</p></dd><dt><a class='title-link' name='qos' href='#qos'></a> qos</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The maximum QoS level to be used when receiving and publishing messages.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='retain' href='#retain'></a> retain</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines if published messages should have the retain flag set.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract a value from the payload.</p>
</span></p></dd><dt><a class='title-link' name='set_position_topic' href='#set_position_topic'></a> set_position_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic to publish position commands to. You need to set position_topic as well if you want to use position topic. Use template if position topic wants different values than within range <code>position_closed</code> - <code>position_open</code>. If template is not defined and <code>position_closed != 100</code> and <code>position_open != 0</code> then proper position value is calculated from percentage position.</p>
</span></p></dd><dt><a class='title-link' name='set_position_template' href='#set_position_template'></a> set_position_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/topics/templating/">template</a> to define the position to be sent to the <code>set_position_topic</code> topic. Incoming position value is available for use in the template ``. If no template is defined, the position (0-100) will be calculated according to <code>position_open</code> and `position_closed` values.</p>
</span></p></dd><dt><a class='title-link' name='tilt_command_topic' href='#tilt_command_topic'></a> tilt_command_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic to publish commands to control the cover tilt.</p>
</span></p></dd><dt><a class='title-link' name='tilt_status_topic' href='#tilt_status_topic'></a> tilt_status_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive tilt status update values.</p>
</span></p></dd><dt><a class='title-link' name='tilt_status_template' href='#tilt_status_template'></a> tilt_status_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/topics/templating/">template</a> that can be used to extract the payload for the <code>tilt_status_topic</code> topic.</p>
</span></p></dd><dt><a class='title-link' name='tilt_min' href='#tilt_min'></a> tilt_min</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The minimum tilt value.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='tilt_max' href='#tilt_max'></a> tilt_max</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The maximum tilt value</p>
</span></p><p class='default'>
Default value: <p>100</p>
</p></dd><dt><a class='title-link' name='tilt_closed_value' href='#tilt_closed_value'></a> tilt_closed_value</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The value that will be sent on a <code>close_cover_tilt</code> command.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='tilt_opened_value' href='#tilt_opened_value'></a> tilt_opened_value</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The value that will be sent on an <code>open_cover_tilt</code> command.</p>
</span></p><p class='default'>
Default value: <p>100</p>
</p></dd><dt><a class='title-link' name='tilt_optimistic' href='#tilt_optimistic'></a> tilt_optimistic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Flag that determines if tilt works in optimistic mode.</p>
</span></p><p class='default'>
Default value: <p><code>true</code> if <code>tilt_status_topic</code> is not defined, else <code>false</code></p>
</p></dd><dt><a class='title-link' name='tilt_invert_state' href='#tilt_invert_state'></a> tilt_invert_state</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Flag that determines if open/close are flipped; higher values toward closed and lower values toward open.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/cover/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd><dt><a class='title-link' name='json_attributes_topic' href='#json_attributes_topic'></a> json_attributes_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in <a href="/integrations/sensor.mqtt/#json-attributes-topic-configuration">MQTT sensor</a> documentation.</p>
</span></p></dd><dt><a class='title-link' name='json_attributes_template' href='#json_attributes_template'></a> json_attributes_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract the JSON dictionary from messages received on the <code>json_attributes_topic</code>. Usage example can be found in <a href="/integrations/sensor.mqtt/#json-attributes-template-configuration">MQTT sensor</a> documentation.</p>
</span></p></dd><dt><a class='title-link' name='unique_id' href='#unique_id'></a> unique_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An ID that uniquely identifies this cover. If two covers have the same unique ID, Home Assistant will raise an exception.</p>
</span></p></dd><dt><a class='title-link' name='device' href='#device'></a> device</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Information about the device this cover is a part of to tie it into the <a href="https://developers.home-assistant.io/docs/en/device_registry_index.html">device registry</a>. Only works through <a href="/docs/mqtt/discovery/">MQTT discovery</a> and when <a href="#unique_id"><code>unique_id</code></a> is set.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='identifiers' href='#identifiers'></a> identifiers</dt><dd><p class='desc'><span class='type'>(<span class='list string'>list | string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of IDs that uniquely identify the device. For example a serial number.</p>
</span></p></dd><dt><a class='title-link' name='connections' href='#connections'></a> connections</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of connections of the device to the outside world as a list of tuples <code>[connection_type, connection_identifier]</code>. For example the MAC address of a network interface: <code>&quot;connections&quot;: [&quot;mac&quot;, &quot;02:5b:26:a8:dc:12&quot;]</code>.</p>
</span></p></dd><dt><a class='title-link' name='manufacturer' href='#manufacturer'></a> manufacturer</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The manufacturer of the device.</p>
</span></p></dd><dt><a class='title-link' name='model' href='#model'></a> model</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The model of the device.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the device.</p>
</span></p></dd><dt><a class='title-link' name='sw_version' href='#sw_version'></a> sw_version</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The firmware version of the device.</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Examples</h2>
<p>In this section you will find some real-life examples of how to use this platform.</p>
<h3>Full configuration state topic without tilt</h3>
<p>The example below shows a full configuration for a cover without tilt with state topic only.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: mqtt
    name: &quot;MQTT Cover&quot;
    command_topic: &quot;home-assistant/cover/set&quot;
    state_topic: &quot;home-assistant/cover/state&quot;
    availability_topic: &quot;home-assistant/cover/availability&quot;
    qos: 0
    retain: true
    payload_open: &quot;OPEN&quot;
    payload_close: &quot;CLOSE&quot;
    payload_stop: &quot;STOP&quot;
    state_open: &quot;open&quot;
    state_closed: &quot;closed&quot;
    payload_available: &quot;online&quot;
    payload_not_available: &quot;offline&quot;
    optimistic: false
    value_template: '{{ value.x }}'
</code></pre>
<h3>Full configuration position topic without tilt</h3>
<p>The example below shows a full configuration for a cover without tilt with position topic.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: mqtt
    name: &quot;MQTT Cover&quot;
    command_topic: &quot;home-assistant/cover/set&quot;
    position_topic: &quot;home-assistant/cover/position&quot;
    availability_topic: &quot;home-assistant/cover/availability&quot;
    set_position_topic: &quot;home-assistant/cover/set_position&quot;
    qos: 0
    retain: true
    payload_open: &quot;OPEN&quot;
    payload_close: &quot;CLOSE&quot;
    payload_stop: &quot;STOP&quot;
    position_open: 100
    position_closed: 0
    payload_available: &quot;online&quot;
    payload_not_available: &quot;offline&quot;
    optimistic: false
    value_template: '{{ value.x }}'
</code></pre>
<h3>Full configuration</h3>
<p>The example below shows a full configuration for a cover.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: mqtt
    name: &quot;MQTT Cover&quot;
    command_topic: &quot;home-assistant/cover/set&quot;
    state_topic: &quot;home-assistant/cover/state&quot;
    availability_topic: &quot;home-assistant/cover/availability&quot;
    qos: 0
    retain: true
    payload_open: &quot;OPEN&quot;
    payload_close: &quot;CLOSE&quot;
    payload_stop: &quot;STOP&quot;
    state_open: &quot;open&quot;
    state_closed: &quot;closed&quot;
    payload_available: &quot;online&quot;
    payload_not_available: &quot;offline&quot;
    optimistic: false
    value_template: '{{ value.x }}'
    tilt_command_topic: 'home-assistant/cover/tilt'
    tilt_status_topic: 'home-assistant/cover/tilt-state'
    tilt_status_template: '{{ value_json[&quot;PWM&quot;][&quot;PWM1&quot;] }}'
    tilt_min: 0
    tilt_max: 180
    tilt_closed_value: 70
    tilt_opened_value: 180
</code></pre>
<p>To test, you can use the command line tool <code>mosquitto_pub</code> shipped with <code>mosquitto</code> or the <code>mosquitto-clients</code> package to send MQTT messages. This allows you to operate your cover manually:</p>
<pre><code class="language-bash">$  mosquitto_pub -h 127.0.0.1 -t home-assistant/cover/set -m &quot;CLOSE&quot;
</code></pre>
:ET