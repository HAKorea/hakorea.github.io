I"<p>The <code>trend</code> platform allows you to create sensors which show the trend of
numeric <code>state</code> or<code>state_attributes</code> from other entities. This sensor requires
at least two updates of the underlying sensor to establish a trend.
Thus it can take some time to show an accurate state. It can be useful
as part of automations, where you want to base an action on a trend.</p>
<h2>Configuration</h2>
<p>To enable Trend binary sensors in your installation,
add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: trend
    sensors:
      cpu_speed:
        entity_id: sensor.cpu_speed
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='sensors' href='#sensors'></a> sensors</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your sensors.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The entity that this sensor tracks.</p>
</span></p></dd><dt><a class='title-link' name='attribute' href='#attribute'></a> attribute</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The attribute of the entity that this sensor tracks. If no attribute is specified then the sensor will track the state.</p>
</span></p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/binary_sensor/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the Frontend.</p>
</span></p></dd><dt><a class='title-link' name='invert' href='#invert'></a> invert</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Invert the result. A <code>true</code> value would mean descending rather than ascending.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='max_samples' href='#max_samples'></a> max_samples</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Limit the maximum number of stored samples.</p>
</span></p><p class='default'>
Default value: <p>2</p>
</p></dd><dt><a class='title-link' name='min_gradient' href='#min_gradient'></a> min_gradient</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The minimum rate at which the observed value must be changing for this sensor to switch on. The gradient is measured in sensor units per second.</p>
</span></p><p class='default'>
Default value: <p>0.0</p>
</p></dd><dt><a class='title-link' name='sample_duration' href='#sample_duration'></a> sample_duration</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The duration <strong>in seconds</strong> to store samples for. Samples older than this value will be discarded.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd></dl></dd></dl>
</div>
<h2>Using Multiple Samples</h2>
<p>If the optional <code>sample_duration</code> and <code>max_samples</code> parameters are specified
then multiple samples can be stored and used to detect long-term trends.</p>
<p>Each time the state changes, a new sample is stored along with the sample time.
Samples older than <code>sample_duration</code> seconds will be discarded.</p>
<p>A trend line is then fitted to the available samples, and the gradient of this
line is compared to <code>min_gradient</code> to determine the state of the trend sensor.
The gradient is measured in sensor units per second - so if you want to know
when the temperature is falling by 2 degrees per hour,
use a gradient of (-2) / (60 x 60) = -0.00055</p>
<p>The current number of stored samples is displayed on the States page.</p>
<h2>Examples</h2>
<p>In this section you find some real-life examples of how to use this sensor.</p>
<p>This example indicates <code>true</code> if the sun is still rising:</p>
<pre><code class="language-yaml">binary_sensor:
  - platform: trend
    sensors:
      sun_rising:
        entity_id: sun.sun
        attribute: elevation
</code></pre>
<p>This example creates two sensors to indicate whether the temperature is
rising or falling at a rate of at least 3 degrees an hour,
and collects samples over a two hour period:</p>
<pre><code class="language-yaml">binary_sensor:
  - platform: trend
    sensors:
      temp_falling:
        entity_id: sensor.outside_temperature
        sample_duration: 7200
        min_gradient: -0.0008
        device_class: cold

      temp_rising:
        entity_id: sensor.outside_temperature
        sample_duration: 7200
        min_gradient: 0.0008
        device_class: heat
</code></pre>
:ET