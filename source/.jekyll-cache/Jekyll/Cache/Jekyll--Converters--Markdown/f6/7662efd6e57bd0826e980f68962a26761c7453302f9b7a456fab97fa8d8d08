I"º%<p>The <code>utility meter</code> integration provides functionality to track consumptions of various utilities (e.g., energy, gas, water, heating).</p>
<p>From a user perspective, utility meters operate in cycles (usually monthly) for billing purposes. This sensor will track a source sensor values, automatically resetting the meter based on the configured cycle. On reset an attribute will store the previous meter value, providing the means for comparison operations (e.g., ‚Äúdid I spend more or less this month?‚Äù) or billing estimation (e.g., through a sensor template that multiplies the metered value per the charged unit amount).</p>
<p>Some utility providers have different tariffs according to time/resource availability/etc. The utility meter enables you to define the various tariffs supported by your utility provider and accounts your consumptions in accordance. When tariffs are defined a new entity will show up indicating the current tariff. In order to change the tariff, the user must call a service, usually through an automation that can be based in time or other external source (eg. a REST sensor).</p>
<div class='note'>
Sensors created with this integration are persistent, so values are retained across restarts of Home Assistant. The first cycle for each sensor, will be incomplete; a sensor tracking daily usage, will start to be accurate the next day after the integration was activated. A sensor tracking monthly usage, will present accurate data starting the first of the next month after being added to Home Assistant.
</div>
<h2>Configuration</h2>
<p>To enable the Utility Meter Sensor in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
utility_meter:
  energy:
    source: sensor.energy_in_kwh
    cycle: monthly
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='source' href='#source'></a> source</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The entity ID of the sensor providing utility readings (energy, water, gas, heating).</p>
</span></p></dd><dt><a class='title-link' name='cycle' href='#cycle'></a> cycle</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>How often to reset the counter. Valid values are <code>hourly</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>, <code>quarterly</code> and <code>yearly</code>.</p>
</span></p></dd><dt><a class='title-link' name='offset' href='#offset'></a> offset</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Cycle reset occur at the beginning of the period (0 minutes, 0h00 hours, Monday, day 1, January). This option enables the offsetting of these beginnings. Supported formats: <code>offset: 'HH:MM:SS'</code>, <code>offset: 'HH:MM'</code> and Time period dictionary (see example below).</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='net_consumption' href='#net_consumption'></a> net_consumption</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Set this to True if you would like to treat the source as a net meter. This will allow your counter to go both positive and negative.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='tariffs' href='#tariffs'></a> tariffs</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>List of tariffs supported by the utility meter.</p>
</span></p><p class='default'>
Default value: <p>[]</p>
</p></dd></dl>
</div>
<h3>Time period dictionary example</h3>
<pre><code class="language-yaml">offset:
  # At least one of these must be specified:
  days: 1
  hours: 0
  minutes: 0 
</code></pre>
<h2>Services</h2>
<h3>Service <code>utility_meter.reset</code></h3>
<p>Reset the Utility Meter. All sensors tracking tariffs will be reset to 0.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>String or list of strings that point at <code>entity_id</code>s of utility_meters.</td>
</tr>
</tbody>
</table>
<h3>Service <code>utility_meter.next_tariff</code></h3>
<p>Change the current tariff to the next in the list.
This service must be called by the user for the tariff switching logic to occur (e.g. using an automation)</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>String or list of strings that point at <code>entity_id</code>s of utility_meters.</td>
</tr>
</tbody>
</table>
<h3>Service <code>utility_meter.select_tariff</code></h3>
<p>Change the current tariff to the given tariff.
This service must be called by the user for the tariff switching logic to occur (e.g. using an automation)</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>String or list of strings that point at <code>entity_id</code>s of utility_meters.</td>
</tr>
<tr>
<td><code>tariff</code></td>
<td>no</td>
<td>String that is equal to one of the defined tariffs.</td>
</tr>
</tbody>
</table>
<h1>Advanced Configuration</h1>
<p>The following configuration shows an example where 2 utility_meters (<code>daily_energy</code> and <code>monthly_energy</code>) track daily and monthly energy consumptions.</p>
<p>Both track the same sensor (<code>sensor.energy</code>) which continuously monitors the energy consumed.</p>
<p>4 different sensors will be created, 2 per utility meter and corresponding to each tariff.
Sensor <code>sensor.daily_energy_peak</code>, <code>sensor.daily_energy_offpeak</code>, <code>sensor.monthly_energy_peak</code> and <code>sensor.monthly_energy_offpeak</code> will automatically be created to track the consumption in each tariff for the given cycle.</p>
<p><code>utility_meter.daily_energy</code> and <code>utility_meter.monthly_energy</code> entities will track the current tariff and provide a service to change the tariff.</p>
<pre><code class="language-yaml">utility_meter:
  daily_energy:
    source: sensor.energy
    cycle: daily
    tariffs:
      - peak
      - offpeak
  monthly_energy:
    source: sensor.energy
    cycle: monthly
    tariffs:
      - peak
      - offpeak
</code></pre>
<p>Assuming your energy provider tariffs are time based according to:</p>
<ul>
<li><em>peak</em>: from 9h00 to 21h00</li>
<li><em>offpeak</em>: from 21h00 to 9h00 next day</li>
</ul>
<p>a time based automation can be used:</p>
<pre><code class="language-yaml">automation:
  trigger:
    - platform: time
      at: '09:00:00'
    - platform: time
      at: '21:00:00'
  action:
    - service: utility_meter.next_tariff
      entity_id: utility_meter.daily_energy
    - service: utility_meter.next_tariff
      entity_id: utility_meter.monthly_energy
</code></pre>
<h2>Advanced Configuration for DSMR users</h2>
<p>When using the <a href="/integrations/dsmr">DSMR component</a> to get data from the utility meter, each tariff (peak and off-peak) has a separate sensor. Additionally, there is a separate sensor for gas consumption. The meter switches automatically between tariffs, so an automation is not necessary in this case. But, you do have to setup a few more instances of the <code>utility_meter</code> component.</p>
<p>If you want to create a daily and monthly sensor for each tariff, you have to track separate sensors:</p>
<ul>
<li><code>sensor.power_consumption_low</code> for off-peak power</li>
<li><code>sensor.power_consumption_normal</code> for peak power</li>
<li><code>sensor.gas_consumption</code> for gas consumption</li>
</ul>
<p>So, tracking daily and monthly consumption for each sensor, will require setting up 6 entries under the <code>utility_meter</code> component.</p>
<pre><code class="language-yaml">utility_meter:
  daily_power_offpeak:
    source: sensor.power_consumption_low
    cycle: daily
  daily_power_peak:
    source: sensor.power_consumption_normal
    cycle: daily
  daily_gas:
    source: sensor.gas_consumption
    cycle: daily
  monthly_power_offpeak:
    source: sensor.power_consumption_low
    cycle: monthly
  monthly_power_peak:
    source: sensor.power_consumption_normal
    cycle: monthly
  monthly_gas:
    source: sensor.gas_consumption
    cycle: monthly
</code></pre>
<p>Additionally, you can add template sensors to compute daily and monthly total usage.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      daily_power:
        friendly_name: Daily Power
        unit_of_measurement: kWh
        value_template: &quot;{{ states('sensor.daily_power_offpeak')|float + states('sensor.daily_power_peak')|float }}&quot;
      monthly_power:
        friendly_name: Monthly Power
        unit_of_measurement: kWh
        value_template: &quot;{{ states('sensor.monthly_power_offpeak')|float + states('sensor.monthly_power_peak')|float }}&quot;
</code></pre>
:ET