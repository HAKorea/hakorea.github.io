I"é$<p>The <code>filter</code> platform enables sensors that process the states of other entities.</p>
<p><code>filter</code> applies a signal processing algorithm to a sensor, previous and current states, and generates a <code>new state</code> given the chosen algorithm. The next image depicts an original sensor and the filter sensor of that same sensor using the <a href="/integrations/history_graph/">History Graph</a> component.</p>
<p class='img'>
  <img src='/images/screenshots/filter-sensor.png' />
</p>
<h2>Configuration</h2>
<p>To enable Filter Sensors in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: filter
    name: &quot;filtered realistic humidity&quot;
    entity_id: sensor.realistic_humidity
    filters:
      - filter: outlier
        window_size: 4
        radius: 4.0
      - filter: lowpass
        time_constant: 10
        precision: 2
  - platform: filter
    name: &quot;filtered realistic temperature&quot;
    entity_id: sensor.realistic_temperature
    filters:
      - filter: outlier
        window_size: 4
        radius: 2.0
      - filter: lowpass
        time_constant: 10
      - filter: time_simple_moving_average
        window_size: 00:05
        precision: 2
</code></pre>
<p>Filters can be chained and are applied according to the order present in the configuration file.</p>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The entity ID of the sensor to be filtered.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='filters' href='#filters'></a> filters</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>Filters to be used.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='filter' href='#filter'></a> filter</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Algorithm to be used to filter data. Available filters are  <code>lowpass</code>, <code>outlier</code>, <code>range</code>, <code>throttle</code>, <code>time_throttle</code> and <code>time_simple_moving_average</code>.</p>
</span></p></dd><dt><a class='title-link' name='window_size' href='#window_size'></a> window_size</dt><dd><p class='desc'><span class='type'>(<span class='integer time'>integer | time</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Size of the window of previous states. Time based filters such as <code>time_simple_moving_average</code> will require a time period (size in time), while other filters such as <code>outlier</code> will require an integer (size in number of states)</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='precision' href='#precision'></a> precision</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#low-pass"><em>lowpass</em></a> filter. Defines the precision of the filtered state, through the argument of round().</p>
</span></p><p class='default'>
Default value: <p>None</p>
</p></dd><dt><a class='title-link' name='time_constant' href='#time_constant'></a> time_constant</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#low-pass"><em>lowpass</em></a> filter. Loosely relates to the amount of time it takes for a state to influence the output.</p>
</span></p><p class='default'>
Default value: <p>10</p>
</p></dd><dt><a class='title-link' name='radius' href='#radius'></a> radius</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#outlier"><em>outlier</em></a> filter. Band radius from median of previous states.</p>
</span></p><p class='default'>
Default value: <p>2.0</p>
</p></dd><dt><a class='title-link' name='type' href='#type'></a> type</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#time-simple-moving-average"><em>time_simple_moving_average</em></a> filter. Defines the type of Simple Moving Average.</p>
</span></p><p class='default'>
Default value: <p>last</p>
</p></dd><dt><a class='title-link' name='lower_bound' href='#lower_bound'></a> lower_bound</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#range"><em>range</em></a> filter. Lower bound for filter range.</p>
</span></p><p class='default'>
Default value: <p>negative infinity</p>
</p></dd><dt><a class='title-link' name='upper_bound' href='#upper_bound'></a> upper_bound</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>See <a href="#range"><em>range</em></a> filter. Upper bound for filter range.</p>
</span></p><p class='default'>
Default value: <p>positive infinity</p>
</p></dd></dl></dd></dl>
</div>
<h2>Filters</h2>
<h3>Low-pass</h3>
<p>The Low-pass filter (<code>lowpass</code>) is one of signal processing most common filters, as it smooths data by shortcutting peaks and valleys.</p>
<p>The included Low-pass filter is very basic and is based on <a href="https://en.wikipedia.org/wiki/Exponential_smoothing">exponential smoothing</a>, in which the previous data point is weighted with the new data point.</p>
<pre><code class="language-python">B = 1.0 / time_constant
A = 1.0 - B
LowPass(state) = A * previous_state + B * state
</code></pre>
<p>The returned value is rounded to the number of decimals defined in (<code>precision</code>).</p>
<h3>Outlier</h3>
<p>The Outlier filter (<code>outlier</code>) is a basic Band-pass filter, as it cuts out any value outside a specific range.</p>
<p>The included Outlier filter will discard any value beyond a band centered on the median of the previous values, replacing it with the median value of the previous values. If inside the band, the</p>
<pre><code class="language-python">distance = abs(state - median(previous_states))

if distance &gt; radius:
    median(previous_states)
else:
    state
</code></pre>
<h3>Throttle</h3>
<p>The Throttle filter (<code>throttle</code>) will only update the state of the sensor for the first state in the window. This means the filter will skip all other values.</p>
<p>To adjust the rate you need to set the window_size. To throttle a sensor down to 10%, the <code>window_size</code> should be set to 10, for 50% should be set to 2.</p>
<p>This filter is relevant when you have a sensor which produces states at a very high-rate, which you might want to throttle down for storing or visualization purposes.</p>
<h3>Time Throttle</h3>
<p>The Time Throttle filter (<code>time_throttle</code>) will only update the state of the sensor for the first state in the window. This means the filter will skip all other values.</p>
<p>To adjust the rate you need to set the window_size. To throttle a sensor down to 1 value per minute, the <code>window_size</code> should be set to 00:01.</p>
<p>This filter is relevant when you have a sensor which produces states at a very high inconstant rate, which you might want to throttle down to some constant rate for storing or visualization purposes.</p>
<h3>Time Simple Moving Average</h3>
<p>The Time SMA filter (<code>time_simple_moving_average</code>) is based on the paper <a href="http://www.eckner.com/papers/Algorithms%20for%20Unevenly%20Spaced%20Time%20Series.pdf">Algorithms for Unevenly Spaced Time Series: Moving Averages and Other Rolling Operators</a> by Andreas Eckner.</p>
<p>The paper defines three types/versions of the Simple Moving Average (SMA): <em>last</em>, <em>next</em> and <em>linear</em>. Currently only <em>last</em> is implemented.</p>
<p>Theta, as described in the paper, is the <code>window_size</code> parameter, and can be expressed using time notation (e.g., 00:05 for a five minutes time window).</p>
<h3>Range</h3>
<p>The Range filter (<code>range</code>) restricts incoming data to a range specified by a lower and upper bound.</p>
<p>All values greater then the upper bound are replaced by the upper bound and all values lower than the lower bound are replaced by the lower bound.
Per default there are neither upper nor lower bound.</p>
<pre><code class="language-python">if new_state &gt; upper_bound:
    upper_bound
if new_state &lt; lower_bound:
    lower_bound
new_state
</code></pre>
:ET