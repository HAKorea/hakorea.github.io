I"<p>The <code>command_line</code> switch platform issues specific commands when it is turned on
and off. This might very well become our most powerful platform as it allows
anyone to integrate any type of switch into Home Assistant that can be
controlled from the command line, including calling other scripts!</p>
<p>To enable it, add the following lines to your <code>configuration.yaml</code>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: command_line
    switches:
      kitchen_light:
        command_on: switch_command on kitchen
        command_off: switch_command off kitchen
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='switches' href='#switches'></a> switches</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>The array that contains all command switches.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='identifier' href='#identifier'></a> identifier</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>Name of the command switch as slug. Multiple entries are possible.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='command_on' href='#command_on'></a> command_on</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The action to take for on.</p>
</span></p></dd><dt><a class='title-link' name='command_off' href='#command_off'></a> command_off</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The action to take for off.</p>
</span></p></dd><dt><a class='title-link' name='command_state' href='#command_state'></a> command_state</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If given, this command will be run. Returning a result code <code>0</code> will indicate that the switch is on.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If specified, <code>command_state</code> will ignore the result code of the command but the template evaluating to <code>true</code> will indicate the switch is on.</p>
</span></p></dd><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name used to display the switch in the frontend.</p>
</span></p></dd></dl></dd></dl></dd></dl>
</div>
<p>A note on <code>friendly_name</code>:</p>
<p>When set, the <code>friendly_name</code> had been previously used for API calls and backend
configuration instead of the <code>object_id</code> (“identifier”), but
<a href="https://github.com/home-assistant/home-assistant/pull/4343">this behavior is changing</a>
to make the <code>friendly_name</code> for display purposes only. This allows users to set
an <code>identifier</code> that emphasizes uniqueness and predictability for API and config
purposes but have a prettier <code>friendly_name</code> still show up in the UI. As an
additional benefit, if a user wanted to change the <code>friendly_name</code> / display
name (e.g., from “Kitchen Lightswitch” to “Kitchen Switch” or
“Living Room Light”, or remove the <code>friendly_name</code> altogether), he or she could
do so without needing to change existing automations or API calls.
See aREST device below for an example.</p>
<h2>Examples</h2>
<p>In this section you find some real-life examples of how to use this switch.</p>
<h3>aREST device</h3>
<p>The example below is doing the same as the
<a href="/integrations/arest#switch">aREST switch</a>.
The command line tool <a href="https://curl.haxx.se/"><code>curl</code></a> is used to toggle a pin
which is controllable through REST.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: command_line
  switches:
    arest_pin_four:
      command_on: &quot;/usr/bin/curl -X GET http://192.168.1.10/digital/4/1&quot;
      command_off: &quot;/usr/bin/curl -X GET http://192.168.1.10/digital/4/0&quot;
      command_state: &quot;/usr/bin/curl -X GET http://192.168.1.10/digital/4&quot;
      value_template: '{{ value == &quot;1&quot; }}'
      friendly_name: Kitchen Lightswitch
</code></pre>
<p>Given this example, in the UI one would see the <code>friendly_name</code> of
“Kitchen Light”. However, the <code>identifier</code> is <code>arest_pin_four</code>, making the
<code>entity_id</code> <code>switch.arest_pin_four</code>, which is what one would use in
<a href="/integrations/automation/"><code>automation</code></a> or in <a href="/developers/">API calls</a>.</p>
<h3>Shutdown your local host</h3>
<p>This switch will shutdown your system that is hosting Home Assistant.</p>
<div class='note warning'>
This switch will shutdown your host immediately, there will be no confirmation.
</div>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: command_line
  switches:
    home_assistant_system_shutdown:
      command_off: &quot;/usr/sbin/poweroff&quot;
</code></pre>
<h3>Control your VLC player</h3>
<p>This switch will control a local VLC media player
(<a href="https://community.home-assistant.io/t/vlc-player/106">Source</a>).</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: command_line
  switches:
    vlc:
      command_on: &quot;cvlc 1.mp3 vlc://quit &amp;&quot;
      command_off: &quot;pkill vlc&quot;
</code></pre>
<h3>Control Foscam Motion Sensor</h3>
<p>This switch will control the motion sensor of Foscam Webcams which Support CGI
Commands (<a href="http://www.ipcamcontrol.net/files/Foscam%20IPCamera%20CGI%20User%20Guide-V1.0.4.pdf">Source</a>).
This switch supports statecmd,
which checks the current state of motion detection.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: command_line
  switches:
    foscam_motion:
      command_on: 'curl -k &quot;https://ipaddress:443/cgi-bin/CGIProxy.fcgi?cmd=setMotionDetectConfig&amp;isEnable=1&amp;usr=admin&amp;pwd=password&quot;'
      command_off: 'curl -k &quot;https://ipaddress:443/cgi-bin/CGIProxy.fcgi?cmd=setMotionDetectConfig&amp;isEnable=0&amp;usr=admin&amp;pwd=password&quot;'
      command_state: 'curl -k --silent &quot;https://ipaddress:443/cgi-bin/CGIProxy.fcgi?cmd=getMotionDetectConfig&amp;usr=admin&amp;pwd=password&quot; | grep -oP &quot;(?&lt;=isEnable&gt;).*?(?=&lt;/isEnable&gt;)&quot;'
      value_template: '{{ value == &quot;1&quot; }}'
</code></pre>
<ul>
<li>Replace admin and password with an “Admin” privileged Foscam user</li>
<li>Replace ipaddress with the local IP address of your Foscam</li>
</ul>
:ET