I"<p>The default database used by Home Assistant is <a href="https://www.sqlite.org/">SQLite</a>, and the database file is stored in your <a href="/getting-started/configuration/">configuration directory</a> (e.g., <code>&lt;path to config dir&gt;/.homeassistant/home-assistant_v2.db</code>). If you prefer to run a database server (e.g. PostgreSQL), use the <a href="/integrations/recorder/"><code>recorder</code> component</a>.</p>
<p>To work with the SQLite database manually from the command-line, you will need an <a href="http://www.sqlitetutorial.net/download-install-sqlite/">installation</a> of <code>sqlite3</code>. Alternatively <a href="http://sqlitebrowser.org/">DB Browser for SQLite</a> provides a viewer for exploring the database data and an editor for executing SQL commands.
First load your database with <code>sqlite3</code>:</p>
<pre><code class="language-bash">$ sqlite3 home-assistant_v2.db
SQLite version 3.13.0 2016-05-18 10:57:30
Enter &quot;.help&quot; for usage hints.
sqlite&gt;
</code></pre>
<p>It helps to set some options to make the output more readable:</p>
<pre><code class="language-bash">sqlite&gt; .header on
sqlite&gt; .mode column
</code></pre>
<p>You could also start <code>sqlite3</code> and attach the database later. Not sure what database you are working with? Check it, especially if you are going to delete data.</p>
<pre><code class="language-bash">sqlite&gt; .databases
seq  name             file
---  ---------------  ----------------------------------------------------------
0    main             /home/fab/.homeassistant/home-assistant_v2.db
</code></pre>
<h3>Schema</h3>
<p>Get all available tables from your current Home Assistant database:</p>
<pre><code class="language-bash">sqlite&gt; SELECT sql FROM sqlite_master;

-------------------------------------------------------------------------------------
CREATE TABLE events (
	event_id INTEGER NOT NULL,
	event_type VARCHAR(32),
	event_data TEXT,
	origin VARCHAR(32),
	time_fired DATETIME,
	created DATETIME,
	PRIMARY KEY (event_id)
)
CREATE INDEX ix_events_event_type ON events (event_type)
CREATE TABLE recorder_runs (
	run_id INTEGER NOT NULL,
	start DATETIME,
	&quot;end&quot; DATETIME,
	closed_incorrect BOOLEAN,
	created DATETIME,
	PRIMARY KEY (run_id),
	CHECK (closed_incorrect IN (0, 1))
)
CREATE TABLE states (
	state_id INTEGER NOT NULL,
	domain VARCHAR(64),
	entity_id VARCHAR(64),
	state VARCHAR(255),
	attributes TEXT,
	event_id INTEGER,
	last_changed DATETIME,
	last_updated DATETIME,
	created DATETIME,
	PRIMARY KEY (state_id),
	FOREIGN KEY(event_id) REFERENCES events (event_id)
)
CREATE INDEX states__significant_changes ON states (domain, last_updated, entity_id)
CREATE INDEX states__state_changes ON states (last_changed, last_updated, entity_id)
CREATE TABLE sqlite_stat1(tbl,idx,stat)
</code></pre>
<p>To only show the details about the <code>states</code> table (since we are using that one in the next examples):</p>
<pre><code class="language-bash">sqlite&gt; SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'states';
</code></pre>
<h3>Query</h3>
<p>The identification of the available columns in the table is done and we are now able to create a query. Let’s list your Top 10 entities:</p>
<pre><code class="language-bash">sqlite&gt; .width 30, 10,
sqlite&gt; SELECT entity_id, COUNT(*) as count FROM states GROUP BY entity_id ORDER BY count DESC LIMIT 10;
entity_id                       count
------------------------------  ----------
sensor.cpu                      28874
sun.sun                         21238
sensor.time                     18415
sensor.new_york                 18393
cover.kitchen_cover             17811
switch.mystrom_switch           14101
sensor.internet_time            12963
sensor.solar_angle1             11397
sensor.solar_angle              10440
group.all_switches              8018
</code></pre>
<h3>Delete</h3>
<p>If you don’t want to keep certain entities, you can delete them permanently:</p>
<pre><code class="language-bash">sqlite&gt; DELETE FROM states WHERE entity_id=&quot;sensor.cpu&quot;;
</code></pre>
<p>The <code>VACUUM</code> command cleans your database.</p>
<pre><code class="language-bash">sqlite&gt; VACUUM;
</code></pre>
<p>For a more interactive way of working with the database, check the <a href="https://data.home-assistant.io/">Data Science Portal</a>.</p>
:ET