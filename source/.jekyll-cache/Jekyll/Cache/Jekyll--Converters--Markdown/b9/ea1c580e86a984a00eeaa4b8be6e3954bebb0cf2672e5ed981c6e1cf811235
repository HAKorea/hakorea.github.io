I"<p>A sensor platform for Dutch Smart Meters which comply to DSMR (Dutch Smart Meter Requirements), also known as ‘Slimme meter’ or ‘P1 poort’.</p>
<ul>
<li>Currently support DSMR V2.2, V3, V4 and V5 through the <a href="https://github.com/ndokter/dsmr_parser">dsmr_parser</a> module by Nigel Dokter.</li>
<li>For official information about DSMR refer to: <a href="https://www.netbeheernederland.nl/dossiers/slimme-meter-15">DSMR Document</a></li>
<li>For official information about the P1 port refer to: <a href="https://www.netbeheernederland.nl/_upload/Files/Slimme_meter_15_a727fce1f1.pdf">https://www.netbeheernederland.nl/_upload/Files/Slimme_meter_15_a727fce1f1.pdf</a></li>
<li>For unofficial hardware connection examples refer to: <a href="http://domoticx.com/p1-poort-slimme-meter-hardware/">Domoticx</a></li>
</ul>
<p class='img'>
<img src='/images/screenshots/dsmr.png' />
</p>
<p>This integration is known to work for:</p>
<ul>
<li>Iskra ME382 / MT382 (DSMR 2.2)</li>
<li>ISKRA AM550 (DSMR 5.0)</li>
<li>Landis+Gyr E350 (DMSR 4)</li>
<li>Landis+Gyr ZCF110 / ZM F110 (DSMR 4.2)</li>
<li>Kaifa E0026</li>
<li>Kamstrup 382JxC (DSMR 2.2)</li>
<li>Sagemcom XS210 ESMR5</li>
</ul>
<p>USB serial converters:</p>
<ul>
<li>Cheap (Banggood/ebay) Generic PL2303</li>
<li><a href="https://sites.google.com/site/nta8130p1smartmeter/webshop">https://sites.google.com/site/nta8130p1smartmeter/webshop</a></li>
<li><a href="https://www.sossolutions.nl/slimme-meter-kabel">https://www.sossolutions.nl/slimme-meter-kabel</a></li>
<li><a href="https://tweakers.net/gallery/269738/aanbod/">https://tweakers.net/gallery/269738/aanbod/</a></li>
</ul>
<p>Serial to network proxies:</p>
<ul>
<li>ser2net - <a href="http://ser2net.sourceforge.net/">http://ser2net.sourceforge.net/</a></li>
</ul>
<p>DIY solutions (ESP8266 based):</p>
<ul>
<li><a href="https://github.com/fliphess/esp8266_p1meter">esp8266_p1meter (fliphess)</a></li>
</ul>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: dsmr
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='port' href='#port'></a> port</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Serial port to which Smartmeter is connected (default: /dev/ttyUSB0 (connected to USB port)). For remote (i.e. ser2net) connections, use TCP port number to connect to (i.e. 2001).</p>
</span></p></dd><dt><a class='title-link' name='host' href='#host'></a> host</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Host to which Smartmeter is connected (default: ‘’ (connected via serial or USB, see <strong>port</strong>)). For remote connections, use IP address of host to connect to (i.e. 192.168.1.13).</p>
</span></p></dd><dt><a class='title-link' name='dsmr_version' href='#dsmr_version'></a> dsmr_version</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Version of DSMR used by meter. Choices: 2.2, 4, 5. Defaults to 2.2.</p>
</span></p></dd><dt><a class='title-link' name='precision' href='#precision'></a> precision</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the precision of the calculated values, through the argument of round().</p>
</span></p><p class='default'>
Default value: <p>3</p>
</p></dd></dl>
</div>
<p>Full configuration examples can be found below:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry for USB/serial connected Smartmeter
sensor:
  - platform: dsmr
    port: /dev/ttyUSB1
    dsmr_version: 5

group:
  meter_readings:
    name: Meter readings
    entities:
      - sensor.power_consumption_low
      - sensor.power_consumption_normal
      - sensor.power_production_low
      - sensor.power_production_normal
      - sensor.gas_consumption
</code></pre>
<pre><code class="language-yaml"># Example configuration.yaml entry for remote (TCP/IP, i.e. via ser2net) connection to host which is connected to Smartmeter
sensor:
  - platform: dsmr
    host: 192.168.1.13
    port: 2001
    dsmr_version: 5

group:
  meter_readings:
    name: Meter readings
    entities:
      - sensor.power_consumption_low
      - sensor.power_consumption_normal
      - sensor.power_production_low
      - sensor.power_production_normal
      - sensor.gas_consumption
</code></pre>
<p>Optional configuration example for ser2net:</p>
<pre><code class="language-sh"># Example /etc/ser2net.conf for proxying USB/serial connections to DSMRv4 smart meters
2001:raw:600:/dev/ttyUSB0:115200 NONE 1STOPBIT 8DATABITS XONXOFF LOCAL -RTSCTS
</code></pre>
<p>or</p>
<pre><code class="language-sh"># Example /etc/ser2net.conf for proxying USB/serial connections to DSMRv2.2 smart meters
2001:raw:600:/dev/ttyUSB0:9600 EVEN 1STOPBIT 7DATABITS XONXOFF LOCAL -RTSCTS
</code></pre>
<p>Docker users have to allow Docker access to the device by adding <code>--device /dev/ttyUSB21:/dev/ttyUSB21</code> to the run command:</p>
<pre><code class="language-hass">$ docker run --device /dev/ttyUSB0:/dev/ttyUSB0 -d --name=&quot;home-assistant&quot; -v /home/USERNAME/hass:/config -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/home-assistant
</code></pre>
<h3>Technical overview</h3>
<p>DSMR is a standard to which Dutch smartmeters must comply. It specifies that the smartmeter must send out a ‘telegram’ every 10 seconds (every second for DSMR 5.0 devices) over a serial port.</p>
<p>The contents of this telegram differ between version but they generally consist of lines with ‘obis’ (Object Identification System, a numerical ID for a value) followed with the value and unit.</p>
<p>This module sets up an asynchronous reading loop using the <code>dsmr_parser</code> module which waits for a complete telegram, parser it and puts it on an async queue as a dictionary of <code>obis</code>/object mapping. The numeric value and unit of each value can be read from the objects attributes. Because the <code>obis</code> are know for each DSMR version the Entities for this integration are create during bootstrap.</p>
<p>Another loop (DSMR class) is setup which reads the telegram queue, stores/caches the latest telegram and notifies the Entities that the telegram has been updated.</p>
:ET