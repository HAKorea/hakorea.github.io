I"â <p>The <code>hdmi_cec</code> integration provides services that allow selecting the active device, powering on all devices, setting all devices to standby and creates switch entities for HDMI devices. Devices are defined in the configuration file by associating HDMI port number and a device name. Connected devices that provide further HDMI ports, such as sound-bars and AVRs are also supported. Devices are listed from the perspective of the CEC-enabled Home Assistant device. Any connected device can be listed, regardless of whether it supports CEC. Ideally the HDMI port number on your device will map correctly the CEC physical address. If it does not, use <code>cec-client</code> (part of the <code>libcec</code> package) to listen to traffic on the CEC bus and discover the correct numbers.</p>
<h2>CEC Setup</h2>
<h3>Adapter</h3>
<p>The computer running Home Assistant must support CEC, and of course be connected via HDMI to a device also supporting CEC. You can purchase a <a href="https://www.pulse-eight.com/p/104/usb-hdmi-cec-adapter">USB CEC adapter</a> to add support if necessary. Note that all Raspberry Pi models support CEC natively.</p>
<h3>libcec</h3>
<p><a href="https://github.com/Pulse-Eight/libcec">libcec</a> must be installed for this integration to work. Follow the installation instructions for your environment, provided at the link. <code>libcec</code> installs Python 3 bindings by default as a system Python module. If you are running Home Assistant in a <a href="/docs/installation/virtualenv/">Python virtual environment</a>, make sure it can access the system module, by either symlinking it or using the <code>--system-site-packages</code> flag.</p>
<div class='note'>
<p>If you are using <a href="/hassio/">Hass.io</a> then just move forward to the configuration as all requirements are already fulfilled.</p>
</div>
<h4>Symlinking into virtual environment</h4>
<p>Create a symlink to the <code>cec</code> installation including the _cec.so file. Keep in mind different installation methods will result in different locations of cec.</p>
<pre><code class="language-bash">ln -s /path/to/your/installation/of/cec.py /path/to/your/venv/lib/python*/site-packages
ln -s /path/to/your/installation/of/_cec.so /path/to/your/venv/lib/python*/site-packages

</code></pre>
<h5>Symlinking examples:</h5>
<p>For the default virtual environment of a <a href="/docs/installation/raspberry-pi/">Manual install for Raspberry Pi</a> the command would be as follows.</p>
<pre><code class="language-bash">ln -s /usr/local/lib/python*/dist-packages/cec.py /srv/homeassistant/lib/python*/site-packages
ln -s /usr/local/lib/python*/dist-packages/_cec.so /srv/homeassistant/lib/python*/site-packages
</code></pre>
<div class='note'>
<p>If after symlinking and adding <code>hdmi_cec:</code> to your configuration you are getting the following error in your logs,
<code>* failed to open vchiq instance</code> you will also need to add the user account Home Assistant runs under, to the <code>video</code> group. To add the Home Assistant user account to the <code>video</code> group, run the following command. <code>$ usermod -a -G video &lt;hass_user_account&gt;</code></p>
</div>
<h2>Testing your installation</h2>
<ul>
<li>Login to Raspberry Pi</li>
</ul>
<pre><code class="language-bash">ssh pi@your_raspberry_pi_ip
</code></pre>
<ul>
<li>at the command line type:</li>
</ul>
<pre><code class="language-bash">echo scan | cec-client -s -d 1
</code></pre>
<p>Note: to use this command you have to install cec-utils package. In Debian based should be: <code>sudo apt install cec-utils</code></p>
<ul>
<li>This will give you the list of devices that are on the bus</li>
</ul>
<pre><code class="language-bash">opening a connection to the CEC adapter...
requesting CEC bus information ...
CEC bus information
===================
device #4: Playback 1
address:       3.0.0.0
active source: no
vendor:        Sony
osd string:    BD
CEC version:   1.4
power status:  on
language:      ???
</code></pre>
<div class='note'>
<p><code>address:</code> entry above this will be used to configure Home Assistant, this address is represented below as 3: BlueRay player.</p>
</div>
<h2>Configuration Example</h2>
<p>In the following example, a Pi Zero running Home Assistant is on a TV‚Äôs HDMI port 1. HDMI port 2 is attached to a AV receiver. Three devices are attached to the AV receiver on HDMI ports 1 through 3.</p>
<p>You can use either direct mapping name to physical address of device</p>
<pre><code class="language-yaml">hdmi_cec:
  devices:
    TV: 0.0.0.0
    Pi Zero: 1.0.0.0
    Fire TV Stick: 2.1.0.0
    Chromecast: 2.2.0.0
    Another Device: 2.3.0.0
    BlueRay player: 3.0.0.0
</code></pre>
<p>or port mapping tree:</p>
<pre><code class="language-yaml">hdmi_cec:
  devices:
    1: Pi Zero
    2:
      1: Fire TV Stick
      2: Chromecast
      3: Another Device
    3: BlueRay player
</code></pre>
<p>Choose just one schema. Mixing both approaches is not possible.</p>
<p>Another option you can use in config is <code>platform</code> which specifying of default platform of HDMI devices. ‚Äúswitch‚Äù and ‚Äúmedia_player‚Äù are supported. Switch is default.</p>
<pre><code class="language-yaml">hdmi_cec:
  platform: media_player
</code></pre>
<p>Then you set individual platform for devices in customizations:</p>
<pre><code class="language-yaml">hdmi_cec:
  types:
    hdmi_cec.hdmi_5: media_player
</code></pre>
<p>And the last option is <code>host</code>. PyCEC supports bridging CEC commands over TCP. When you start pyCEC on machine with HDMI port (<code>python -m pycec</code>), you can then run homeassistant on another machine and connect to CEC over TCP. Specify TCP address of pyCEC server:</p>
<pre><code class="language-yaml">hdmi_cec:
  host: 192.168.1.3
</code></pre>
<h2>Services</h2>
<h3>Select Device</h3>
<p>Call the <code>hdmi_cec.select_device</code> service with the name of the device from config or entity_id or physical address‚Äùto select it, for example:</p>
<pre><code class="language-json">{&quot;device&quot;: &quot;Chromecast&quot;}
</code></pre>
<pre><code class="language-json">{&quot;device&quot;: &quot;switch.hdmi_3&quot;}
</code></pre>
<pre><code class="language-json">{&quot;device&quot;: &quot;1.1.0.0&quot;}
</code></pre>
<p>So an Automation action using the example above would look something like this.</p>
<pre><code class="language-yaml">action:
  service: hdmi_cec.select_device
    data:
      device: Chromecast
</code></pre>
<h3>Power On</h3>
<p>Call the <code>hdmi_cec.power_on</code> service (no arguments) to power on any devices that support this function.</p>
<p>An Automation action using the example above would look something like this.</p>
<pre><code class="language-yaml">action:
  service: hdmi_cec.power_on
</code></pre>
<h3>Standby</h3>
<p>Call the <code>hdmi_cec.standby</code> service (no arguments) to place in standby any devices that support this function.</p>
<p>An Automation action using the example above would look something like this.</p>
<pre><code class="language-yaml">action:
  service: hdmi_cec.standby
</code></pre>
<h3>Change volume level</h3>
<p>Call the <code>hdmi_cec.volume</code> service with one of following commands:</p>
<h4>Volume up</h4>
<p>Increase volume three times:</p>
<pre><code class="language-json">{&quot;up&quot;: 3}
</code></pre>
<p>Keep increasing volume until release is called:</p>
<pre><code class="language-json">{&quot;up&quot;: &quot;press&quot;}
</code></pre>
<p>Stop increasing volume:</p>
<pre><code class="language-json">{&quot;up&quot;: &quot;release&quot;}
</code></pre>
<h4>Volume down</h4>
<p>Decrease volume three times:</p>
<pre><code class="language-json">{&quot;down&quot;: 3}
</code></pre>
<p>Keep decreasing volume until release is called:</p>
<pre><code class="language-json">{&quot;down&quot;: &quot;press&quot;}
</code></pre>
<p>Stop decreasing volume:</p>
<pre><code class="language-json">{&quot;down&quot;: &quot;release&quot;}
</code></pre>
<h4>Volume mute</h4>
<p>Toggle mute:</p>
<pre><code class="language-json">{&quot;mute&quot;: &quot;&quot;}
</code></pre>
<p>value is ignored.</p>
<h2>Useful References</h2>
<ul>
<li><a href="http://wiki.kwikwai.com/index.php?title=The_HDMI-CEC_bus">CEC overview</a></li>
<li><a href="http://www.cec-o-matic.com/">CEC-o-matic</a></li>
</ul>
:ET