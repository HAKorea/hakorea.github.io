I"Å2<p>The <code>mqtt</code> switch platform lets you control your MQTT enabled switches.</p>
<h2>Configuration</h2>
<p>In an ideal scenario, the MQTT device will have a <code>state_topic</code> to publish state changes. If these messages are published with a <code>RETAIN</code> flag, the MQTT switch will receive an instant state update after subscription, and will start with the correct state. Otherwise, the initial state of the switch will be <code>false</code> / <code>off</code>.</p>
<p>When a <code>state_topic</code> is not available, the switch will work in optimistic mode. In this mode, the switch will immediately change state after every command. Otherwise, the switch will wait for state confirmation from the device (message from <code>state_topic</code>).</p>
<p>Optimistic mode can be forced, even if the <code>state_topic</code> is available. Try to enable it, if experiencing incorrect switch operation.</p>
<p>To enable this switch in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: mqtt
    command_topic: &quot;home/bedroom/switch1/set&quot;
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='command_topic' href='#command_topic'></a> command_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic to publish commands to change the switch state.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name to use when displaying this switch.</p>
</span></p><p class='default'>
Default value: <p>MQTT Switch</p>
</p></dd><dt><a class='title-link' name='icon' href='#icon'></a> icon</dt><dd><p class='desc'><span class='type'>(<span class='icon'><a href="/docs/configuration/customizing-devices/#icon">icon</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Icon for the switch.</p>
</span></p></dd><dt><a class='title-link' name='state_topic' href='#state_topic'></a> state_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive state updates.</p>
</span></p></dd><dt><a class='title-link' name='state_on' href='#state_on'></a> state_on</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the on state.</p>
</span></p><p class='default'>
Default value: <p><code>payload_on</code> if defined, else ON</p>
</p></dd><dt><a class='title-link' name='state_off' href='#state_off'></a> state_off</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the off state.</p>
</span></p><p class='default'>
Default value: <p><code>payload_off</code> if defined, else OFF</p>
</p></dd><dt><a class='title-link' name='availability_topic' href='#availability_topic'></a> availability_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive availability (online/offline) updates.</p>
</span></p></dd><dt><a class='title-link' name='payload_on' href='#payload_on'></a> payload_on</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents enabled state.</p>
</span></p><p class='default'>
Default value: <p>ON</p>
</p></dd><dt><a class='title-link' name='payload_off' href='#payload_off'></a> payload_off</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents disabled state.</p>
</span></p><p class='default'>
Default value: <p>OFF</p>
</p></dd><dt><a class='title-link' name='payload_available' href='#payload_available'></a> payload_available</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the available state.</p>
</span></p><p class='default'>
Default value: <p>online</p>
</p></dd><dt><a class='title-link' name='payload_not_available' href='#payload_not_available'></a> payload_not_available</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents the unavailable state.</p>
</span></p><p class='default'>
Default value: <p>offline</p>
</p></dd><dt><a class='title-link' name='optimistic' href='#optimistic'></a> optimistic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Flag that defines if switch works in optimistic mode.</p>
</span></p><p class='default'>
Default value: <p><code>true</code> if no <code>state_topic</code> defined, else <code>false</code>.</p>
</p></dd><dt><a class='title-link' name='qos' href='#qos'></a> qos</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The maximum QoS level of the state topic. Default is 0 and will also be used to publishing messages.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='retain' href='#retain'></a> retain</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If the published message should have the retain flag on or not.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract a value from the payload.</p>
</span></p></dd><dt><a class='title-link' name='json_attributes_topic' href='#json_attributes_topic'></a> json_attributes_topic</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MQTT topic subscribed to receive a JSON dictionary payload and then set as sensor attributes. Usage example can be found in <a href="/integrations/sensor.mqtt/#json-attributes-topic-configuration">MQTT sensor</a> documentation.</p>
</span></p></dd><dt><a class='title-link' name='json_attributes_template' href='#json_attributes_template'></a> json_attributes_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract the JSON dictionary from messages received on the <code>json_attributes_topic</code>. Usage example can be found in <a href="/integrations/sensor.mqtt/#json-attributes-template-configuration">MQTT sensor</a> documentation.</p>
</span></p></dd><dt><a class='title-link' name='device' href='#device'></a> device</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Information about the device this switch is a part of to tie it into the <a href="https://developers.home-assistant.io/docs/en/device_registry_index.html">device registry</a>. Only works through <a href="/docs/mqtt/discovery/">MQTT discovery</a> and when <a href="#unique_id"><code>unique_id</code></a> is set.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='identifiers' href='#identifiers'></a> identifiers</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of IDs that uniquely identify the device. For example a serial number.</p>
</span></p></dd><dt><a class='title-link' name='connections' href='#connections'></a> connections</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of connections of the device to the outside world as a list of tuples <code>[connection_type, connection_identifier]</code>. For example the MAC address of a network interface: <code>&quot;connections&quot;: [[&quot;mac&quot;, &quot;02:5b:26:a8:dc:12&quot;]]</code>.</p>
</span></p></dd><dt><a class='title-link' name='manufacturer' href='#manufacturer'></a> manufacturer</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The manufacturer of the device.</p>
</span></p></dd><dt><a class='title-link' name='model' href='#model'></a> model</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The model of the device.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the device.</p>
</span></p></dd><dt><a class='title-link' name='sw_version' href='#sw_version'></a> sw_version</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The firmware version of the device.</p>
</span></p></dd></dl></dd></dl>
</div>
<div class='note warning'>
<p>Make sure that your topic matches exactly. <code>some-topic/</code> and <code>some-topic</code> are different topics.</p>
</div>
<h2>Examples</h2>
<p>In this section, you will find some real-life examples of how to use this sensor.</p>
<h3>Full configuration</h3>
<p>The example below shows a full configuration for a switch.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: mqtt
    name: &quot;Bedroom Switch&quot;
    state_topic: &quot;home/bedroom/switch1&quot;
    command_topic: &quot;home/bedroom/switch1/set&quot;
    availability_topic: &quot;home/bedroom/switch1/available&quot;
    payload_on: &quot;ON&quot;
    payload_off: &quot;OFF&quot;
    state_on: &quot;ON&quot;
    state_off: &quot;OFF&quot;
    optimistic: false
    qos: 0
    retain: true
</code></pre>
<p>For a check, you can use the command line tools <code>mosquitto_pub</code> shipped with <code>mosquitto</code> to send MQTT messages. This allows you to operate your switch manually:</p>
<pre><code class="language-bash">mosquitto_pub -h 127.0.0.1 -t home/bedroom/switch1 -m &quot;ON&quot;
</code></pre>
<h3>Set the state of a device with ESPEasy</h3>
<p>Assuming that you have flashed your ESP8266 unit with <a href="https://github.com/letscontrolit/ESPEasy">ESPEasy</a>. Under âConfigâ is a name (âUnit Name:â) set for your device (here itâs âbathroomâ). A configuration for a âControllerâ for MQTT with the protocol âOpenHAB MQTTâ is present and the entries (âController Subscribe:â and âController Publish:â) are adjusted to match your needs. In this example, the topics are prefixed with âhomeâ. There is no further configuration needed as the <a href="https://www.letscontrolit.com/wiki/index.php/GPIO">GPIOs</a> can be controlled with MQTT directly.</p>
<p>Manually you can set pin 13 to high with <code>mosquitto_pub</code> or another MQTT tool:</p>
<pre><code class="language-bash">mosquitto_pub -h 127.0.0.1 -t home/bathroom/gpio/13 -m &quot;1&quot;
</code></pre>
<p>The configuration will look like the example below:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: mqtt
    name: bathroom
    state_topic: &quot;home/bathroom/gpio/13&quot;
    command_topic: &quot;home/bathroom/gpio/13&quot;
    payload_on: &quot;1&quot;
    payload_off: &quot;0&quot;
</code></pre>
:ET