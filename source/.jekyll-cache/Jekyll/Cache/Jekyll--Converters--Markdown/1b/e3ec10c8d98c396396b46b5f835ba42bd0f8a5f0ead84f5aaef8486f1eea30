I"{3<p>The ADS (automation device specification) describes a device-independent and fieldbus independent interface for communication between <a href="https://www.beckhoff.com/">Beckhoff</a> automation devices running <a href="https://www.beckhoff.hu/english.asp?twincat/default.htm">TwinCAT</a> and other devices implementing this interface.</p>
<p>There is currently support for the following device types within Home Assistant:</p>
<ul>
<li><a href="#binary-sensor">Binary Sensor</a></li>
<li><a href="#light">Light</a></li>
<li><a href="#sensor">Sensor</a></li>
<li><a href="#switch">Switch</a></li>
<li><a href="#cover">Cover</a></li>
</ul>
<h2>Configuration</h2>
<p>To enable ADS, add the following lines to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
ads:
  device: '127.0.0.1.1.1'
  port: 801
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='device' href='#device'></a> device</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The AMS NetId that identifies the device.</p>
</span></p></dd><dt><a class='title-link' name='port' href='#port'></a> port</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Required)</span><span class='description'><p>The port that runs the AMS server on the device, typically this would be 801 or 851.</p>
</span></p></dd><dt><a class='title-link' name='ip_address' href='#ip_address'></a> ip_address</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The IP address of the ADS device, if not set the first 4 bytes of the device id will be used.</p>
</span></p></dd></dl>
</div>
<h2>Service</h2>
<p>The ADS integration will register the service <code>write_by_name</code> allowing you to write a value to a variable on your ADS device.</p>
<pre><code class="language-json">{
    &quot;adsvar&quot;: &quot;.myvariable&quot;,
    &quot;adstype&quot;: &quot;int&quot;,
    &quot;value&quot;: 123
}
</code></pre>
<p>Service parameters:</p>
<ul>
<li><strong>adsvar</strong>: Name of the variable on the ADS device. To access global variables on <em>TwinCAT2</em> use a prepending dot <code>.myvariable</code>, for TwinCAT3 use <code>GBL.myvariable</code>.</li>
<li><strong>adstype</strong>: Specify the type of the variable. Use one of the following: <code>int</code>, <code>byte</code>, <code>uint</code>, <code>bool</code></li>
<li><strong>value</strong>: The value that will be written in the variable.</li>
</ul>
<h2>Binary Sensor</h2>
<p>The <code>ads</code> binary sensor platform can be used to monitor a boolean value on your ADS device.</p>
<p>To use your ADS device, you first have to set up your <a href="#configuration">ADS hub</a> and then add the following to your <code>configuration.yaml</code>
file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: ads
    adsvar: .boolean1
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='adsvar' href='#adsvar'></a> adsvar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the variable which you want to access on the ADS device.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An identifier for the light in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/binary_sensor/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd></dl>
</div>
<h2>Light</h2>
<p>The <code>ads</code> light platform allows you to control your connecte ADS lights.</p>
<p>To use your ADS device, you first have to set up your <a href="#configuration">ADS hub</a> and then add the following to your <code>configuration.yaml</code>
file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
light:
  - platform: ads
    adsvar: GVL.enable_light
    adsvar_brightness: GVL.brightness
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='adsvar' href='#adsvar'></a> adsvar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the boolean variable that switches the light on</p>
</span></p></dd><dt><a class='title-link' name='adsvar_brightness' href='#adsvar_brightness'></a> adsvar_brightness</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the variable that controls the brightness, use an unsigned integer on the PLC side</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An identifier for the Light in the frontend</p>
</span></p></dd></dl>
</div>
<h2>Sensor</h2>
<p>The <code>ads</code> sensor platform allows reading the value of a numeric variable on your ADS device. The variable can be of type <em>INT</em>, <em>UINT</em>,  <em>BYTE</em>, <em>DINT</em> or <em>UDINT</em>.</p>
<p>To use your ADS device, you first have to set up your <a href="#configuration">ADS hub</a> and then add the following to your <code>configuration.yaml</code>
file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: ads
    adsvar: GVL.temperature
    unit_of_measurement: 'Â°C'
    adstype: integer
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='adsvar' href='#adsvar'></a> adsvar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the variable which you want to access.</p>
</span></p></dd><dt><a class='title-link' name='adstype' href='#adstype'></a> adstype</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The datatype of the ADS variable, possible values are int, uint, byte, dint, udint.</p>
</span></p><p class='default'>
Default value: <p>int</p>
</p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An identifier for the sensor.</p>
</span></p></dd><dt><a class='title-link' name='factor' href='#factor'></a> factor</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A factor that divides the stored value before displaying in Home Assistant.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd></dl>
</div>
<p>The <em>factor</em> can be used to implement fixed decimals. E.g., set <em>factor</em> to 100 if you want to display a fixed decimal value with two decimals. A variable value of <code>123</code> will be displayed as <code>1.23</code>.</p>
<h2>Switch</h2>
<p>The <code>ads</code> switch platform accesses a boolean variable on the connected ADS device. The variable is identified by its name.</p>
<p>To use your ADS device, you first have to set up your <a href="#configuration">ADS hub</a> and then add the following to your <code>configuration.yaml</code>
file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: ads
    adsvar: .global_bool
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='adsvar' href='#adsvar'></a> adsvar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the variable which you want to access on the ADS device.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An identifier for the switch in the frontend.</p>
</span></p></dd></dl>
</div>
<h2>Cover</h2>
<p>The <code>ads</code> cover platform allows you to control your connected ADS covers.</p>
<p>To use your ADS device, you first have to set up your <a href="#configuration">ADS hub</a> and then add the following to your <code>configuration.yaml</code>
file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: ads
    name: Curtain master bed room
    adsvar_open: covers.master_bed_room_open
    adsvar_close: covers.master_bed_room_close
    adsvar_stop: covers.master_bed_room_stop
    device_class: curtain
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='adsvar' href='#adsvar'></a> adsvar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the boolean variable that returns the current status of the cover (<code>True</code> = closed)</p>
</span></p></dd><dt><a class='title-link' name='adsvar_position' href='#adsvar_position'></a> adsvar_position</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the variable that returns the current cover position, use a byte variable on the PLC side</p>
</span></p></dd><dt><a class='title-link' name='adsvar_set_position' href='#adsvar_set_position'></a> adsvar_set_position</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the variable that sets the new cover position, use a byte variable on the PLC side</p>
</span></p></dd><dt><a class='title-link' name='adsvar_open' href='#adsvar_open'></a> adsvar_open</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the boolean variable that triggers the cover to open</p>
</span></p></dd><dt><a class='title-link' name='adsvar_close' href='#adsvar_close'></a> adsvar_close</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the boolean variable that triggers the cover to close</p>
</span></p></dd><dt><a class='title-link' name='adsvar_stop' href='#adsvar_stop'></a> adsvar_stop</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name of the boolean variable that triggers the cover to stop</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An identifier for the Cover in the frontend</p>
</span></p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='device_class'><a href="/docs/configuration/customizing-devices/#device-class">device_class</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/cover/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd></dl>
</div>
:ET