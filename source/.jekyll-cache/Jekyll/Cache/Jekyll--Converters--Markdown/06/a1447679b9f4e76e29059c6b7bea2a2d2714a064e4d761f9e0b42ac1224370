I"(<p>The <code>facebox</code> image processing platform allows you to detect and recognize faces in a camera image using <a href="https://machinebox.io/docs/facebox">Facebox</a>. The state of the entity is the number of faces detected, and recognized faces are listed in the <code>matched_faces</code> attribute. An <code>image_processing.detect_face</code> event is fired for each recognized face, and the event <code>data</code> provides the <code>confidence</code> of recognition, the <code>name</code> of the person, the <code>image_id</code> of the image associated with the match, the <code>bounding_box</code> that contains the face in the image, and the <code>entity_id</code> that processing was performed on.</p>
<h2>Setup</h2>
<p>Facebox runs in a Docker container and it is recommended that you run this container on a machine with a minimum of 2 GB RAM. On your machine with Docker, run the Facebox container with:</p>
<pre><code class="language-bash">MB_KEY=&quot;INSERT-YOUR-KEY-HERE&quot;

sudo docker run --name=facebox --restart=always -p 8080:8080 -e &quot;MB_KEY=$MB_KEY&quot;  machinebox/facebox
</code></pre>
<p>or using <code>docker-compose</code>:</p>
<pre><code class="language-yaml">version: '3'
services:
  facebox:
    image: machinebox/facebox
    container_name: facebox
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      - MB_KEY=${MB_KEY}
      - MB_FACEBOX_DISABLE_RECOGNITION=false
</code></pre>
<p>You can run Facebox with a username and password by adding <code>-e &quot;MB_BASICAUTH_USER=my_username&quot; -e &quot;MB_BASICAUTH_PASS=my_password&quot;</code> but bear in mind that the integration does not encrypt these credentials and this approach does not guarantee security on an unsecured network.</p>
<p>After you created an account at <a href="https://machinebox.io/account">Machinebox</a>, you can grab your <code>MB_KEY</code> at <a href="https://developer.veritone.com/machinebox/overview">your Account page</a>.</p>
<p>If you only require face detection (number of faces) you can disable face recognition by adding <code>-e &quot;MB_FACEBOX_DISABLE_RECOGNITION=true&quot;</code> in the <code>docker run</code> command.</p>
<p>If your host machine does not support <a href="https://en.wikipedia.org/wiki/Advanced_Vector_Extensions">AVX</a> and you experience issues running the <code>machinebox/facebox</code> image there is an alternative image without AVX support available at <code>machinebox/facebox_noavx</code>(<em>HINT</em>: This image is currently not supported by machinebox and should only be used if necessary)</p>
<h2>Configuration</h2>
<p>To enable this platform in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
image_processing:
  - platform: facebox
    ip_address: 192.168.0.1
    port: 8080
    source:
      - entity_id: camera.local_file
        name: my_custom_name
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='ip_address' href='#ip_address'></a> ip_address</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The IP address of your machine hosting Facebox.</p>
</span></p></dd><dt><a class='title-link' name='port' href='#port'></a> port</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The port which Facebox is exposed on.</p>
</span></p></dd><dt><a class='title-link' name='username' href='#username'></a> username</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The Facebox username if you have set one.</p>
</span></p></dd><dt><a class='title-link' name='password' href='#password'></a> password</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The Facebox password if you have set one.</p>
</span></p></dd><dt><a class='title-link' name='source' href='#source'></a> source</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>The list of image sources.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>A camera entity id to get picture from.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>This parameter allows you to override the name of your <code>image_processing</code> entity.</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Automations</h2>
<p>Use the <code>image_processing.detect_face</code> events to trigger automations, and breakout the <code>trigger.event.data</code> using a <a href="/docs/automation/templating/">data_template</a>. The following example automation sends a notification when Ringo Star is recognized:</p>
<pre><code class="language-yaml">- id: '12345'
  alias: Ringo Starr recognised
  trigger:
    platform: event
    event_type: image_processing.detect_face
    event_data:
      name: 'Ringo_Starr'
  action:
    service: notify.platform
    data_template:
      message: Ringo_Starr recognised with probability {{ trigger.event.data.confidence }}
      title: Door-cam notification
</code></pre>
<h2>Service <code>facebox.teach_face</code></h2>
<p>The service <code>facebox.teach_face</code> can be used to teach Facebox faces.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID of Facebox entity.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>no</td>
<td>The name to associate with a face.</td>
</tr>
<tr>
<td><code>file_path</code></td>
<td>no</td>
<td>The path to the image file.</td>
</tr>
</tbody>
</table>
<p>A valid service data example:</p>
<pre><code class="language-yaml">{
  &quot;entity_id&quot;: &quot;image_processing.facebox_local_file&quot;,
  &quot;name&quot;: &quot;superman&quot;,
  &quot;file_path&quot;: &quot;/images/superman_1.jpeg&quot;
}
</code></pre>
<p>You can use an automation to receive a notification when you train a face:</p>
<pre><code class="language-yaml">- id: '1533703568569'
  alias: Face taught
  trigger:
  - event_data:
      service: facebox.teach_face
    event_type: call_service
    platform: event
  condition: []
  action:
  - service: notify.pushbullet
    data_template:
      message: '{{ trigger.event.data.service_data.name }} taught
      with file {{ trigger.event.data.service_data.file_path }}'
      title: Face taught notification
</code></pre>
<p>Any errors on teaching will be reported in the logs. If you enable <a href="/integrations/system_log/">system_log</a> events:</p>
<pre><code class="language-yaml">system_log:
  fire_event: true
</code></pre>
<p>you can create an automation to receive notifications on Facebox errors:</p>
<pre><code class="language-yaml">- id: '1533703568577'
  alias: Facebox error
  trigger:
    platform: event
    event_type: system_log_event
  condition:
    condition: template
    value_template: '{{ &quot;facebox&quot; in trigger.event.data.message }}'
  action:
  - service: notify.pushbullet
    data_template:
      message: '{{ trigger.event.data.message }}'
      title: Facebox error
</code></pre>
:ET