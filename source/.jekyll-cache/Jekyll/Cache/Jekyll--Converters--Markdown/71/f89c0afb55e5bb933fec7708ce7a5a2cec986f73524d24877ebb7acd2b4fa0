I"Ts<p>Use Telegram on your mobile or desktop device to send and receive messages or commands to/from your Home Assistant.</p>
<p>This integration creates notification services to send, or edit previously sent, messages from a <a href="https://core.telegram.org/bots">Telegram Bot account</a> configured either with the <a href="/integrations/telegram_polling">polling</a> platform or with the <a href="/integrations/telegram_webhooks">webhooks</a> one, and trigger events when receiving messages.</p>
<p>If you don’t need to receive messages, you can use the <a href="/integrations/telegram_broadcast">broadcast</a> platform instead.</p>
<h2>Notification services</h2>
<p>Available services: <code>send_message</code>, <code>send_photo</code>, <code>send_document</code>, <code>send_location</code>, <code>send_sticker</code>, <code>edit_message</code>, <code>edit_replymarkup</code>, <code>edit_caption</code>, <code>answer_callback_query</code>, <code>delete_message</code> and <code>leave_chat</code>.</p>
<h3>Service <code>telegram_bot.send_message</code></h3>
<p>Send a notification.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message</code></td>
<td>no</td>
<td>Message body of the notification.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>yes</td>
<td>Optional title for your notification. Will be composed as ‘%title\n%message’.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>yes</td>
<td>An array of pre-authorized chat_ids or user_ids to send the notification to. Defaults to the first allowed chat_id.</td>
</tr>
<tr>
<td><code>parse_mode</code></td>
<td>yes</td>
<td>Parser for the message text: <code>html</code> or <code>markdown</code>.</td>
</tr>
<tr>
<td><code>disable_notification</code></td>
<td>yes</td>
<td>True/false for send the message silently. iOS users and web users will not receive a notification, Android users will receive a notification with no sound. Defaults to False.</td>
</tr>
<tr>
<td><code>disable_web_page_preview</code></td>
<td>yes</td>
<td>True/false for disable link previews for links in the message.</td>
</tr>
<tr>
<td><code>keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom keyboard. <code>[]</code> to reset to no custom keyboard. Example: <code>[&quot;/command1, /command2&quot;, &quot;/command3&quot;]</code></td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.send_photo</code> and <code>telegram_bot.send_sticker</code></h3>
<p>Send a photo.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>no</td>
<td>Remote path to an image.</td>
</tr>
<tr>
<td><code>file</code></td>
<td>no</td>
<td>Local path to an image.</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>yes</td>
<td>The title of the image.</td>
</tr>
<tr>
<td><code>username</code></td>
<td>yes</td>
<td>Username for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>password</code></td>
<td>yes</td>
<td>Password for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>authentication</code></td>
<td>yes</td>
<td>Define which authentication method to use. Set to <code>digest</code> to use HTTP digest authentication. Defaults to <code>basic</code>.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>yes</td>
<td>An array of pre-authorized chat_ids or user_ids to send the notification to. Defaults to the first allowed chat_id.</td>
</tr>
<tr>
<td><code>disable_notification</code></td>
<td>yes</td>
<td>True/false for send the message silently. iOS users and web users will not receive a notification, Android users will receive a notification with no sound. Defaults to False.</td>
</tr>
<tr>
<td><code>verify_ssl</code></td>
<td>yes</td>
<td>True/false for checking the SSL certificate of the server for HTTPS URLs. Defaults to True.</td>
</tr>
<tr>
<td><code>keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom keyboard. <code>[]</code> to reset to no custom keyboard. Example: <code>[&quot;/command1, /command2&quot;, &quot;/command3&quot;]</code></td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.send_video</code></h3>
<p>Send a video.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>no</td>
<td>Remote path to a video.</td>
</tr>
<tr>
<td><code>file</code></td>
<td>no</td>
<td>Local path to a video.</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>yes</td>
<td>The title of the video.</td>
</tr>
<tr>
<td><code>username</code></td>
<td>yes</td>
<td>Username for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>password</code></td>
<td>yes</td>
<td>Password for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>authentication</code></td>
<td>yes</td>
<td>Define which authentication method to use. Set to <code>digest</code> to use HTTP digest authentication. Defaults to <code>basic</code>.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>yes</td>
<td>An array of pre-authorized chat_ids or user_ids to send the notification to. Defaults to the first allowed chat_id.</td>
</tr>
<tr>
<td><code>disable_notification</code></td>
<td>yes</td>
<td>True/false to send the message silently. iOS users and web users will not receive a notification. Android users will receive a notification with no sound. Defaults to False.</td>
</tr>
<tr>
<td><code>verify_ssl</code></td>
<td>yes</td>
<td>True/false for checking the SSL certificate of the server for HTTPS URLs. Defaults to True.</td>
</tr>
<tr>
<td><code>keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom keyboard. <code>[]</code> to reset to no custom keyboard. Example: <code>[&quot;/command1, /command2&quot;, &quot;/command3&quot;]</code></td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.send_document</code></h3>
<p>Send a document.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>no</td>
<td>Remote path to a document.</td>
</tr>
<tr>
<td><code>file</code></td>
<td>no</td>
<td>Local path to a document.</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>yes</td>
<td>The title of the document.</td>
</tr>
<tr>
<td><code>username</code></td>
<td>yes</td>
<td>Username for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>password</code></td>
<td>yes</td>
<td>Password for a URL which requires HTTP basic authentication.</td>
</tr>
<tr>
<td><code>authentication</code></td>
<td>yes</td>
<td>Define which authentication method to use. Set to <code>digest</code> to use HTTP digest authentication. Defaults to <code>basic</code>.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>yes</td>
<td>An array of pre-authorized chat_ids or user_ids to send the notification to. Defaults to the first allowed chat_id.</td>
</tr>
<tr>
<td><code>disable_notification</code></td>
<td>yes</td>
<td>True/false for send the message silently. iOS users and web users will not receive a notification, Android users will receive a notification with no sound. Defaults to False.</td>
</tr>
<tr>
<td><code>verify_ssl</code></td>
<td>yes</td>
<td>True/false for checking the SSL certificate of the server for HTTPS URLs. Defaults to True.</td>
</tr>
<tr>
<td><code>keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom keyboard. <code>[]</code> to reset to no custom keyboard. Example: <code>[&quot;/command1, /command2&quot;, &quot;/command3&quot;]</code></td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.send_location</code></h3>
<p>Send a location.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>latitude</code></td>
<td>no</td>
<td>The latitude to send.</td>
</tr>
<tr>
<td><code>longitude</code></td>
<td>no</td>
<td>The longitude to send.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>yes</td>
<td>An array of pre-authorized chat_ids or user_ids to send the notification to. Defaults to the first allowed <code>chat_id</code>.</td>
</tr>
<tr>
<td><code>disable_notification</code></td>
<td>yes</td>
<td>True/false for send the message silently. iOS users and web users will not receive a notification, Android users will receive a notification with no sound. Defaults to False.</td>
</tr>
<tr>
<td><code>keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom keyboard. <code>[]</code> to reset to no custom keyboard. Example: <code>[&quot;/command1, /command2&quot;, &quot;/command3&quot;]</code></td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.edit_message</code></h3>
<p>Edit a previously sent message in a conversation.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message_id</code></td>
<td>no</td>
<td>Id of the message to edit. When answering a callback from a pressed button, the id of the origin message is in: <code>{{ trigger.event.data.message.message_id }}</code>. You can use <code>&quot;last&quot;</code> to refer to the last message sent to <code>chat_id</code>.</td>
</tr>
<tr>
<td><code>chat_id</code></td>
<td>no</td>
<td>The chat_id where to edit the message.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>no</td>
<td>Message body of the notification.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>yes</td>
<td>Optional title for your notification. Will be composed as ‘%title\n%message’.</td>
</tr>
<tr>
<td><code>parse_mode</code></td>
<td>yes</td>
<td>Parser for the message text: <code>html</code> or <code>markdown</code>.</td>
</tr>
<tr>
<td><code>disable_web_page_preview</code></td>
<td>yes</td>
<td>True/false for disable link previews for links in the message.</td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.edit_caption</code></h3>
<p>Edit the caption of a previously sent message.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message_id</code></td>
<td>no</td>
<td>Id of the message to edit. When answering a callback from a pressed button, the id of the origin message is in: <code>{{ trigger.event.data.message.message_id }}</code>. You can use <code>&quot;last&quot;</code> to refer to the last message sent to <code>chat_id</code>.</td>
</tr>
<tr>
<td><code>chat_id</code></td>
<td>no</td>
<td>The chat_id where to edit the caption.</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>no</td>
<td>Message body of the notification.</td>
</tr>
<tr>
<td><code>disable_web_page_preview</code></td>
<td>yes</td>
<td>True/false for disable link previews for links in the message.</td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.edit_replymarkup</code></h3>
<p>Edit the inline keyboard of a previously sent message.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message_id</code></td>
<td>no</td>
<td>Id of the message to edit. When answering a callback from a pressed button, the id of the origin message is in: <code>{{ trigger.event.data.message.message_id }}</code>. You can use <code>&quot;last&quot;</code> to refer to the last message sent to <code>chat_id</code>.</td>
</tr>
<tr>
<td><code>chat_id</code></td>
<td>no</td>
<td>The chat_id where to edit the reply_markup.</td>
</tr>
<tr>
<td><code>disable_web_page_preview</code></td>
<td>yes</td>
<td>True/false for disable link previews for links in the message.</td>
</tr>
<tr>
<td><code>inline_keyboard</code></td>
<td>yes</td>
<td>List of rows of commands, comma-separated, to make a custom inline keyboard with buttons with associated callback data. Example: <code>[&quot;/button1, /button2&quot;, &quot;/button3&quot;]</code> or <code>[[[&quot;Text btn1&quot;, &quot;/button1&quot;], [&quot;Text btn2&quot;, &quot;/button2&quot;]], [[&quot;Text btn3&quot;, &quot;/button3&quot;]]]</code></td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.answer_callback_query</code></h3>
<p>Respond to a callback query originated by clicking on an online keyboard button. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message</code></td>
<td>no</td>
<td>Unformatted text message body of the notification.</td>
</tr>
<tr>
<td><code>callback_query_id</code></td>
<td>no</td>
<td>Unique id of the callback response. In the <code>telegram_callback</code> event data: <code>{{ trigger.event.data.id }}</code></td>
</tr>
<tr>
<td><code>show_alert</code></td>
<td>yes</td>
<td>True/false for show a permanent notification. Defaults to False.</td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.delete_message</code></h3>
<p>Delete a previously sent message in a conversation.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>message_id</code></td>
<td>no</td>
<td>Id of the message to delete. When answering a callback from a pressed button, the id of the origin message is in: <code>{{ trigger.event.data.message.message_id }}</code>. You can use <code>&quot;last&quot;</code> to refer to the last message sent to <code>chat_id</code>.</td>
</tr>
<tr>
<td><code>chat_id</code></td>
<td>no</td>
<td>The chat_id where to delete the message.</td>
</tr>
</tbody>
</table>
<h3>Service <code>telegram_bot.leave_chat</code></h3>
<p>Remove the bot from the chat group where it was added.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>chat_id</code></td>
<td>no</td>
<td>The chat_id from where to remove the bot.</td>
</tr>
</tbody>
</table>
<h2><code>telegram</code> notification platform</h2>
<p>The <a href="/integrations/telegram"><code>telegram</code> notification platform</a> requires the <code>telegram_bot</code> integration to work with, and it’s designed to generate a customized shortcut (<code>notify.USERNAME</code>) to send notifications (messages, photos, documents and locations) to a particular <code>chat_id</code> with the old syntax, allowing backward compatibility.</p>
<p>The required YAML configuration now reduces to:</p>
<pre><code class="language-yaml">notify:
  - name: NOTIFIER_NAME
    platform: telegram
    chat_id: USER_CHAT_ID
</code></pre>
<h2>Event triggering</h2>
<p>A command looks like <code>/thecommand</code> or <code>/othercommand with some args</code>.</p>
<p>When received by Home Assistant it will fire a <code>telegram_command</code> event on the event bus with the following <code>event_data</code>:</p>
<pre><code class="language-yaml">command: &quot;/thecommand&quot;
args: &quot;&lt;any other text following the command&gt;&quot;
from_first: &quot;&lt;first name of the sender&gt;&quot;
from_last: &quot;&lt;last name of the sender&gt;&quot;
user_id: &quot;&lt;id of the sender&gt;&quot;
chat_id: &quot;&lt;origin chat id&gt;&quot;
chat: &quot;&lt;chat info&gt;&quot;
</code></pre>
<p>Any other message not starting with <code>/</code> will be processed as simple text, firing a <code>telegram_text</code> event on the event bus with the following <code>event_data</code>:</p>
<pre><code class="language-yaml">text: &quot;some text received&quot;
from_first: &quot;&lt;first name of the sender&gt;&quot;
from_last: &quot;&lt;last name of the sender&gt;&quot;
user_id: &quot;&lt;id of the sender&gt;&quot;
chat_id: &quot;&lt;origin chat id&gt;&quot;
chat: &quot;&lt;chat info&gt;&quot;
</code></pre>
<p>If the message is sent from a <a href="https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating">press from an inline button</a>, for example, a callback query is received, and Home Assistant will fire a <code>telegram_callback</code> event with:</p>
<pre><code class="language-yaml">data: &quot;&lt;data associated to action callback&gt;&quot;
message: &lt;message origin of the action callback&gt;
from_first: &quot;&lt;first name of the sender&gt;&quot;
from_last: &quot;&lt;last name of the sender&gt;&quot;
user_id: &quot;&lt;id of the sender&gt;&quot;
id: &quot;&lt;unique id of the callback&gt;&quot;
chat_instance: &quot;&lt;chat instance&gt;&quot;
chat_id: &quot;&lt;origin chat id&gt;&quot;
</code></pre>
<h3>Configuration samples</h3>
<p>Simple ping pong example.</p>
<pre><code class="language-yaml">alias: 'Telegram bot that reply pong to ping'
trigger:
  platform: event
  event_type: telegram_command
  event_data:
    command: '/ping'
action:
  - service: notify.notify
    data:
      message: 'pong'
</code></pre>
<p>An example that shows keyboard interaction with <code>notify.telegram</code></p>
<pre><code class="language-yaml">trigger:
  platform: event
  event_type: telegram_command
  event_data:
    command: '/start'
action:
  - service: notify.telegram
    data:
      message: 'commands'
      data:
        keyboard:
          - '/ping, /alarm'
          - '/siren'
</code></pre>
<p>and an automation to trigger a related command “/siren”.</p>
<pre><code class="language-yaml">trigger:
  platform: event
  event_type: telegram_command
  event_data:
    command: '/siren'
action:
  - service: homeassistant.turn_on
    entity_id: switch.vision_zm1601eu5_battery_operated_siren_switch_9_0
  - delay:
      seconds: 10
  - service: homeassistant.turn_off
    entity_id: switch.vision_zm1601eu5_battery_operated_siren_switch_9_0
</code></pre>
<p>An example to show the use of event_data in action:</p>
<pre><code class="language-yaml">- alias: 'Kitchen Telegram Speak'
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/speak'
  action:
    - service: notify.kitchen_echo
      data_template:
        message: &gt;
          Message from {{ trigger.event.data[&quot;from_first&quot;] }}. {% for state in trigger.event.data[&quot;args&quot;] %} {{ state }} {% endfor %}
</code></pre>
<h3>Sample automations with callback queries and inline keyboards</h3>
<p>A quick example to show some of the callback capabilities of inline keyboards with a dumb automation consisting in a simple repeater of normal text that presents an inline keyboard with 3 buttons: ‘EDIT’, ‘NO’ and ‘REMOVE BUTTON’:</p>
<ul>
<li>Pressing ‘EDIT’ changes the sent message.</li>
<li>Pressing ‘NO’ only shows a brief notification (answering the callback query).</li>
<li>Pressing ‘REMOVE BUTTON’ changes the inline keyboard removing that button.</li>
</ul>
<p>Text repeater:</p>
<pre><code class="language-yaml">- alias: 'Telegram bot that repeats text'
  trigger:
    platform: event
    event_type: telegram_text
  action:
    - service: telegram_bot.send_message
      data_template:
        title: '*Dumb automation*'
        target: '{{ trigger.event.data.user_id }}'
        message: 'You said: {{ trigger.event.data.text }}'
        disable_notification: true
        inline_keyboard:
          - &quot;Edit message:/edit_msg, Don't:/do_nothing&quot;
          - &quot;Remove this button:/remove button&quot;
</code></pre>
<p>Message editor:</p>
<pre><code class="language-yaml">- alias: 'Telegram bot that edits the last sent message'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      command: '/edit_msg'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Editing the message!'
        show_alert: true
    - service: telegram_bot.edit_message
      data_template:
        message_id: '{{ trigger.event.data.message.message_id }}'
        chat_id: '{{ trigger.event.data.chat_id }}'
        title: '*Message edit*'
        inline_keyboard:
          - &quot;Edit message:/edit_msg, Don't:/do_nothing&quot;
          - &quot;Remove this button:/remove button&quot;
        message: &gt;
          Callback received from {{ trigger.event.data.from_first }}.
          Message id: {{ trigger.event.data.message.message_id }}.
          Data: {{ trigger.event.data.data }}
</code></pre>
<p>Keyboard editor:</p>
<pre><code class="language-yaml">- alias: 'Telegram bot that edits the keyboard'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      command: '/remove button'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'Callback received for editing the inline keyboard!'
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: 'last'
        chat_id: '{{ trigger.event.data.chat_id }}'
        inline_keyboard:
          - &quot;Edit message:/edit_msg, Don't:/do_nothing&quot;
</code></pre>
<p>Only acknowledges the ‘NO’ answer:</p>
<pre><code class="language-yaml">- alias: 'Telegram bot that simply acknowledges'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      command: '/do_nothing'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'OK, you said no!'
</code></pre>
<p>Telegram callbacks also support arguments and commands the same way as normal messages.</p>
<pre><code class="language-yaml">- alias: 'Telegram bot repeats arguments on callback query'
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      command: '/repeat'
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        show_alert: true
        callback_query_id: '{{ trigger.event.data.id }}'
        message: 'I repeat: {{trigger.event.data[&quot;args&quot;]}}'
</code></pre>
<p>In this case, having a callback with <code>/repeat 1 2 3</code> with pop a notification saying <code>I repeat: [1, 2, 3]</code></p>
<p>For a more complex usage of the <code>telegram_bot</code> capabilities, using <a href="/docs/ecosystem/appdaemon/tutorial/">AppDaemon</a> is advised.</p>
<p>This is how the previous 4 automations would be through a simple AppDaemon app:</p>
<pre><code class="language-python">import appdaemon.plugins.hass.hassapi as hass


class TelegramBotEventListener(hass.Hass):
    &quot;&quot;&quot;Event listener for Telegram bot events.&quot;&quot;&quot;

    def initialize(self):
        &quot;&quot;&quot;Listen to Telegram Bot events of interest.&quot;&quot;&quot;
        self.listen_event(self.receive_telegram_text, &quot;telegram_text&quot;)
        self.listen_event(self.receive_telegram_callback, &quot;telegram_callback&quot;)

    def receive_telegram_text(self, event_id, payload_event, *args):
        &quot;&quot;&quot;Text repeater.&quot;&quot;&quot;
        assert event_id == &quot;telegram_text&quot;
        user_id = payload_event[&quot;user_id&quot;]
        msg = &quot;You said: ``` %s ```&quot; % payload_event[&quot;text&quot;]
        keyboard = [
            [(&quot;Edit message&quot;, &quot;/edit_msg&quot;), (&quot;Don't&quot;, &quot;/do_nothing&quot;)],
            [(&quot;Remove this button&quot;, &quot;/remove button&quot;)],
        ]
        self.call_service(
            &quot;telegram_bot/send_message&quot;,
            title=&quot;*Dumb automation*&quot;,
            target=user_id,
            message=msg,
            disable_notification=True,
            inline_keyboard=keyboard,
        )

    def receive_telegram_callback(self, event_id, payload_event, *args):
        &quot;&quot;&quot;Event listener for Telegram callback queries.&quot;&quot;&quot;
        assert event_id == &quot;telegram_callback&quot;
        data_callback = payload_event[&quot;data&quot;]
        callback_id = payload_event[&quot;id&quot;]
        chat_id = payload_event[&quot;chat_id&quot;]
        # keyboard = [&quot;Edit message:/edit_msg, Don't:/do_nothing&quot;,
        #             &quot;Remove this button:/remove button&quot;]
        keyboard = [
            [(&quot;Edit message&quot;, &quot;/edit_msg&quot;), (&quot;Don't&quot;, &quot;/do_nothing&quot;)],
            [(&quot;Remove this button&quot;, &quot;/remove button&quot;)],
        ]

        if data_callback == &quot;/edit_msg&quot;:  # Message editor:
            # Answer callback query
            self.call_service(
                &quot;telegram_bot/answer_callback_query&quot;,
                message=&quot;Editing the message!&quot;,
                callback_query_id=callback_id,
                show_alert=True,
            )

            # Edit the message origin of the callback query
            msg_id = payload_event[&quot;message&quot;][&quot;message_id&quot;]
            user = payload_event[&quot;from_first&quot;]
            title = &quot;*Message edit*&quot;
            msg = &quot;Callback received from %s. Message id: %s. Data: ``` %s ```&quot;
            self.call_service(
                &quot;telegram_bot/edit_message&quot;,
                chat_id=chat_id,
                message_id=msg_id,
                title=title,
                message=msg % (user, msg_id, data_callback),
                inline_keyboard=keyboard,
            )

        elif data_callback == &quot;/remove button&quot;:  # Keyboard editor:
            # Answer callback query
            self.call_service(
                &quot;telegram_bot/answer_callback_query&quot;,
                message=&quot;Callback received for editing the &quot; &quot;inline keyboard!&quot;,
                callback_query_id=callback_id,
            )

            # Edit the keyboard
            new_keyboard = keyboard[:1]
            self.call_service(
                &quot;telegram_bot/edit_replymarkup&quot;,
                chat_id=chat_id,
                message_id=&quot;last&quot;,
                inline_keyboard=new_keyboard,
            )

        elif data_callback == &quot;/do_nothing&quot;:  # Only Answer to callback query
            self.call_service(
                &quot;telegram_bot/answer_callback_query&quot;,
                message=&quot;OK, you said no!&quot;,
                callback_query_id=callback_id,
            )
</code></pre>
:ET