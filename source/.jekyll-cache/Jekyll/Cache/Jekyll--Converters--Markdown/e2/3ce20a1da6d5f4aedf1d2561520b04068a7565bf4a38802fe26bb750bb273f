I"ò<p>This integration can expose regular REST commands as services. Services can be called from a <a href="/integrations/script/">script</a> or in <a href="/getting-started/automation/">automation</a>.</p>
<p>To use this component, add the following lines to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
rest_command:
  example_request:
    url: 'http://example.com/'
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='service_name' href='#service_name'></a> service_name</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name used to expose the service. E.g., in the above example, it would be â€˜rest_command.example_requestâ€™.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='url' href='#url'></a> url</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>The URL (supports template) for sending request.</p>
</span></p></dd><dt><a class='title-link' name='method' href='#method'></a> method</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>HTTP method to use (get, patch, post, put, or delete).</p>
</span></p><p class='default'>
Default value: <p>get</p>
</p></dd><dt><a class='title-link' name='headers' href='#headers'></a> headers</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The headers for the requests.</p>
</span></p></dd><dt><a class='title-link' name='payload' href='#payload'></a> payload</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>A string/template to send with request.</p>
</span></p></dd><dt><a class='title-link' name='username' href='#username'></a> username</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The username for HTTP authentication.</p>
</span></p></dd><dt><a class='title-link' name='password' href='#password'></a> password</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The password for HTTP authentication.</p>
</span></p></dd><dt><a class='title-link' name='timeout' href='#timeout'></a> timeout</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Timeout for requests in seconds.</p>
</span></p><p class='default'>
Default value: <p>10</p>
</p></dd><dt><a class='title-link' name='content_type' href='#content_type'></a> content_type</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Content type for the request.</p>
</span></p></dd><dt><a class='title-link' name='verify_ssl' href='#verify_ssl'></a> verify_ssl</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Verify the SSL certificate of the endpoint.</p>
</span></p><p class='default'>
Default value: <p>true</p>
</p></dd></dl></dd></dl>
</div>
<h2>Examples</h2>
<p>The commands can be dynamic, using templates to insert values of other entities. Service call support variables for doing things with templates.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
rest_command:
  my_request:
    url: https://slack.com/api/users.profile.set
    method: POST
    headers:
      authorization: !secret rest_headers_secret
      accept: 'application/json, text/html'
      user-agent: 'Mozilla/5.0 {{ useragent }}'
    payload: '{&quot;profile&quot;:{&quot;status_text&quot;: &quot;{{ status }}&quot;,&quot;status_emoji&quot;: &quot;{{ emoji }}&quot;}}'
    content_type:  'application/json; charset=utf-8'
    verify_ssl: true
</code></pre>
<p>In this example entry, you can see some simple <a href="/docs/configuration/templating/">templates</a> in use for dynamic parameters.</p>
<p>Call the new service from <a href="/docs/tools/dev-tools/">developer tools</a> in the sidebar with some <code>data</code> like:</p>
<pre><code class="language-json">{
  &quot;status&quot;:&quot;My Status Goes Here&quot;,
  &quot;emoji&quot;:&quot;:plex:&quot;
}
</code></pre>
<p>Or in an example <code>automation</code></p>
<pre><code class="language-yaml">automation:
- alias: 'Arrive at Work'
  trigger:
    platform: zone
    entity_id: device_tracker.my_device
    zone: zone.work
    event: enter
  action:
    - service: rest_command.my_request
      data:
        status: &quot;At Work&quot;
        emoji: &quot;:calendar:&quot;
</code></pre>
:ET