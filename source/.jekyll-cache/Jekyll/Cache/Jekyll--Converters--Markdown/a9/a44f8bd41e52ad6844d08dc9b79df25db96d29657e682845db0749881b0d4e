I"Q
<div class='note'>
<p>This example requires you to have the <a href="/integrations/mqtt/">MQTT integration</a> up and running.</p>
</div>
<p>This is a simple hello world example to show the basics of using MQTT in a custom integration. To use this example, create the file <code>&lt;config dir&gt;/custom_components/hello_mqtt.py</code> and copy the below example code.</p>
<p>This example follows a topic on MQTT and updates the state of an entity to the last message received on that topic. It will also register a service ‘set_state’ that will publish a message to the MQTT topic that we’re listening to.</p>
<pre><code class="language-python">import homeassistant.loader as loader

# The domain of your component. Should be equal to the name of your component.
DOMAIN = &quot;hello_mqtt&quot;

# List of integration names (string) your integration depends upon.
DEPENDENCIES = [&quot;mqtt&quot;]


CONF_TOPIC = &quot;topic&quot;
DEFAULT_TOPIC = &quot;home-assistant/hello_mqtt&quot;


def setup(hass, config):
    &quot;&quot;&quot;Set up the Hello MQTT component.&quot;&quot;&quot;
    mqtt = hass.components.mqtt
    topic = config[DOMAIN].get(CONF_TOPIC, DEFAULT_TOPIC)
    entity_id = &quot;hello_mqtt.last_message&quot;

    # Listener to be called when we receive a message.
    # The msg parameter is a Message object with the following members:
    # - topic, payload, qos, retain
    def message_received(msg):
        &quot;&quot;&quot;Handle new MQTT messages.&quot;&quot;&quot;
        hass.states.set(entity_id, msg.payload)

    # Subscribe our listener to a topic.
    mqtt.subscribe(topic, message_received)

    # Set the initial state.
    hass.states.set(entity_id, &quot;No messages&quot;)

    # Service to publish a message on MQTT.
    def set_state_service(call):
        &quot;&quot;&quot;Service to send a message.&quot;&quot;&quot;
        mqtt.publish(topic, call.data.get(&quot;new_state&quot;))

    # Register our service with Home Assistant.
    hass.services.register(DOMAIN, &quot;set_state&quot;, set_state_service)

    # Return boolean to indicate that initialization was successfully.
    return True
</code></pre>
<p>Load the integration by adding the following to your <code>configuration.yaml</code>. When your integration is loaded, a new entity should popup and there should be a new service available to call.</p>
<pre><code class="language-yaml"># configuration.yaml entry
hello_mqtt:
  topic: some_mqtt/topic/here
</code></pre>
<p>You can call the service with example payload:</p>
<pre><code class="language-json">{
  &quot;new_state&quot;: &quot;some new state&quot;
}
</code></pre>
:ET