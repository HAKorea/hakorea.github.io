I"»2<p>There is currently support for the following device types within Home Assistant:</p>
<ul>
<li><a href="#binary-sensor">Binary Sensor</a></li>
<li><a href="#sensor">Sensor</a></li>
<li><a href="#switch">Switch</a></li>
</ul>
<h2>Binary Sensor</h2>
<p>The <code>arest</code> binary sensor platform allows you to get all data from your devices (like Arduinos with an ethernet/wifi connection, the ESP8266, and the Raspberry Pi) running the <a href="https://arest.io/">aREST</a> RESTful framework.</p>
<p>To use your aREST binary sensor in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: arest
    resource: http://IP_ADDRESS
    pin: 8
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='resource' href='#resource'></a> resource</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>IP address and schema of the device that is exposing an aREST API, e.g., <code>http://192.168.1.10</code>.</p>
</span></p></dd><dt><a class='title-link' name='pin' href='#pin'></a> pin</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Required)</span><span class='description'><p>Number of the pin to monitor.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Let you overwrite the name of the device. By default <em>name</em> from the device is used.</p>
</span></p></dd></dl>
</div>
<p>Accessing the URL <code>http://IP_ADDRESS/digital/PIN_NUMBER</code> should give you the state of the pin inside a JSON response as <code>return_value</code>.</p>
<pre><code class="language-bash">$ curl -X GET http://192.168.0.5/digital/9
{&quot;return_value&quot;: 0, &quot;id&quot;: &quot;office1&quot;, &quot;name&quot;: &quot;Office&quot;, &quot;connected&quot;: true}
</code></pre>
<p>An example for Pin 9 inspired by the command above could look like this:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: arest
    resource: http://192.168.0.5/digital/9
    pin: 9
    name: Office
</code></pre>
<div class='note'>
This sensor is not suitable for fast state changes because there is a high possibility that the change took place between two update cycle.
</div>
<h2>Sensor</h2>
<p>The <code>arest</code> sensor platform allows you to get all data from your devices (like Arduinos with a Ethernet/Wifi connection, the ESP8266, and the Raspberry Pi) running the <a href="https://arest.io/">aREST</a> RESTful framework.</p>
<p>To use your aREST enabled device in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: arest
    resource: https://IP_ADDRESS
    monitored_variables:
      temperature:
        name: temperature
    pins:
      A0:
        name: Pin 0 analog
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='resource' href='#resource'></a> resource</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>IP address and schema of the device that is exposing an aREST API, e.g., <code>https://192.168.1.10</code>.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Let you overwrite the name of the device.</p>
</span></p><p class='default'>
Default value: <p>aREST sensor</p>
</p></dd><dt><a class='title-link' name='pins' href='#pins'></a> pins</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>List of pins to monitor. Analog pins need a leading <strong>A</strong> for the pin number.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='pin' href='#pin'></a> pin</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>Pin number to use.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the variable you wish to monitor.</p>
</span></p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the unit of measurement of the sensor, if any.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract a value from the payload.</p>
</span></p></dd></dl></dd></dl></dd><dt><a class='title-link' name='monitored_variables' href='#monitored_variables'></a> monitored_variables</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>List of exposed variables.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='variable' href='#variable'></a> variable</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>Name of the variable to monitor.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name to use for the frontend.</p>
</span></p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the units of measurement of the sensor, if any.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract a value from the payload.</p>
</span></p></dd></dl></dd></dl></dd></dl>
</div>
<p>The variables in the <code>monitored_variables</code> array must be available in the response of the device. As a starting point you could use the one of the example sketches (eg.  <a href="https://raw.githubusercontent.com/marcoschwartz/aREST/master/examples/Ethernet/Ethernet.ino">Ethernet</a> for an Arduino with Ethernet shield). In those sketches are two variables (<code>temperature</code> and <code>humidity</code>) available which will act as endpoints.</p>
<p>Accessing one of the endpoints (eg. <code>http://192.168.1.10/temperature</code>) will give you the value inside a JSON response.</p>
<pre><code class="language-json">{&quot;temperature&quot;: 23, &quot;id&quot;: &quot;sensor01&quot;, &quot;name&quot;: &quot;livingroom&quot;, &quot;connected&quot;: true}
</code></pre>
<p>The root will give you a JSON response that contains all variables and their current values along with some device details.</p>
<pre><code class="language-json">{
   &quot;variables&quot; : {
      &quot;temperature&quot; : 23,
      &quot;humidity&quot; : 82
   },
   &quot;id&quot; : &quot;sensor01&quot;,
   &quot;name&quot; : &quot;livingroom&quot;,
   &quot;connected&quot; : true
}
</code></pre>
<p><code>return_value</code> contains the sensorâ€™s data in a JSON response for a given pin (eg. <code>http://192.168.1.10/analog/2/</code> or  <code>http://192.168.1.10/digital/7/</code>).</p>
<pre><code class="language-json">{&quot;return_value&quot;: 34, &quot;id&quot;: &quot;sensor02&quot;, &quot;name&quot;: &quot;livingroom&quot;, &quot;connected&quot;: true}
</code></pre>
<h2>Switch</h2>
<p>The <code>arest</code> switch platform allows you to toggle pins of your devices (like Arduino boards with an Ethernet/Wifi connection, ESP8266 based devices, and the Raspberry Pi) running the <a href="https://arest.io/">aREST</a> RESTful framework.</p>
<p>To use your aREST enabled device with pins in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: arest
    resource: http://IP_ADDRESS
    pins:
      11:
        name: Fan
      13:
        name: Switch
        invert: true
</code></pre>
<p>If you want to use custom functions, then add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: arest
    resource: http://IP_ADDRESS
    name: Office
    functions:
      function1:
        name: Light Desk
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='resource' href='#resource'></a> resource</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>IP address and schema of the device that is exposing an aREST API, e.g., <code>http://192.168.1.10</code> (no-trailing slash)</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Let you overwrite the name of the device. By default <em>name</em> from the device is used.</p>
</span></p></dd><dt><a class='title-link' name='pins' href='#pins'></a> pins</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An array with all used pins.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the pin to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='invert' href='#invert'></a> invert</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If the logic for on/off should be inverted.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd></dl></dd><dt><a class='title-link' name='functions' href='#functions'></a> functions</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Optional)</span><span class='description'><p>An array with all used functions.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name to use in the frontend.</p>
</span></p></dd></dl></dd></dl>
</div>
<p>You can still switch your pins with a web browser or a command line tool. Use the URL <code>http://192.168.1.10/digital/8/1</code> to set pin 8 to high/on, the JSON response will give you the feedback.</p>
<pre><code class="language-json">{&quot;message&quot;: &quot;Pin D8 set to 1&quot;, &quot;id&quot;: &quot;sensor02&quot;, &quot;name&quot;: &quot;livingroom&quot;, &quot;connected&quot;: true}
</code></pre>
:ET