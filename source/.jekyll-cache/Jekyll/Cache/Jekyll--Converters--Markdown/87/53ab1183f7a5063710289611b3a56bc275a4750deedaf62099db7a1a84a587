I"ê<p>The <code>configuration.yaml</code> file is a plain-text file, thus it is readable by anyone who has access to the file. The file contains passwords and API tokens which need to be redacted if you want to share your configuration. By using <code>!secret</code> you can remove any private information from your configuration files. This separation can also help you to keep easier track of your passwords and API keys, as they are all stored at one place and no longer spread across the <code>configuration.yaml</code> file or even multiple yaml files if you <a href="/docs/configuration/splitting_configuration/">split up your configuration</a>.</p>
<h3>Using secrets.yaml</h3>
<p>The workflow for moving private information to <code>secrets.yaml</code> is very similar to the <a href="/docs/configuration/splitting_configuration/">splitting of the configuration</a>. Create a <code>secrets.yaml</code> file in your Home Assistant <a href="/docs/configuration/">configuration directory</a>.</p>
<p>The entries for password and API keys in the <code>configuration.yaml</code> file usually looks like the example below.</p>
<pre><code class="language-yaml">homeassistant:
  auth_providers:
   - type: legacy_api_password
     api_password: YOUR_PASSWORD
</code></pre>
<p>Those entries need to be replaced with <code>!secret</code> and an identifier.</p>
<pre><code class="language-yaml">homeassistant:
  auth_providers:
   - type: legacy_api_password
     api_password: !secret http_password
</code></pre>
<p>The <code>secrets.yaml</code> file contains the corresponding password assigned to the identifier.</p>
<pre><code class="language-yaml">http_password: YOUR_PASSWORD
</code></pre>
<h3>Debugging secrets</h3>
<p>When you start splitting your configuration into multiple files, you might end up with configuration in sub folders. Secrets will be resolved in this order:</p>
<ul>
<li>A <code>secrets.yaml</code> located in the same folder as the YAML file referencing the secret,</li>
<li>next, parent folders will be searched for a <code>secrets.yaml</code> file with the secret, stopping at the folder with the main <code>configuration.yaml</code>,</li>
<li>lastly, <code>keyring</code> will be queried for the secret (more info below).</li>
</ul>
<p>To see where secrets are being loaded from, you can either add an option to your <code>secrets.yaml</code> file or use the <code>check_config</code> script.</p>
<p><em>Option 1</em>: Print where secrets are retrieved from to the Home Assistant log by adding the following to <code>secrets.yaml</code>:</p>
<pre><code class="language-yaml">logger: debug
</code></pre>
<p>This will not print the actual secretâ€™s value to the log.</p>
<p><em>Option 2</em>: To view where secrets are retrieved from and the contents of all <code>secrets.yaml</code> files used, you can use the <a href="/docs/tools/check_config/"><code>check_config</code> script</a> from the command line:</p>
<pre><code class="language-bash">$ hass --script check_config --secrets
</code></pre>
<p>This will print all your secrets.</p>
<h2>Alternatives to <code>secrets.yaml</code></h2>
<ul>
<li><a href="/docs/tools/keyring/">Using a keyring that is managed by your OS to store secrets</a></li>
<li><a href="/docs/tools/credstash/">Storing passwords securely in AWS</a></li>
</ul>
:ET