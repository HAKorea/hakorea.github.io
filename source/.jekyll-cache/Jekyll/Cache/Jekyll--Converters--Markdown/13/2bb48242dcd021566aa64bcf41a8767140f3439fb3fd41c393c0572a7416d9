I"Q:<p>The <code>template</code> platform supports sensors which get their values from other entities.</p>
<h2>Configuration</h2>
<p>The configuration of Template Sensors depends on what you want them to be. Adding the following to your <code>configuration.yaml</code> file will create two sensors, one for the current sun angle and one for the time of the next sunrise:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: template
    sensors:
      solar_angle:
        friendly_name: &quot;Sun angle&quot;
        unit_of_measurement: 'degrees'
        value_template: &quot;{{ state_attr('sun.sun', 'elevation') }}&quot;

      sunrise:
        value_template: &quot;{{ state_attr('sun.sun', 'next_rising') }}&quot;
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='sensors' href='#sensors'></a> sensors</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your sensors.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='friendly_name_template' href='#friendly_name_template'></a> friendly_name_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for the name to be used in the frontend (this overrides friendly_name).</p>
</span></p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of entity IDs so the sensor only reacts to state changes of these entities. This can be used if the automatic analysis fails to find all relevant entities.</p>
</span></p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the units of measurement of the sensor, if any. This will also influence the graphical presentation in the history visualization as a continuous value. Sensors with missing <code>unit_of_measurement</code> are showing as discrete values.</p>
</span></p><p class='default'>
Default value: <p>None</p>
</p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines a template to get the state of the sensor.</p>
</span></p></dd><dt><a class='title-link' name='icon_template' href='#icon_template'></a> icon_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for the icon of the sensor.</p>
</span></p></dd><dt><a class='title-link' name='entity_picture_template' href='#entity_picture_template'></a> entity_picture_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for the entity picture of the sensor.</p>
</span></p></dd><dt><a class='title-link' name='attribute_templates' href='#attribute_templates'></a> attribute_templates</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines templates for attributes of the sensor.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='attribute-template' href='#attribute-template'></a> attribute: template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>The attribute and corresponding template.</p>
</span></p></dd></dl></dd><dt><a class='title-link' name='availability_template' href='#availability_template'></a> availability_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the <code>available</code> state of the component. If the template returns <code>true</code>, the device is <code>available</code>. If the template returns any other value, the device will be <code>unavailable</code>. If <code>availability_template</code> is not configured, the component will always be <code>available</code>.</p>
</span></p><p class='default'>
Default value: <p>true</p>
</p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='device_class'><a href="/docs/configuration/customizing-devices/#device-class">device_class</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the class of the device, changing the device state and icon that is displayed on the UI (see below). It does not set the <code>unit_of_measurement</code>.</p>
</span></p><p class='default'>
Default value: <p>None</p>
</p></dd></dl></dd></dl>
</div>
<h2>Considerations</h2>
<h3>Startup</h3>
<p>If you are using the state of a platform that takes extra time to load, the Template Sensor may get an <code>unknown</code> state during startup. To avoid this (and the resulting error messages in your log file), you can use <code>is_state()</code> function in your template. For example, you would replace <code>{{ states.cover.source.state == 'open' }}</code> with this equivalent that returns <code>true</code>/<code>false</code> and never gives an <code>unknown</code> result:</p>
<p><code>{{ is_state('switch.source', 'on') }}</code></p>
<h3>Entity IDs</h3>
<p>The template engine will attempt to work out what entities should trigger an update of the sensor. This can fail, for example, if your template loops over the contents of a group. In this case, you can use <code>entity_id</code> to provide a list of entity IDs that will cause the sensor to update or you can run the service <code>homeassistant.update_entity</code> to update the sensor at will.</p>
<h2>Examples</h2>
<p>In this section, you find some real-life examples of how to use this sensor.</p>
<h3>Sun Angle</h3>
<p>This example shows the sun angle in the frontend.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      solar_angle:
        friendly_name: &quot;Sun Angle&quot;
        unit_of_measurement: '°'
        value_template: &quot;{{ '%+.1f'|format(state_attr('sun.sun', 'elevation')) }}&quot;
</code></pre>
<h3>Renaming Sensor Output</h3>
<p>If you don’t like the wording of a sensor output, then the Template Sensor can help too. Let’s rename the output of the <a href="/integrations/sun/">Sun component</a> as
a simple example:</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      sun_state:
        friendly_name: &quot;Sun State&quot;
        value_template: &gt;-
          {% if is_state('sun.sun', 'above_horizon') %}
            up
          {% else %}
            down
          {% endif %}
</code></pre>
<h3>Multiline Example With an <code>if</code> Test</h3>
<p>This example shows a multiple line template with an <code>if</code> test. It looks at a sensing switch and shows <code>on</code>/<code>off</code> in the frontend.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      kettle:
        friendly_name: &quot;Kettle&quot;
        value_template: &gt;-
          {% if is_state('switch.kettle', 'off') %}
            off
          {% elif state_attr('switch.kettle', 'kwh')|float &lt; 1000 %}
            standby
          {% elif is_state('switch.kettle', 'on') %}
            on
          {% else %}
            failed
          {% endif %}
</code></pre>
<h3>Change The Unit of Measurement</h3>
<p>With a Template Sensor, it’s easy to convert given values into others if the unit of measurement doesn’t fit your needs.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      transmission_down_speed_kbps:
        friendly_name: &quot;Transmission Down Speed&quot;
        unit_of_measurement: 'kB/s'
        value_template: &quot;{{ states('sensor.transmission_down_speed')|float * 1024 }}&quot;

      transmission_up_speed_kbps:
        friendly_name: &quot;Transmission Up Speed&quot;
        unit_of_measurement: 'kB/s'
        value_template: &quot;{{ states('sensor.transmission_up_speed')|float * 1024 }}&quot;
</code></pre>
<h3>Change The Icon</h3>
<p>This example shows how to change the icon based on the day/night cycle.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      day_night:
        friendly_name: &quot;Day/Night&quot;
        value_template: &gt;-
          {% if is_state('sun.sun', 'above_horizon') %}
            Day
          {% else %}
            Night
          {% endif %}
        icon_template: &gt;-
          {% if is_state('sun.sun', 'above_horizon') %}
            mdi:weather-sunny
          {% else %}
            mdi:weather-night
          {% endif %}
</code></pre>
<h3>Change The Entity Picture</h3>
<p>This example shows how to change the entity picture based on the day/night cycle.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      day_night:
        friendly_name: &quot;Day/Night&quot;
        value_template: &gt;-
          {% if is_state('sun.sun', 'above_horizon') %}
            Day
          {% else %}
            Night
          {% endif %}
        entity_picture_template: &gt;-
          {% if is_state('sun.sun', 'above_horizon') %}
            /local/daytime.png
          {% else %}
            /local/nighttime.png
          {% endif %}
</code></pre>
<h3>Change the Friendly Name Used in the Frontend</h3>
<p>This example shows how to change the <code>friendly_name</code> based on a state.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      net_power:
        friendly_name_template: &gt;-
          {% if states('sensor.power_consumption')|float &lt; 0 %}
            Power Consumption
          {% else %}
            Power Production
          {% endif %}
        value_template: &quot;{{ states('sensor.power_consumption') }}&quot;
        unit_of_measurement: 'kW'
</code></pre>
<h3>Add Custom Attributes</h3>
<p>This example shows how to add custom attributes.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      my_device:
        value_template: &gt;-
          {% if is_state('device_tracker.my_device_nmap','home') %}
            Home
          {% else %}
            {{ states('device_tracker.my_device_gps') }}
          {% endif %}
        attribute_templates:
          latitude: &gt;-
            {% if is_state('device_tracker.my_device_nmap','home') %}
              {{ state_attr('zone.home','latitude') }}
            {% else %}
              state_attr('device_tracker.my_device_gps','latitude')
            {% endif %}
          longitude: &gt;-
            {% if is_state('device_tracker.my_device_nmap','home') %}
              {{ state_attr('zone.home','longitude') }}
            {% else %}
              {{ state_attr('device_tracker.my_device_gps','longitude') }}
            {% endif %}
</code></pre>
<h3>Working without entities</h3>
<p>The <code>template</code> sensors are not limited to use attributes from other entities but can also work with <a href="/docs/configuration/templating/#home-assistant-template-extensions">Home Assistant’s template extensions</a>.</p>
<p>This template contains no entities that will trigger an update (as <code>now()</code> is a function), so we add an <code>entity_id:</code> line with an entity that will force an update - here we’re using a <a href="/integrations/time_date">date sensor</a> to get a daily update:</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      nonsmoker:
        value_template: &quot;{{ (( as_timestamp(now()) - as_timestamp(strptime('06.07.2018', '%d.%m.%Y')) ) / 86400 ) | round(2) }}&quot;
        entity_id: sensor.date
        friendly_name: 'Not smoking'
        unit_of_measurement: &quot;Days&quot;
</code></pre>
<p>In this case it is also possible to convert the entity-less template above into one that will be updated automatically:</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      nonsmoker:
        value_template: &quot;{{ (( as_timestamp(strptime(states('sensor.date'), '%Y-%m-%d')) - as_timestamp(strptime('06.07.2018', '%d.%m.%Y')) ) / 86400 ) | round(2) }}&quot;
        friendly_name: 'Not smoking'
        unit_of_measurement: &quot;Days&quot;
</code></pre>
<p>Useful entities to choose might be <code>sensor.date</code> which update once per day or <code>sensor.time</code>, which updates once per minute.<br />
Please note that the resulting template will be evaluated by Home Assistant state engine on every state change of these sensors, which in case of <code>sensor.time</code> happens every minute and might have a negative impact on performance.</p>
<p>An alternative to this is to create an interval-based automation that calls the service <code>homeassistant.update_entity</code> for the entities requiring updates. This modified example updates every 5 minutes:</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      nonsmoker:
        value_template: &quot;{{ (( as_timestamp(now()) - as_timestamp(strptime('06.07.2018', '%d.%m.%Y')) ) / 86400 ) | round(2) }}&quot;
        entity_id: []
        friendly_name: 'Not smoking'
        unit_of_measurement: &quot;Days&quot;

automation:
  - alias: 'nonsmoker_update'
    trigger:
      - platform: time_pattern
        minutes: '/5'
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.nonsmoker
</code></pre>
:ET