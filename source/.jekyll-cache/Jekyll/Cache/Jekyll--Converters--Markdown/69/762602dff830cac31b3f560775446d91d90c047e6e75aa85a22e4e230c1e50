I"ð<p>The <code>evohome</code> integration links Home Assistant with all <em>non-US</em> <a href="https://international.mytotalconnectcomfort.com/Account/Login">Honeywell Total Connect Comfort (TCC)</a> CH/DHW systems, such as:</p>
<ul>
<li>The Honeywell evohome CH/DHW system, and</li>
<li>The Honeywell Round Thermostat</li>
</ul>
<p>It does not support the home security functionality of TCC.</p>
<p>It uses v2 of the <a href="https://github.com/watchforstock/evohome-client">evohome-client</a> client library.</p>
<p>Honeywell removed support for higher-precision temperatures from the v2 API, and thus reported temperatures are rounded up to the nearest 0.5C.</p>
<h3>evohome</h3>
<p>evohome is a multi-zone system. Each zone is represented as a <strong>Climate</strong> device: it will expose the zoneâ€™s operating mode, temperature and setpoint.</p>
<p>The controller/location is also represented as a <strong>Climate</strong> device: it will expose the locationâ€™s operating mode (see below for details). Note that the controllerâ€™s current temperature is calculated as an average of all the Zones.</p>
<p>The DHW controller is represented as a <strong>WaterHeater</strong> device: It will report its current temperature (but not target temperature), and it can be turned on or off.</p>
<h3>Round Thermostat</h3>
<p>Although Round Thermostat is, strictly speaking, a Controller and a single zone, they are merged into a single <strong>Climate</strong> device.</p>
<h2>Configuration</h2>
<p>To set up this integration, add the following to your <strong>configuration.yaml</strong> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
evohome:
  username: YOUR_USERNAME
  password: YOUR_PASSWORD
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='username' href='#username'></a> username</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The username (email address) that has access to <a href="https://international.mytotalconnectcomfort.com/Account/Login">Honeywell TCC</a> web site.</p>
</span></p></dd><dt><a class='title-link' name='password' href='#password'></a> password</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The password corresponding to the above username.</p>
</span></p></dd><dt><a class='title-link' name='location_idx' href='#location_idx'></a> location_idx</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Used to select which location to use, if your login has access to more than one location. Multiple locations at one time are not supported.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='scan_interval' href='#scan_interval'></a> scan_interval</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>How often updates are retrieved from Honeywellâ€™s web servers. The minimum value is 60 seconds.</p>
</span></p><p class='default'>
Default value: <p>300</p>
</p></dd></dl>
</div>
<p>This is an IoT cloud-polling device, and the recommended <code>scan_interval</code> is 180 seconds. Testing has indicated that this is a safe interval that - by itself - shouldnâ€™t cause you to be rate-limited by Honeywell.</p>
<h2>Operating modes, and inheritance</h2>
<p>Zones support only three setpoint modes: <strong>FollowSchedule</strong>, <strong>TemporaryOverride</strong>, and <strong>PermanentOverride</strong>.</p>
<p>Mostly, the zone â€˜inheritsâ€™ its functional operating mode from the controller (the actual algorithm for this is a little complicated).</p>
<p>The evohome controller supports seven distinct system modes: <strong>Auto</strong>, <strong>AutoWithEco</strong>, <strong>Away</strong>, <strong>DayOff</strong>, <strong>HeatingOff</strong>, and <strong>Custom</strong>; <strong>AutoWithReset</strong> is a hidden mode that will revert all zones to <strong>FollowSchedule</strong> mode.</p>
<p>If the zone is in <strong>FollowSchedule</strong> mode, its <code>temperature</code> (target temperature) is a function of its scheduled temperature and its functional mode - for example, <strong>AutoWithEco</strong> is scheduled temperature less 3C.</p>
<p>If the controller is set to <strong>HeatingOff</strong> (target temperature to a minimum) or <strong>Away</strong> (target temperature to 12C), then the zones will inherit that mode regardless of their own setpoint mode.</p>
<p>If the zoneâ€™s temperature is changed, then it will be a <strong>TemporaryOverride</strong> that will revert to <strong>FollowSchedule</strong> at the next scheduled setpoint. Once this is done, the zone can be switched to <strong>PermanentOverride</strong> mode.</p>
<p>In Home Assistant, all this is done via <code>HVAC_MODE</code> and <code>PRESET_MODE</code> (but also see <code>systemModeStatus</code>, <code>setpointStatus</code>, below).</p>
<h2>Useful Jinja Templates</h2>
<p>The actual operating mode of evohome entities can be tracked via their state attributes, which includes a JSON data structure for the current state called <code>status</code>.</p>
<p>For the Controller, see <code>system_mode_status</code>:</p>
<pre><code class="language-text">{% if state_attr('climate.my_home', 'status').system_mode_status.mode == &quot;Away&quot; %}
  The system is in Away mode
{% else %}
  The system is not in Away mode
{% endif %}
</code></pre>
<p>For the Zones, it is <code>setpointStatus</code>:</p>
<pre><code class="language-text">{{ state_attr('climate.kitchen', 'status').setpoint_status.setpoint_mode }}
</code></pre>
<p>The Zones will expose the current/upcoming scheduled <code>setpoints</code>:</p>
<pre><code class="language-text">{{ state_attr('climate.kitchen', 'status').setpoints.next_sp_temp }}
</code></pre>
<p>All evohome entities may have faults, and these can be turned into sensors, or:</p>
<pre><code class="language-text">{% if state_attr('climate.bedroom', 'status').active_faults %}
  {% if state_attr('climate.bedroom', 'status').active_faults[0].fault_type == 'TempZoneActuatorLowBattery' %}
    There is a low battery
  {% endif %}
    There is a Fault!
{% else %}
  Yay, everything is OK :)
{% endif %}
</code></pre>
:ET