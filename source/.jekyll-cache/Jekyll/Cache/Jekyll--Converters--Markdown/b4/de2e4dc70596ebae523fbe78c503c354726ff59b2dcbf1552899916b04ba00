I"§'<p>In Home Assistant 0.19 we introduced a new powerful feature: variables in scripts and automations. This makes it possible to adjust your condition and action based on the information of the trigger.</p>
<p>The trigger data made is available during <a href="/docs/configuration/templating/">template</a> rendering as the <code>trigger</code> variable.</p>
<pre><code class="language-yaml"># Example configuration.yaml entries
automation:
  trigger:
    platform: state
    entity_id: device_tracker.paulus
  action:
    service: notify.notify
    data_template:
      message: &gt;
        Paulus just changed from {{ trigger.from_state.state }}
        to {{ trigger.to_state.state }}

automation 2:
  trigger:
    platform: mqtt
    topic: /notify/+
  action:
    service_template: &gt;
      notify.{{ trigger.topic.split('/')[-1] }}
    data_template:
      message: '{{ trigger.payload }}'
      
automation 3:
  trigger:
    # Multiple Entities for which you want to perform the same action.
    - platform: state
      entity_id:
        - light.bedroom_closet
      to: 'on'
      # Trigger when someone leaves the closet light on for 10 minutes.
      for: '00:10:00'
    - platform: state
      entity_id:
        - light.kiddos_closet
      to: 'on'
      for: '00:10:00'
    - platform: state
      entity_id:
        - light.linen_closet
      to: 'on'
      for: '00:10:00'
  action:
    - service: light.turn_off
      data_template:
        # Whichever entity triggers the automation we want to turn off THAT entity, not the others.
        entity_id: &quot;{{ trigger.entity_id }}&quot;
</code></pre>
<h2>Important Template Rules</h2>
<p>There are a few very important rules to remember when writing automation templates:</p>
<ol>
<li>You <strong>must</strong> use <code>data_template</code> in place of <code>data</code> when using templates in the <code>data</code> section of a service call.</li>
<li>You <strong>must</strong> use <code>service_template</code> in place of <code>service</code> when using templates in the <code>service</code> section of a service call.</li>
<li>You <strong>must</strong> surround single-line templates with double quotes (<code>&quot;</code>) or single quotes (<code>'</code>).</li>
<li>It is advised that you prepare for undefined variables by using <code>if ... is not none</code> or the <a href="http://jinja.pocoo.org/docs/dev/templates/#default"><code>default</code> filter</a>, or both.</li>
<li>It is advised that when comparing numbers, you convert the number(s) to a <a href="http://jinja.pocoo.org/docs/dev/templates/#float"><code>float</code></a> or an <a href="http://jinja.pocoo.org/docs/dev/templates/#int"><code>int</code></a> by using the respective <a href="http://jinja.pocoo.org/docs/dev/templates/#list-of-builtin-filters">filter</a>.</li>
<li>While the <a href="http://jinja.pocoo.org/docs/dev/templates/#float"><code>float</code></a> and <a href="http://jinja.pocoo.org/docs/dev/templates/#int"><code>int</code></a> filters do allow a default fallback value if the conversion is unsuccessful, they do not provide the ability to catch undefined variables.</li>
</ol>
<p>Remembering these simple rules will help save you from many headaches and endless hours of frustration when using automation templates.</p>
<p>It is possible to use <code>data</code> and <code>data_template</code> concurrently but be aware that <code>data_template</code> will overwrite attributes that are provided in both.</p>
<h2>Trigger State Object</h2>
<p>Knowing how to access the <a href="/docs/configuration/state_object/">state object</a> of a trigger entity could be one of the more common questions. Here are a few ways for the <a href="#state"><code>state</code></a>, <a href="#numeric_state"><code>numeric_state</code></a> and <a href="#template"><code>template</code></a> triggers:</p>
<ul>
<li><code>trigger.from_state</code> will return the <strong>previous</strong> <a href="/docs/configuration/state_object/">state object</a> of the entity.</li>
<li><code>trigger.to_state</code> will return the <strong>new</strong> <a href="/docs/configuration/state_object/">state object</a> that triggered trigger.</li>
<li><code>states[trigger.to_state.domain][trigger.to_state.object_id]</code> will return the <strong>current</strong> <a href="/docs/configuration/state_object/">state object</a> of the entity.</li>
</ul>
<h2>Available Trigger Data</h2>
<p>The following tables show the available trigger data per platform.</p>
<h3>event</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>event</code>.</td>
</tr>
<tr>
<td><code>trigger.event</code></td>
<td>Event object that matched.</td>
</tr>
<tr>
<td><code>trigger.event.data</code></td>
<td>Optional data</td>
</tr>
</tbody>
</table>
<h3>mqtt</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>mqtt</code>.</td>
</tr>
<tr>
<td><code>trigger.topic</code></td>
<td>Topic that received payload.</td>
</tr>
<tr>
<td><code>trigger.payload</code></td>
<td>Payload.</td>
</tr>
<tr>
<td><code>trigger.payload_json</code></td>
<td>Dictonary of the JSON parsed payload.</td>
</tr>
<tr>
<td><code>trigger.qos</code></td>
<td>QOS of payload.</td>
</tr>
</tbody>
</table>
<h3>numeric_state</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>numeric_state</code></td>
</tr>
<tr>
<td><code>trigger.entity_id</code></td>
<td>Entity ID that we observe.</td>
</tr>
<tr>
<td><code>trigger.below</code></td>
<td>The below threshold, if any.</td>
</tr>
<tr>
<td><code>trigger.above</code></td>
<td>The above threshold, if any.</td>
</tr>
<tr>
<td><code>trigger.from_state</code></td>
<td>The previous <a href="/docs/configuration/state_object/">state object</a> of the entity.</td>
</tr>
<tr>
<td><code>trigger.to_state</code></td>
<td>The new <a href="/docs/configuration/state_object/">state object</a> that triggered trigger.</td>
</tr>
<tr>
<td><code>trigger.for</code></td>
<td>Timedelta object how long state has met above/below criteria, if any.</td>
</tr>
</tbody>
</table>
<h3>state</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>state</code></td>
</tr>
<tr>
<td><code>trigger.entity_id</code></td>
<td>Entity ID that we observe.</td>
</tr>
<tr>
<td><code>trigger.from_state</code></td>
<td>The previous <a href="/docs/configuration/state_object/">state object</a> of the entity.</td>
</tr>
<tr>
<td><code>trigger.to_state</code></td>
<td>The new <a href="/docs/configuration/state_object/">state object</a> that triggered trigger.</td>
</tr>
<tr>
<td><code>trigger.for</code></td>
<td>Timedelta object how long state has been to state, if any.</td>
</tr>
</tbody>
</table>
<h3>sun</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>sun</code></td>
</tr>
<tr>
<td><code>trigger.event</code></td>
<td>The event that just happened: <code>sunset</code> or <code>sunrise</code>.</td>
</tr>
<tr>
<td><code>trigger.offset</code></td>
<td>Timedelta object with offset to the event, if any.</td>
</tr>
</tbody>
</table>
<h3>template</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>template</code></td>
</tr>
<tr>
<td><code>trigger.entity_id</code></td>
<td>Entity ID that caused change.</td>
</tr>
<tr>
<td><code>trigger.from_state</code></td>
<td>Previous <a href="/docs/configuration/state_object/">state object</a> of entity that caused change.</td>
</tr>
<tr>
<td><code>trigger.to_state</code></td>
<td>New <a href="/docs/configuration/state_object/">state object</a> of entity that caused template to change.</td>
</tr>
<tr>
<td><code>trigger.for</code></td>
<td>Timedelta object how long state has been to state, if any.</td>
</tr>
</tbody>
</table>
<h3>time</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>time</code></td>
</tr>
<tr>
<td><code>trigger.now</code></td>
<td>DateTime object that triggered the time trigger.</td>
</tr>
</tbody>
</table>
<h3>time pattern</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>time_pattern</code></td>
</tr>
<tr>
<td><code>trigger.now</code></td>
<td>DateTime object that triggered the time_pattern trigger.</td>
</tr>
</tbody>
</table>
<h3>webhook</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>webhook</code></td>
</tr>
<tr>
<td><code>trigger.webhook_id</code></td>
<td>The webhook ID that was triggered.</td>
</tr>
<tr>
<td><code>trigger.json</code></td>
<td>The JSON data of the request (if it had a JSON content type).</td>
</tr>
<tr>
<td><code>trigger.data</code></td>
<td>The form data of the request (if it had a form data content type).</td>
</tr>
</tbody>
</table>
<h3>zone</h3>
<table>
<thead>
<tr>
<th>Template variable</th>
<th>Data</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger.platform</code></td>
<td>Hardcoded: <code>zone</code></td>
</tr>
<tr>
<td><code>trigger.entity_id</code></td>
<td>Entity ID that we are observing.</td>
</tr>
<tr>
<td><code>trigger.from_state</code></td>
<td>Previous <a href="/docs/configuration/state_object/">state object</a> of the entity.</td>
</tr>
<tr>
<td><code>trigger.to_state</code></td>
<td>New <a href="/docs/configuration/state_object/">state object</a> of the entity.</td>
</tr>
<tr>
<td><code>trigger.zone</code></td>
<td>State object of zone</td>
</tr>
<tr>
<td><code>trigger.event</code></td>
<td>Event that trigger observed: <code>enter</code> or <code>leave</code>.</td>
</tr>
</tbody>
</table>
:ET