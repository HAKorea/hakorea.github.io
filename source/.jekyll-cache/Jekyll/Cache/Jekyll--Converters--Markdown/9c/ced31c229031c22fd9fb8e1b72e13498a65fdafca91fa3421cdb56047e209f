I"æ<p>The <code>dweet</code> integration makes it possible to transfer details collected with Home Assistant to <a href="https://dweet.io/">Dweet.io</a> and visualize them with <a href="https://freeboard.io">freeboard.io</a>. Keep in mind that your information will be public!</p>
<p class='img'>
  <img src='/images/screenshots/dweet-freeboard.png' />
</p>
<div class='note warning'>
The publishing interval is limited to 1 second. This means that it's possible to miss fast changes.
</div>
<p>There is currently support for the following device types within Home Assistant:</p>
<ul>
<li><a href="#sensor">Sensor</a></li>
</ul>
<h2>Configuration</h2>
<p>To use the <code>dweet</code> integration in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
dweet:
  name: YOUR_UNIQUE_IDENTIFIER
  whitelist:
    - input_number.brightness
    - input_boolean.notify_home
    - sensor.weather_temperature
    - sensor.cpu
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>A unique identifier for your Home Assistant instance.</p>
</span></p></dd><dt><a class='title-link' name='whitelist' href='#whitelist'></a> whitelist</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of entity IDs you want to publish</p>
</span></p></dd></dl>
</div>
<h2>Sensor</h2>
<p>The <code>dweet</code> sensor platform allows you to get details from your devices which are publishing their values to <a href="https://dweet.io/">Dweet.io</a>.</p>
<h3>Configuration</h3>
<p>To use Dweet.io sensors in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: dweet
    device: THING_NAME
    value_template: '{{ value_json.VARIABLE }}'
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='device' href='#device'></a> device</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Identification of the device (also known as <code>thing</code>).</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>The variable to extract a value from the content.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Let you overwrite the name of the device in the frontend.</p>
</span></p><p class='default'>
Default value: <p>Dweet.io Sensor</p>
</p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the unit of measurement of the sensor, if any.</p>
</span></p></dd></dl>
</div>
<h3>Full configuration sample</h3>
<p>A full configuration entry could look like the sample below.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: dweet
    name: Temperature
    device: THING_NAME
    value_template: '{{ value_json.VARIABLE }}'
    unit_of_measurement: &quot;Â°C&quot;
</code></pre>
<h3>Interacting with Dweet.io</h3>
<p>You can easily send dweets from the command-line to test your sensor with <code>curl</code>.</p>
<pre><code class="language-bash">$ curl -H 'Content-Type: application/json' -d '{&quot;temperature&quot;: 40, &quot;humidity&quot;: 65}' https://dweet.io/dweet/for/ha-sensor
</code></pre>
<p>will give you a response like the one below:</p>
<pre><code class="language-json">{&quot;this&quot;:&quot;succeeded&quot;,&quot;by&quot;:&quot;dweeting&quot;,&quot;the&quot;:&quot;dweet&quot;,&quot;with&quot;:{&quot;thing&quot;:&quot;ha-sensor&quot;,&quot;created&quot;:&quot;2015-12-10T09:43:31.133Z&quot;,&quot;content&quot;:{&quot;temperature&quot;:40,&quot;humidity&quot;:65}}}
</code></pre>
<p>The <a href="https://github.com/paddycarey/dweepy">dweepy</a> module gives you another option to work with <a href="https://dweet.io/">Dweet.io</a>.</p>
<p>Send a dweet.</p>
<pre><code class="language-bash">$ python3
&gt;&gt;&gt; import dweepy
&gt;&gt;&gt; dweepy.dweet_for('ha-sensor', {'temperature': '23', 'humiditiy':'81'})
{'thing': 'ha-sensor', 'created': '2015-12-10T09:46:08.559Z', 'content': {'humiditiy': 81, 'temperature': 23}}
</code></pre>
<p>Receive the latest dweet.</p>
<pre><code class="language-bash">&gt;&gt;&gt; dweepy.get_latest_dweet_for('ha-sensor')
[{'thing': 'ha-sensor'', 'created': '2015-12-10T09:43:31.133Z', 'content': {'humidity': 65, 'temperature': 40}}]
</code></pre>
:ET