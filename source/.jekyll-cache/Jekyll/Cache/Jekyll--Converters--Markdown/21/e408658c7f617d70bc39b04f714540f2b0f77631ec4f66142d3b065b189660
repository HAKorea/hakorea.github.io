I"@<p>The <code>command_line</code> binary sensor platform issues specific commands to get data.</p>
<h2>Configuration</h2>
<p>To use your Command binary sensor in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: command_line
    command: 'cat /proc/sys/net/ipv4/ip_forward'
</code></pre>
<div class='note'>
<p>Itâ€™s highly recommended to enclose the command in single quotes <code>'</code> as it ensures all characters can be used in the command and reduces the risk of unintentional escaping. To include a single quote in a command enclosed in single quotes, double it: <code>''</code>.</p>
</div>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='command' href='#command'></a> command</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The action to take to get the value.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Let you overwrite the name of the device.</p>
</span></p><p class='default'>
Default value: <p><em>name</em> from the device</p>
</p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/binary_sensor/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd><dt><a class='title-link' name='payload_on' href='#payload_on'></a> payload_on</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents enabled state.</p>
</span></p><p class='default'>
Default value: <p>ON</p>
</p></dd><dt><a class='title-link' name='payload_off' href='#payload_off'></a> payload_off</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The payload that represents disabled state.</p>
</span></p><p class='default'>
Default value: <p>OFF</p>
</p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a <a href="/docs/configuration/templating/#processing-incoming-data">template</a> to extract a value from the payload.</p>
</span></p></dd><dt><a class='title-link' name='scan_interval' href='#scan_interval'></a> scan_interval</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines number of seconds for polling interval.</p>
</span></p><p class='default'>
Default value: <p>60</p>
</p></dd><dt><a class='title-link' name='command_timeout' href='#command_timeout'></a> command_timeout</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines number of seconds for command timeout.</p>
</span></p><p class='default'>
Default value: <p>15</p>
</p></dd></dl>
</div>
<h2>Examples</h2>
<p>In this section you find some real-life examples of how to use this sensor.</p>
<h3>SickRage</h3>
<p>Check the state of an <a href="https://github.com/sickragetv/sickrage">SickRage</a> instance.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: command_line
    command: 'netstat -na | find &quot;33322&quot; | find /c &quot;LISTENING&quot; &gt; nul &amp;&amp; (echo &quot;Running&quot;) || (echo &quot;Not running&quot;)'
    name: 'sickragerunning'
    device_class: moving
    payload_on: &quot;Running&quot;
    payload_off: &quot;Not running&quot;
</code></pre>
<h3>Check RasPlex</h3>
<p>Check if <a href="https://www.rasplex.com/">RasPlex</a> is <code>online</code>.</p>
<pre><code class="language-yaml">binary_sensor:
  - platform: command_line
    command: 'ping -c 1 rasplex.local | grep &quot;1 received&quot; | wc -l'
    name: 'is_rasplex_online'
    device_class: connectivity
    payload_on: 1
    payload_off: 0
</code></pre>
<p>An alternative solution could look like this:</p>
<pre><code class="language-yaml">binary_sensor:
  - platform: command_line
    name: Printer
    command: 'ping -W 1 -c 1 192.168.1.10 &gt; /dev/null 2&gt;&amp;1 &amp;&amp; echo success || echo fail'
    device_class: connectivity
    payload_on: &quot;success&quot;
    payload_off: &quot;fail&quot;
</code></pre>
<p>Consider to use the <a href="/integrations/ping#binary-sensor"><code>ping</code> sensor </a> as an alternative to the samples above.</p>
<h3>Check if a system service is running</h3>
<p>The services running is listed in <code>/etc/systemd/system</code> and can be checked with the <code>systemctl</code> command:</p>
<pre><code class="language-bash">$ systemctl is-active home-assistant@rock64.service
active
$ sudo service home-assistant@rock64.service stop
$ systemctl is-active home-assistant@rock64.service
inactive
</code></pre>
<p>A binary command line sensor can check this:</p>
<pre><code class="language-yaml">binary_sensor:
  - platform: command_line
    command: '/bin/systemctl is-active home-assistant@rock64.service'
    payload_on: 'active'
    payload_off: 'inactive'
</code></pre>
:ET