I"»<p>The <code>caldav</code> platform allows you to connect to your WebDav calendar and generate
binary sensors. A different sensor will be created for each individual calendar,
or you can specify custom calendars which match a criteria you define (more on
that below). These sensors will be <code>on</code> if you have an on going event in that
calendar or <code>off</code> if the event is later in time, or if there is no event at all.
The WebDav calendar get updated roughly every 15 minutes.</p>
<h3>Prerequisites</h3>
<p>You need to have a CalDav server and credentials for it. This integration was
tested against <a href="http://sabre.io/baikal/">Baikal</a> but any integration complying
with the RFC4791 should work. <a href="https://nextcloud.com/">Nextcloud</a>
and <a href="https://owncloud.org/">Owncloud</a> work fine.</p>
<p>You might need some additional system packages to compile the
Python caldav library. On a Debian based system, install them by:</p>
<pre><code class="language-bash">$ sudo apt-get install libxml2-dev libxslt1-dev zlib1g-dev
</code></pre>
<h3>Basic Setup</h3>
<p>To integrate a WebDav calendar in Home Assistant,
add the following section to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry for baikal
calendar:
  - platform: caldav
    username: john.doe@test.com
    password: !secret caldav
    url: https://baikal.my-server.net/cal.php/calendars/john.doe@test.com/default
</code></pre>
<pre><code class="language-yaml"># Example configuration.yaml entry for nextcloud, calendars will be found automatically
calendar:
  - platform: caldav
    username: john.doe
    password: !secret caldav
    url: https://nextcloud.example.com/remote.php/dav
</code></pre>
<p>This example will generate default binary sensors for each calendar you have in
your account. Those calendars will be <code>on</code> when there is an ongoing event and
<code>off</code> if not. Events that last a whole day are ignored in those calendars.
You have to setup custom calendars in order to take them into account or for
advanced event filtering.</p>
<h3>Custom calendars</h3>
<p>You have the possibility to create multiple binary
sensors for events that match certain conditions.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
calendar:
  - platform: caldav
    username: john.doe@test.com
    password: !secret caldav
    url: https://baikal.my-server.net/cal.php/calendars/john.doe@test.com/default
    custom_calendars:
      - name: 'HomeOffice'
        calendar: 'Agenda'
        search: 'HomeOffice'
      - name: 'WarmupFlat'
        calendar: 'Agenda'
        search: 'Warmup'
</code></pre>
<p>This will create two binary sensors for the calendar name Agenda: ‚ÄúHomeOffice‚Äù
and ‚ÄúWarmupFlat‚Äù. Those sensors will be <code>on</code> if there is an ongoing event
matching the regular expression specified in <code>search</code>.
In custom calendars, events that last a whole day are taken into account.</p>
<p>Please note that when you configure custom calendars,
the default ones are not created anymore.</p>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='url' href='#url'></a> url</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The full URL to your calendars.</p>
</span></p></dd><dt><a class='title-link' name='username' href='#username'></a> username</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Username for authentication.</p>
</span></p></dd><dt><a class='title-link' name='password' href='#password'></a> password</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Password for authentication.</p>
</span></p></dd><dt><a class='title-link' name='calendars' href='#calendars'></a> calendars</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>List of the calendars to filter. Empty or absent means no filtering, i.e. all calendars will be added.</p>
</span></p></dd><dt><a class='title-link' name='custom_calendars' href='#custom_calendars'></a> custom_calendars</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Details on any custom binary sensor calendars you want to create.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of your custom calendar.</p>
</span></p></dd><dt><a class='title-link' name='calendar' href='#calendar'></a> calendar</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The source calendar to search on.</p>
</span></p></dd><dt><a class='title-link' name='search' href='#search'></a> search</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Regular expression for filtering the events based on the content of their summary, description or location.</p>
</span></p></dd></dl></dd></dl>
</div>
<h3>Sensor attributes</h3>
<ul>
<li><strong>offset_reached</strong>: If set in the event title and parsed out will be on/off once the offset in the title in minutes is reached. So the title Very important meeting !!-10 would trigger this attribute to be on 10 minutes before the event starts.</li>
<li><strong>all_day</strong>: <code>True/False</code> if this is an all day event. Will be <code>False</code> if there is no event found.</li>
<li><strong>message</strong>: The event title with the <code>search</code> values extracted. So in the above example for <code>offset_reached</code> the message would be set to Very important meeting</li>
<li><strong>description</strong>: The event description.</li>
<li><strong>location</strong>: The event Location.</li>
<li><strong>start_time</strong>: Start time of event.</li>
<li><strong>end_time</strong>: End time of event.</li>
</ul>
<h3>Examples</h3>
<p>All events of the calendars ‚Äúprivate‚Äù and ‚Äúholidays‚Äù. Note that all day events are not included.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry for nextcloud
calendar:
  - platform: caldav
    url: https://nextcloud.example.com/remote.php/dav
    username: 'me'
    password: !secret caldav
    calendars:
      - private
      - holidays
</code></pre>
<p>Full example with automation to wake up to music if not holiday.
Prerequisite: you have a calendar named ‚Äúwork‚Äù where
you create calendar entries containing ‚ÄúHoliday‚Äù.</p>
<p>Custom calendar names are built from the
main calendar + name of the custom calendar.</p>
<pre><code class="language-yaml"># configuration.yaml
calendar:
  - platform: caldav
    url: https://nextcloud.example.com/remote.php/dav
    username: 'me'
    password: !secret caldav
    custom_calendars:
      - name: holiday
        calendar: work
        search: 'Holiday'

# automations.yaml
- id: wakeup
  alias: worktime wakeup
  trigger:
    platform: time
    at: '06:40:00'
  action:
  - service: media_player.media_play
    entity_id: media_player.bedroom
  condition:
  - condition: state
    entity_id: calendar.work_holiday
    state: 'off'
</code></pre>
:ET