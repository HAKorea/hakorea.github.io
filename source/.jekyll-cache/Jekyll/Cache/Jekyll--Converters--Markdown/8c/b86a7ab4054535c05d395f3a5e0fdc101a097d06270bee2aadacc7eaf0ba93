I"M<p>The <code>sql</code> sensor platform enables you to use values from an <a href="https://en.wikipedia.org/wiki/SQL">SQL</a> database supported by the <a href="https://www.sqlalchemy.org">sqlalchemy</a> library, to populate a sensor state (and attributes).
This can be used to present statistics about Home Assistant sensors if used with the <code>recorder</code> integration database. It can also be used with an external data source.</p>
<h2>Configuration</h2>
<p>To configure this sensor, you need to define the sensor connection variables and a list of queries to your <code>configuration.yaml</code> file. A sensor will be created for each query:</p>
<p>To enable it, add the following lines to your <code>configuration.yaml</code>:</p>
<pre><code class="language-yaml"># Example configuration.yaml
sensor:
  - platform: sql
    queries:
      - name: Sun state
        query: &quot;SELECT * FROM states WHERE entity_id = 'sun.sun' ORDER BY state_id DESC LIMIT 1;&quot;
        column: 'state'
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='db_url' href='#db_url'></a> db_url</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The URL which points to your database. See <a href="/integrations/recorder/#custom-database-engines">supported engines</a>.</p>
</span></p><p class='default'>
Default value: <p>Defaults to the default recorder <code>db_url</code> (not the current <code>db_url</code> of recorder).</p>
</p></dd><dt><a class='title-link' name='queries' href='#queries'></a> queries</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your queries.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The name of the sensor.</p>
</span></p></dd><dt><a class='title-link' name='query' href='#query'></a> query</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>An SQL QUERY string, should return 1 result at most.</p>
</span></p></dd><dt><a class='title-link' name='column' href='#column'></a> column</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The field name to select.</p>
</span></p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the units of measurement of the sensor, if any.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to extract a value from the payload.</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Examples</h2>
<p>In this section, you find some real-life examples of how to use this sensor.</p>
<h3>Current state of an entity</h3>
<p>This example shows the previously <em>recorded</em> state of the sensor <code>sensor.temperature_in</code>.</p>
<pre><code class="language-yaml">sensor:
  - platform: random
    name: Temperature in
    unit_of_measurement: 'Â°C'
</code></pre>
<p>The query will look like this:</p>
<pre><code class="language-sql">SELECT * FROM states WHERE entity_id = 'sensor.temperature_in' ORDER BY state_id DESC LIMIT 1;
</code></pre>
<pre><code class="language-yaml"># Example configuration.yaml
sensor:
  - platform: sql
    queries:
      - name: Temperature in
        query: &quot;SELECT * FROM states WHERE entity_id = 'sensor.temperature_in' ORDER BY state_id DESC LIMIT 1;&quot;
        column: 'state'
</code></pre>
<p>Note that the SQL sensor state corresponds to the last row of the SQL result set.</p>
<h3>Previous state of an entity</h3>
<p>This example only works with <em>binary_sensors</em>:</p>
<pre><code class="language-sql">SELECT * FROM states WHERE entity_id = 'binary_sensor.xyz789' GROUP BY state ORDER BY last_changed DESC LIMIT 1;
</code></pre>
<h3>Database size</h3>
<h4>Database size in Postgres</h4>
<pre><code class="language-yaml">sensor:
  - platform: sql
    db_url: postgresql://user:password@host/dbname
    queries:
      - name: DB size
        query: &quot;SELECT (pg_database_size('dsmrreader')/1024/1024) as db_size;&quot;
        column: &quot;db_size&quot;
        unit_of_measurement: MB
</code></pre>
<h4>MariaDB/MySQL</h4>
<p>Change <code>table_schema=&quot;hass&quot;</code> to the name that you use as the database name, to ensure that your sensor will work properly.</p>
<pre><code class="language-yaml">sensor:
  - platform: sql
    db_url: mysql://user:password@localhost/hass
    queries:
      - name: DB size
        query: 'SELECT table_schema &quot;database&quot;, Round(Sum(data_length + index_length) / 1024, 1) &quot;value&quot; FROM information_schema.tables WHERE table_schema=&quot;hass&quot; GROUP BY table_schema;'
        column: 'value'
        unit_of_measurement: kB
</code></pre>
:ET