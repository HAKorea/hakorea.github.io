I"‘<p>The <code>mitemp_bt</code> sensor platform allows one to monitor room temperature and humidity. The <a href="https://www.amazon.com/Temperature-Humidity-Xiaomi-Bluetooth-Screen-Remote/dp/B079L6N6PC">Xiaomi Mijia BLE Temperature and Humidity sensor with LCD</a> is a small Bluetooth Low Energy device that monitors the room temperature and humidity. As only a single BLE device can be polled at the same time, the library employs locking to make sure this is the case.</p>
<h2>Installation</h2>
<p>Depending on the operating system you‚Äôre running, you have to configure the proper Bluetooth backend on your system:</p>
<ul>
<li>On <a href="/hassio/installation/">Hass.io</a>: <code>mitemp_bt</code> will work out of the box as long as the host supports Bluetooth (like the Raspberry Pi does).</li>
<li>On a <a href="/docs/installation/docker/">generic Docker installation</a>: Works out of the box with <code>--net=host</code> and properly configured Bluetooth on the host.</li>
<li>On other Linux systems:
<ul>
<li>Preferred solution: Install the <code>bluepy</code> and <code>btlewrap</code> library (via pip). When using a virtual environment, make sure to use install the library in the right one.</li>
<li>Fallback solution: Install <code>btlewrap</code> library (via pip) and <code>gatttool</code> via your package manager. Depending on the distribution, the package name might be: <code>bluez</code>, <code>bluetooth</code> or    <code>bluez-deprecated</code>.</li>
</ul>
</li>
<li>Windows and MacOS are currently not supported by the <code>btlewrap</code> library.</li>
</ul>
<h2>Configuration</h2>
<p>Start a scan to determine the MAC addresses of the sensor:</p>
<pre><code class="language-bash">$ sudo hcitool lescan
LE Scan ...
4C:65:A8:D2:31:7F MJ_HT_V1
[...]
</code></pre>
<p>Or if your distribution is using bluetoothctl:</p>
<pre><code class="language-bash">$ bluetoothctl
[bluetooth]# scan on
Discovery started
[CHG] Controller XX:XX:XX:XX:XX:XX Discovering: yes
[NEW] Device 4C:65:A8:D2:31:7F MJ_HT_V1
</code></pre>
<p>Check for <code>MJ_HT_V1</code> or similar entries, those are your sensor.</p>
<p>To use your Mi Temperature and Humidity sensor in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: mitemp_bt
    mac: 'xx:xx:xx:xx:xx:xx'
    monitored_conditions:
      - temperature
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='mac' href='#mac'></a> mac</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The MAC address of your sensor.</p>
</span></p></dd><dt><a class='title-link' name='monitored_conditions' href='#monitored_conditions'></a> monitored_conditions</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The parameters that should be monitored.</p>
</span></p><p class='default'>
Default value: <p>[‚Äútemperature‚Äù, ‚Äúhumidity‚Äù, ‚Äúbattery‚Äù]</p>
</p></dd><dd><dl class='nested'><dt><a class='title-link' name='temperature' href='#temperature'></a> temperature</dt><dd><p class='desc'><span class='description'><p>Temperature in C at the sensor‚Äôs location.</p>
</span></p></dd><dt><a class='title-link' name='humidity' href='#humidity'></a> humidity</dt><dd><p class='desc'><span class='description'><p>Humidity level in % at the sensor‚Äôs location.</p>
</span></p></dd><dt><a class='title-link' name='battery' href='#battery'></a> battery</dt><dd><p class='desc'><span class='description'><p>Battery details (in %).</p>
</span></p></dd></dl></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The name displayed in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='force_update' href='#force_update'></a> force_update</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sends update events even if the value hasn‚Äôt changed.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='median' href='#median'></a> median</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sometimes the sensor measurements show spikes. Using this parameter, the poller will report the median of the last 3 (you can also use larger values) measurements. This filters out single spikes. Median: 5 will also filter double spikes. If you never have problems with spikes, <code>median: 1</code> will work fine.</p>
</span></p><p class='default'>
Default value: <p>3</p>
</p></dd><dt><a class='title-link' name='timeout' href='#timeout'></a> timeout</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Define the timeout value in seconds when polling.</p>
</span></p><p class='default'>
Default value: <p>10</p>
</p></dd><dt><a class='title-link' name='retries' href='#retries'></a> retries</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Define the number of retries when polling.</p>
</span></p><p class='default'>
Default value: <p>2</p>
</p></dd><dt><a class='title-link' name='cache_value' href='#cache_value'></a> cache_value</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Define cache expiration value in seconds.</p>
</span></p><p class='default'>
Default value: <p>300</p>
</p></dd><dt><a class='title-link' name='adapter' href='#adapter'></a> adapter</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Define the Bluetooth adapter to use. Run <code>hciconfig</code> to get a list of available adapters.</p>
</span></p><p class='default'>
Default value: <p>hci0</p>
</p></dd></dl>
</div>
<p>Note that by default the sensor is only polled once every 5 minutes. This means with the <code>median: 3</code> setting will take as least 15 minutes before the sensor will report a value after a Home Assistant restart. Even though the hardware is able to provide new values every second, room temperatures don‚Äôt change that quickly.
Reducing polling intervals will have a negative effect on the battery life.</p>
<h2>Full example</h2>
<p>A full configuration example could look like the one below:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
sensor:
  - platform: mitemp_bt
    mac: 'xx:xx:xx:xx:xx:xx'
    name: Kids Room Temp
    force_update: true
    median: 1
    monitored_conditions:
      - temperature
      - humidity
      - battery
</code></pre>
:ET