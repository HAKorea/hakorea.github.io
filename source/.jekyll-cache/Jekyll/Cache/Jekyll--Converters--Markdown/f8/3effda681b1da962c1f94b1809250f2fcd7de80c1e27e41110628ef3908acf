I"*'<p>The <code>template</code> platform creates lights that combine integrations and provides the
ability to run scripts or invoke services for each of the on, off, and
brightness commands of a light.</p>
<p>To enable Template Lights in your installation, add the following to your
<code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
light:
  - platform: template
    lights:
      theater_lights:
        friendly_name: &quot;Theater Lights&quot;
        level_template: &quot;{{ sensor.theater_brightness.attributes.lux|int }}&quot;
        value_template: &quot;{{ sensor.theater_brightness.attributes.lux|int &gt; 0 }}&quot;
        turn_on:
          service: script.theater_lights_on
        turn_off:
          service: script.theater_lights_off
        set_level:
          service: script.theater_lights_level
          data_template:
            brightness: &quot;{{ brightness }}&quot;
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='lights' href='#lights'></a> lights</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your lights.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of entity IDs so the light only reacts to state changes of these entities. This can be used if the automatic analysis fails to find all relevant entities.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the state of the light.</p>
</span></p><p class='default'>
Default value: <p>optimistic</p>
</p></dd><dt><a class='title-link' name='level_template' href='#level_template'></a> level_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the brightness of the light.</p>
</span></p><p class='default'>
Default value: <p>optimistic</p>
</p></dd><dt><a class='title-link' name='icon_template' href='#icon_template'></a> icon_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for an icon or picture, e.g. showing a different icon for different states.</p>
</span></p></dd><dt><a class='title-link' name='availability_template' href='#availability_template'></a> availability_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the <code>available</code> state of the component. If the template returns <code>true</code>, the device is <code>available</code>. If the template returns any other value, the device will be <code>unavailable</code>. If <code>availability_template</code> is not configured, the component will always be <code>available</code>.</p>
</span></p><p class='default'>
Default value: <p>true</p>
</p></dd><dt><a class='title-link' name='turn_on' href='#turn_on'></a> turn_on</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines an action to run when the light is turned on.</p>
</span></p></dd><dt><a class='title-link' name='turn_off' href='#turn_off'></a> turn_off</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines an action to run when the light is turned off.</p>
</span></p></dd><dt><a class='title-link' name='set_level' href='#set_level'></a> set_level</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines an action to run when the light is given a brightness command.</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Considerations</h2>
<p>If you are using the state of a platform that takes extra time to load, the
Template Light may get an <code>unknown</code> state during startup. This results
in error messages in your log file until that platform has completed loading.
If you use <code>is_state()</code> function in your template, you can avoid this situation.
For example, you would replace
<code>{{ states.switch.source.state == 'on' }}</code>
with this equivalent that returns <code>true</code>/<code>false</code> and never gives an unknown
result:
<code>{{ is_state('switch.source', 'on') }}</code></p>
<h2>Examples</h2>
<p>In this section you will find some real-life examples of how to use this light.</p>
<h3>Theater Volume Control</h3>
<p>This example shows a light that is actually a home theater’s volume. This
component gives you the flexibility to provide whatever you’d like to send as
the payload to the consumer including any scale conversions you may need to
make; the <a href="/integrations/media_player/">Media Player component</a> needs a floating
point percentage value from <code>0.0</code> to <code>1.0</code>.</p>
<pre><code class="language-yaml">light:
  - platform: template
    lights:
      theater_volume:
        friendly_name: &quot;Receiver Volume&quot;
        value_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {% if state_attr('media_player.receiver', 'is_volume_muted') %}
              off
            {% else %}
              on
            {% endif %}
          {% else %}
            off
          {% endif %}
        turn_on:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: false
        turn_off:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: true
        set_level:
          service: media_player.volume_set
          data_template:
            entity_id: media_player.receiver
            volume_level: &quot;{{ (brightness / 255 * 100)|int / 100 }}&quot;
        level_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {{ (state_attr('media_player.receiver', 'volume_level')|float * 255)|int }}
          {% else %}
            0
          {% endif %}
</code></pre>
<h3>Change The Icon</h3>
<p>This example shows how to change the icon based on the light state.</p>
<pre><code class="language-yaml">light:
  - platform: template
    lights:
      theater_volume:
        friendly_name: &quot;Receiver Volume&quot;
        value_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {% if state_attr('media_player.receiver', 'is_volume_muted') %}
              off
            {% else %}
              on
            {% endif %}
          {% else %}
            off
          {% endif %}
        icon_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {% if state_attr('media_player.receiver', 'is_volume_muted') %}
              mdi:lightbulb-off
            {% else %}
              mdi:lightbulb-on
            {% endif %}
          {% else %}
            mdi:lightbulb-off
          {% endif %}
        turn_on:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: false
        turn_off:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: true
</code></pre>
<h3>Change The Entity Picture</h3>
<p>This example shows how to change the entity picture based on the light state.</p>
<pre><code class="language-yaml">light:
  - platform: template
    lights:
      theater_volume:
        friendly_name: &quot;Receiver Volume&quot;
        value_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {% if state_attr('media_player.receiver', 'is_volume_muted') %}
              off
            {% else %}
              on
            {% endif %}
          {% else %}
            off
          {% endif %}
        icon_template: &gt;-
          {% if is_state('media_player.receiver', 'on') %}
            {% if state_attr('media_player.receiver', 'is_volume_muted') %}
              /local/lightbulb-off.png
            {% else %}
              /local/lightbulb-on.png
            {% endif %}
          {% else %}
            /local/lightbulb-off.png
          {% endif %}
        turn_on:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: false
        turn_off:
          service: media_player.volume_mute
          data:
            entity_id: media_player.receiver
            is_volume_muted: true
</code></pre>
:ET