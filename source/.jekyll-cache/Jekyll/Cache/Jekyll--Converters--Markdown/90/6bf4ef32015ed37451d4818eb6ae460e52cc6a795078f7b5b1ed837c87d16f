I"<p>The <code>velbus</code> integration is used to control <a href="https://www.velbus.eu/?lang=en">Velbus</a> modules. It supports the Velbus USB, Velbus serial and a TCP/IP gateway.</p>
<p>There is currently support for the following device types within Home Assistant:</p>
<ul>
<li>Binary Sensor</li>
<li>Climate</li>
<li>Sensor</li>
<li>Switch</li>
<li>Cover</li>
<li>Light</li>
</ul>
<p>The pushbutton LEDs of input modules are disabled by default. These can be enabled from the <code>Devices</code> panel in the <code>Configuration</code> page of the web interface.</p>
<h2>Configuration</h2>
<p>There are 2 options in configuring the velbus integration:</p>
<ul>
<li>Via the Home Assistant user interface where it will let you enter the port string to connect to the Velbus bus.</li>
<li>Via the Home Assistant <code>configuration.yaml</code> file.</li>
</ul>
<pre><code class="language-yaml"># Example configuration.yaml entry for a USB or serial interface
velbus:
  port: 'PORT_STRING'
</code></pre>
<h2>Port String</h2>
<p>The port string used in the user interface or the configuration file can have 2 formats:</p>
<ul>
<li>For a serial device: /dev/ttyUSB00</li>
<li>For a tcp/ip device: 127.0.0.1:3678</li>
</ul>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='port' href='#port'></a> port</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The port where your board is connected to your Home Assistant host.</p>
</span></p></dd></dl>
</div>
<h2>Example automation</h2>
<p>The Velbus integration allows you to link a Velbus button (i.e., a button of a <a href="https://www.velbus.eu/products/view/?id=416302&amp;lang=en">VMBGPOD</a> module) to a controllable entity of Home Assistant.
The actual linking can be realized by two automation rules. One rule to control the device using the push button and a second rule to update the LED state of the push button as soon as the entity state changes.</p>
<pre><code class="language-yaml"># Control light living from Velbus push_button_10
- id: 'Control_light_living_from_Velbus'
  alias: Control light living using Velbus push_button_10
  trigger:
  - entity_id: binary_sensor.push_button_10
    platform: state
    to: 'on'
  condition: []
  action:
  - entity_id: light.living
    service: light.toggle

# Keep status LED push_button_10 in sync to status light living
- id: 'Update LED of push_button_10'
  alias: Update LED state of push_button_10
  trigger:
  - entity_id: light.living
    platform: state
    to: 'on'
  - entity_id: light.living
    platform: state
    to: 'off'
  condition: []
  action:
  - condition: or
    conditions:
    - condition: and
      conditions:
      - condition: state
        entity_id: light.led_push_button_10
        state: 'on'
      - condition: state
        entity_id: light.living
        state: 'off'
    - condition: and
      conditions:
      - condition: state
        entity_id: light.led_push_button_10
        state: 'off'
      - condition: state
        entity_id: light.living
        state: 'on'
  - entity_id: light.led_push_button_10
    service: light.toggle
</code></pre>
:ET