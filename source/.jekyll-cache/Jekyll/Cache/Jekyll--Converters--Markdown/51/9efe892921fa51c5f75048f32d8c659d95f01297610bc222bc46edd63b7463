I"®<p>The <code>bayesian</code> binary sensor platform observes the state from multiple sensors and uses <a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayesâ€™ rule</a> to estimate the probability that an event has occurred given the state of the observed sensors. If the estimated posterior probability is above the <code>probability_threshold</code>, the sensor is <code>on</code> otherwise it is <code>off</code>.</p>
<p>This allows for the detection of complex events that may not be readily observable, e.g., cooking, showering, in bed, the start of a morning routine, etc. It can also be used to gain greater confidence about events that <em>are</em> directly observable, but for which the sensors can be unreliable, e.g., presence.</p>
<h2>Configuration</h2>
<p>To enable the Bayesian sensor, add the following lines to your <code>configuration.yaml</code>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: bayesian
    prior: 0.1
    observations:
      - entity_id: 'switch.kitchen_lights'
        prob_given_true: 0.6
        prob_given_false: 0.2
        platform: 'state'
        to_state: 'on'
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='prior' href='#prior'></a> prior</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Required)</span><span class='description'><p>The prior probability of the event. At any point in time (ignoring all external influences) how likely is this event to occur?</p>
</span></p></dd><dt><a class='title-link' name='probability_threshold' href='#probability_threshold'></a> probability_threshold</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The probability at which the sensor should trigger to <code>on</code>.</p>
</span></p><p class='default'>
Default value: <p>0.5</p>
</p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name of the sensor to use in the frontend.</p>
</span></p><p class='default'>
Default value: <p>Bayesian Binary Sensor</p>
</p></dd><dt><a class='title-link' name='observations' href='#observations'></a> observations</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>The observations which should influence the likelihood that the given event has occurred.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='platform' href='#platform'></a> platform</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The supported platforms are <code>state</code>, <code>numeric_state</code>, and <code>template</code>. They are modeled after their corresponding triggers for automations, requiring <code>to_state</code> (for <code>state</code>), <code>below</code> and/or <code>above</code> (for <code>numeric_state</code>) and <code>value_template</code> (for <code>template</code>).</p>
</span></p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name of the entity to monitor. Required for <code>state</code> and <code>numeric_state</code>.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines the template to be used. Required for <code>template</code>.</p>
</span></p></dd><dt><a class='title-link' name='prob_given_true' href='#prob_given_true'></a> prob_given_true</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Required)</span><span class='description'><p>The probability of the observation occurring, given the event is <code>true</code>.</p>
</span></p></dd><dt><a class='title-link' name='prob_given_false' href='#prob_given_false'></a> prob_given_false</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The probability of the observation occurring, given the event is <code>false</code> can be set as well.</p>
</span></p><p class='default'>
Default value: <p><code>1 - prob_given_true</code> if <code>prob_given_false</code> is not set</p>
</p></dd><dt><a class='title-link' name='to_state' href='#to_state'></a> to_state</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The target state. Required (for <code>state</code>).</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Full examples</h2>
<p>The following is an example for the <code>state</code> observation platform.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  name: 'in_bed'
  platform: 'bayesian'
  prior: 0.25
  probability_threshold: 0.95
  observations:
    - platform: 'state'
      entity_id: 'sensor.living_room_motion'
      prob_given_true: 0.4
      prob_given_false: 0.2
      to_state: 'off'
    - platform: 'state'
      entity_id: 'sensor.basement_motion'
      prob_given_true: 0.5
      prob_given_false: 0.4
      to_state: 'off'
    - platform: 'state'
      entity_id: 'sensor.bedroom_motion'
      prob_given_true: 0.5
      to_state: 'on'
    - platform: 'state'
      entity_id: 'sun.sun'
      prob_given_true: 0.7
      to_state: 'below_horizon'
</code></pre>
<p>Next up an example which targets the <code>numeric_state</code> observation platform,
as seen in the configuration it requires <code>below</code> and/or <code>above</code> instead of <code>to_state</code>.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  name: 'Heat On'
  platform: 'bayesian'
  prior: 0.2
  probability_threshold: 0.9
  observations:
    - platform: 'numeric_state'
      entity_id: 'sensor.outside_air_temperature_fahrenheit'
      prob_given_true: 0.95
      below: 50
</code></pre>
<p>Finally, hereâ€™s an example for <code>template</code> observation platform,
as seen in the configuration it requires <code>value_template</code> and does not use <code>entity_id</code>.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  name: 'Paulus Home'
  platform: 'bayesian'
  prior: 0.5
  probability_threshold: 0.9
  observations:
    - platform: template
      value_template: &gt;
        {{is_state('device_tracker.paulus','not_home') and ((as_timestamp(now()) - as_timestamp(states.device_tracker.paulus.last_changed)) &gt; 300)}}
      prob_given_true: 0.95
</code></pre>
:ET