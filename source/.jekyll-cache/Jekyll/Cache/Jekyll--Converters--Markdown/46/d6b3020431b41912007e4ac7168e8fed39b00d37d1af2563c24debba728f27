I"8<p>The <code>template</code> platform can create covers that combine integrations and provides
the ability to run scripts or invoke services for each of the open,
close, stop, position and tilt commands of a cover.</p>
<h2>Configuration</h2>
<p>To enable Template Covers in your installation,
add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
cover:
  - platform: template
    covers:
      garage_door:
        friendly_name: &quot;Garage Door&quot;
        value_template: &quot;{{ states('sensor.garage_door')|float &gt; 0 }}&quot;
        open_cover:
          service: script.open_garage_door
        close_cover:
          service: script.close_garage_door
        stop_cover:
          service: script.stop_garage_door
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='covers' href='#covers'></a> covers</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your covers.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of entity IDs so the cover only reacts to state changes of these entities. This can be used if the automatic analysis fails to find all relevant entities.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Exclusive)</span><span class='description'><p>Defines a template to get the state of the cover. Valid values are <code>open</code>/<code>true</code> or <code>closed</code>/<code>false</code>. <a href="#value_template"><code>value_template</code></a> and <a href="#position_template"><code>position_template</code></a> cannot be specified concurrently.</p>
</span></p></dd><dt><a class='title-link' name='position_template' href='#position_template'></a> position_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Exclusive)</span><span class='description'><p>Defines a template to get the state of the cover. Legal values are numbers between <code>0</code> (closed) and <code>100</code> (open). <a href="#value_template"><code>value_template</code></a> and <a href="#position_template"><code>position_template</code></a> cannot be specified concurrently.</p>
</span></p></dd><dt><a class='title-link' name='icon_template' href='#icon_template'></a> icon_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to specify which icon to use.</p>
</span></p></dd><dt><a class='title-link' name='availability_template' href='#availability_template'></a> availability_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the <code>available</code> state of the component. If the template returns <code>true</code>, the device is <code>available</code>. If the template returns any other value, the device will be <code>unavailable</code>. If <code>availability_template</code> is not configured, the component will always be <code>available</code>.</p>
</span></p><p class='default'>
Default value: <p>true</p>
</p></dd><dt><a class='title-link' name='device_class' href='#device_class'></a> device_class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Sets the <a href="/integrations/cover/">class of the device</a>, changing the device state and icon that is displayed on the frontend.</p>
</span></p></dd><dt><a class='title-link' name='open_cover' href='#open_cover'></a> open_cover</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Inclusive)</span><span class='description'><p>Defines an action to run when the cover is opened. If <a href="#open_cover"><code>open_cover</code></a> is specified, <a href="#close_cover"><code>close_cover</code></a> must also be specified. At least one of <a href="#open_cover"><code>open_cover</code></a> and <a href="#set_cover_position"><code>set_cover_position</code></a> must be specified.</p>
</span></p></dd><dt><a class='title-link' name='close_cover' href='#close_cover'></a> close_cover</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Inclusive)</span><span class='description'><p>Defines an action to run when the cover is closed.</p>
</span></p></dd><dt><a class='title-link' name='stop_cover' href='#stop_cover'></a> stop_cover</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines an action to run when the cover is stopped.</p>
</span></p></dd><dt><a class='title-link' name='set_cover_position' href='#set_cover_position'></a> set_cover_position</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines an action to run when the cover is set to a specific value (between <code>0</code> and <code>100</code>).</p>
</span></p></dd><dt><a class='title-link' name='set_cover_tilt_position' href='#set_cover_tilt_position'></a> set_cover_tilt_position</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines an action to run when the cover tilt is set to a specific value (between <code>0</code> and <code>100</code>).</p>
</span></p></dd><dt><a class='title-link' name='optimistic' href='#optimistic'></a> optimistic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Force cover position to use <a href="#optimistic-mode">optimistic mode</a>.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='tilt_optimistic' href='#tilt_optimistic'></a> tilt_optimistic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Force cover tilt position to use <a href="#optimistic-mode">optimistic mode</a>.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='tilt_template' href='#tilt_template'></a> tilt_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the tilt state of the cover. Legal values are numbers between <code>0</code> (closed) and <code>100</code> (open).</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Considerations</h2>
<p>If you are using the state of a platform that takes extra time to load, the
Template Cover may get an <code>unknown</code> state during startup. This results in error
messages in your log file until that platform has completed loading.
If you use <code>is_state()</code> function in your template, you can avoid this situation.
For example, you would replace
<code>{{ states.cover.source.state == 'open' }}</code>
with this equivalent that returns <code>true</code>/<code>false</code> and never gives an unknown
result:
<code>{{ is_state('cover.source', 'open') }}</code></p>
<h2>Optimistic Mode</h2>
<p>In optimistic mode, the cover position state is maintained internally. This mode
is automatically enabled if neither <a href="#value_template"><code>value_template</code></a> or
<a href="#position_template"><code>position_template</code></a> are specified. Note that this is
unlikely to be very reliable without some feedback mechanism, since there is
otherwise no way to know if the cover is moving properly. The cover can be
forced into optimistic mode by using the <a href="#optimistic"><code>optimistic</code></a> attribute.
There is an equivalent mode for <code>tilt_position</code> that is enabled when
<a href="#tilt_template"><code>tilt_template</code></a> is not specified or when the
<a href="#tilt_optimistic"><code>tilt_optimistic</code></a> attribute is used.</p>
<h2>Examples</h2>
<p>In this section you will find some real-life examples of how to use this cover.</p>
<h3>Garage Door</h3>
<p>This example converts a garage door with a controllable switch and position
sensor into a cover.</p>
<pre><code class="language-yaml">cover:
  - platform: template
    covers:
      garage_door:
        friendly_name: &quot;Garage Door&quot;
        position_template: &quot;{{ states('sensor.garage_door') }}&quot;
        open_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_door
        close_cover:
          service: switch.turn_off
          data:
            entity_id: switch.garage_door
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_door
        icon_template: &gt;-
          {% if states('sensor.garage_door')|float &gt; 0 %}
            mdi:garage-open
          {% else %}
            mdi:garage
          {% endif %}
</code></pre>
<h3>Multiple Covers</h3>
<p>This example allows you to control two or more covers at once.</p>
<pre><code class="language-yaml">homeassistant:
  customize:
    cover_group:
      assume_state: true

cover:
  - platform: template
    covers:
      cover_group:
        friendly_name: &quot;Cover Group&quot;
        open_cover:
          service: script.cover_group
          data:
            modus: 'open'
        close_cover:
          service: script.cover_group
          data:
            modus: 'close'
        stop_cover:
          service: script.cover_group
          data:
            modus: 'stop'
        set_cover_position:
          service: script.cover_group_position
          data_template:
            position: &quot;{{position}}&quot;
        value_template: &quot;{{is_state('sensor.cover_group', 'open')}}&quot;
        icon_template: &gt;-
          {% if is_state('sensor.cover_group', 'open') %}
            mdi:window-open
          {% else %}
            mdi:window-closed
          {% endif %}
        entity_id:
          - cover.bedroom
          - cover.livingroom

sensor:
  - platform: template
    sensors:
      cover_group:
        value_template: &gt;-
          {% if is_state('cover.bedroom', 'open') %}
            open
          {% elif is_state('cover.livingroom', 'open') %}
            open
          {% else %}
            closed
          {% endif %}

script:
  cover_group:
    sequence:
      - service_template: &quot;cover.{{modus}}_cover&quot;
        data:
          entity_id:
            - cover.bedroom
            - cover.livingroom
  cover_group_position:
    sequence:
      - service: cover.set_cover_position
        data_template:
          entity_id:
            - cover.bedroom
            - cover.livingroom
          position: &quot;{{position}}&quot;

automation:
  - alias: &quot;Close covers at night&quot;
    trigger:
      - platform: sun
        event: sunset
        offset: '+00:30:00'
    action:
      - service: cover.set_cover_position
        data:
          entity_id: cover.cover_group
          position: 25
</code></pre>
<h3>Change The Icon</h3>
<p>This example shows how to change the icon based on the cover state.</p>
<pre><code class="language-yaml">cover:
  - platform: template
    covers:
      cover_group:
        friendly_name: &quot;Cover Group&quot;
        open_cover:
          service: script.cover_group
          data:
            modus: 'open'
        close_cover:
          service: script.cover_group
          data:
            modus: 'close'
        stop_cover:
          service: script.cover_group
          data:
            modus: 'stop'
        value_template: &quot;{{is_state('sensor.cover_group', 'open')}}&quot;
        icon_template: &gt;-
          {% if is_state('sensor.cover_group', 'open') %}
            mdi:window-open
          {% else %}
            mdi:window-closed
          {% endif %}
</code></pre>
<h3>Change The Entity Picture</h3>
<p>This example shows how to change the entity picture based on the cover state.</p>
<pre><code class="language-yaml">cover:
  - platform: template
    covers:
      cover_group:
        friendly_name: &quot;Cover Group&quot;
        open_cover:
          service: script.cover_group
          data:
            modus: 'open'
        close_cover:
          service: script.cover_group
          data:
            modus: 'close'
        stop_cover:
          service: script.cover_group
          data:
            modus: 'stop'
        value_template: &quot;{{is_state('sensor.cover_group', 'open')}}&quot;
        icon_template: &gt;-
          {% if is_state('sensor.cover_group', 'open') %}
            /local/cover-open.png
          {% else %}
            /local/cover-closed.png
          {% endif %}
</code></pre>
:ET