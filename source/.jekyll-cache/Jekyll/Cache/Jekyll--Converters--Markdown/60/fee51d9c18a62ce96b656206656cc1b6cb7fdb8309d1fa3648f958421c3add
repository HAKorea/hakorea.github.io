I"Œ<p>If your Home Assistant instance is only accessible from your local network, you can still protect the communication between your browsers and the frontend with SSL/TLS.
<a href="/blog/2017/09/27/effortless-encryption-with-lets-encrypt-and-duckdns/">Let‚Äôs Encrypt</a> will only work if you have a DNS entry and remote access is allowed.</p>
<p>The solution is to use a self-signed certificate. Please note, however, that after you have completed these steps, your browser will complain about the security of the certificate as it was not issued by a trusted authority.</p>
<ul>
<li>This is due to self-signed certificates having not been issued by a certification authority (<a href="https://cheapsslsecurity.com/blog/what-is-a-certificate-authority-ca/"><code>CA</code></a>). If you have your own CA, then this will not be an issue.</li>
<li>A fantastic workaround for this, while keeping your instance isolated securely off the Internet, is to use a <a href="/docs/ecosystem/certificates/tls_domain_certificate/"><code>Certificate for SSL/TLS via domain ownership</code></a>.</li>
</ul>
<p>If you don‚Äôt mind the browser warnings and simply want SSL/TLS encryption and therefore have decided to use a self-signed certificate permanently or temporarily, read on!</p>
<p>If you use Chrome browser version 58 or above and/or <strong>don‚Äôt want to have issues regarding a non-trusted CA or CN (Common Name)</strong>, follow this full tutorial: <a href="https://gist.github.com/tiagofreire-pt/4920be8d03a3dfa8201c6afedd00305e">Create Root Certificate Authority and self-signed certificate for your Home Assistant. Compatible with Chrome browser &gt; version 58</a>. Otherwise, follow this:</p>
<p>To create a certificate locally, you need the <a href="https://www.openssl.org/">OpenSSL</a> command-line tool.</p>
<p>Change to your Home Assistant <a href="/getting-started/configuration/">configuration directory</a> like <code>~/.homeassistant</code>. This will make it easier to backup your certificate and the key. Run the command shown below.</p>
<p>The certificate <strong>must</strong> be <code>.pem</code> extension.</p>
<pre><code class="language-bash">openssl req -sha256 -newkey rsa:4096 -nodes -keyout privkey.pem -x509 -days 730 -out fullchain.pem
</code></pre>
<p>For details about the parameters, please check the OpenSSL documentation. Provide the requested information during the generation process.</p>
<p>At the end you will have two files called <code>privkey.pem</code> and <code>fullchain.pem</code>. The key and the certificate.</p>
<p>Update the <code>http:</code> entry in your <code>configuration.yaml</code> file and let it point to your created files.</p>
<p>Hass.io:</p>
<pre><code class="language-yaml">http:
  ssl_certificate: /ssl/fullchain.pem
  ssl_key: /ssl/privkey.pem
</code></pre>
<p>Non-Hass.io:</p>
<pre><code class="language-yaml">http:
  ssl_certificate: /home/your_user/.homeassistant/fullchain.pem
  ssl_key: /home/your_user/.homeassistant/privkey.pem
</code></pre>
<p>A restart of Home Assistant is required for the new certificate to take effect.</p>
<p>If you get any log error about <em>ssl_key</em> or <em>ssl_certificate</em> that is <strong>not a file for dictionary value</strong> when run Home Assistant, you need to change owner or access permission of the <code>.pem</code> files as following:</p>
<p>Hass.io (through Console or SSH plug-in):</p>
<pre><code class="language-bash">chown root:root fullchain.pem privkey.pem
chmod 600 fullchain.pem privkey.pem
</code></pre>
<p>Non-hass-io:</p>
<pre><code class="language-bash">sudo chown homeassistant:homeassistant fullchain.pem privkey.pem
sudo chmod 600 fullchain.pem privkey.pem
</code></pre>
<p>A tutorial ‚Äú<a href="https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs">Working with SSL Certificates, Private Keys and CSRs</a>‚Äù could give you some insight about special cases.</p>
<h2>iOS and macOS Specific Requirements</h2>
<h3>iOS</h3>
<p>If you are going to use this certificate with the iOS app, you need to ensure you complete <strong>all</strong> fields during the certificate creation process, then:</p>
<ul>
<li>Send <strong>only</strong> the <code>fullchain.pem</code> file to the iOS device, using airdrop or other transfer method.</li>
<li>Open the <code>.pem</code> file on the iOS device, follow the prompts to trust and install it.</li>
<li>If you are using iOS 10.3 or newer then <a href="https://support.apple.com/en-us/HT204477">additional steps</a> are needed.</li>
</ul>
<h3>iOS 13 and macOS 10.15</h3>
<p>There are <a href="https://support.apple.com/en-us/HT210176">new security requirements</a> for TLS server certificates in iOS 13 and macOS 10.15. To summarize:</p>
<ul>
<li>The key size must be greater than or equal to 2048 bits.</li>
<li>A hash algorithm from the SHA-2 family is required. SHA-1 signed certificates are no longer trusted for TLS.</li>
<li>The DNS name of the server must be included in the Subject Alternative Name extension of the certificate.</li>
<li>For certificates issued after July 1, 2019:
<ul>
<li>Certificates must contain an ExtendedKeyUsage (EKU) extension containing the id-kp-serverAuth OID.</li>
<li>Certificates must have a validity period of 825 days or fewer.</li>
</ul>
</li>
</ul>
:ET