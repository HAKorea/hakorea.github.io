I"Ñ<p>The <code>qwikswitch</code> integration is the main integration to integrate various <a href="https://www.qwikswitch.co.za/">QwikSwitch</a> devices with Home Assistant. The integration requires the QSUSB Modem device and connects to the QS Mobile application.</p>
<p>There is currently support for the following device types within Home Assistant:</p>
<ul>
<li>Binary Sensor</li>
<li>Light</li>
<li><a href="#qwikswitch-sensors">Sensor</a></li>
<li><a href="#switch">Switch</a></li>
</ul>
<p>The <code>qwikswitch</code> integration discovers all devices from QS Mobile. Currently, Relays and LED dimmers are discovered in Home Assistant. Relay devices are lights by default, and can be configured as <a href="#switch">switches</a>.</p>
<h2>Configuration</h2>
<pre><code class="language-yaml"># Example configuration.yaml entry
qwikswitch:
   url: http://127.0.0.1:2020
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='url' href='#url'></a> url</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The URL including the port of your QwikSwitch hub.</p>
</span></p></dd><dt><a class='title-link' name='dimmer_adjust' href='#dimmer_adjust'></a> dimmer_adjust</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A decimal value to adjust the brightness of the dimmer exponentially. Increasing this value allows dimmers that reach full brightness with low values in QS Mobile to appear more linear in Home Assistant. Recommended values between 1 and 2 and the default is 1.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='button_events' href='#button_events'></a> button_events</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A comma-separated list of button types that will generate events. See [QwikSwitch Events] for detail.</p>
</span></p><p class='default'>
Default value: <p>TOGGLE,SCENE EXE,LEVEL</p>
</p></dd><dt><a class='title-link' name='switches' href='#switches'></a> switches</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of device QS_idâ€™s that should be switches, and not lights (i.e. <code>['@0dev01', '@0dev02']</code>)</p>
</span></p></dd><dt><a class='title-link' name='sensors' href='#sensors'></a> sensors</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A dictionary of sensors.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='required'>(Required)</span><span class='description'><p>The sensor name from which the entity_id will be derived.</p>
</span></p></dd><dt><a class='title-link' name='id' href='#id'></a> id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>A QS_Id</p>
</span></p></dd><dt><a class='title-link' name='type' href='#type'></a> type</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The Qwikswitch sensor type. These could include:</p>
<ul>
<li>imod (binary_sensor, up to 6 channels)</li>
<li>door (binary_sensor, single channel)</li>
<li>qwikcord (Channel 1 = CTavg, Channel 2 = CTsum)</li>
</ul>
</span></p></dd><dt><a class='title-link' name='channel' href='#channel'></a> channel</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The channel of interest. Refer to type above.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='invert' href='#invert'></a> invert</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Invert the open/close state. Only applicable to binary_sensors</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='class' href='#class'></a> class</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The <a href="/integrations/binary_sensor/#device-class">class</a> or binary_sensor. Only applicable to binary_sensors.</p>
</span></p><p class='default'>
Default value: <p>door</p>
</p></dd></dl></dd></dl>
</div>
<h3>QwikSwitch Events</h3>
<p>QwikSwitch devices (i.e., transmitter buttons) will fire events on the Home Assistant bus. These events can then be used as triggers for any <code>automation</code> action, as follows:</p>
<pre><code class="language-yaml">automation:
  - alias: Action - Respond to A button press
    trigger:
      platform: event
      event_type: qwikswitch.button.@12df34
</code></pre>
<p><code>event_type</code> names should be in the format <strong>qwikswitch.button.@<em>QS_id</em></strong>. where <strong>@<em>QS_id</em></strong> will be captured in the Home Assistant log when pressing the button. Alternatively, you can also get the device ID from the QS Mobile application or by using the listen API call by browsing to <code>http://127.0.0.1:2020/&amp;listen</code> and then pressing the button.</p>
<p>The full packet from the QSUSB API will be passed as <code>data</code></p>
<p>By default events will be fired if the value in the command (cmd) field of the listen packet equals:</p>
<ul>
<li><code>TOGGLE</code> - Normal QwikSwitch Transmitter button</li>
<li><code>SCENE EXE</code> - QwikSwitch Scene Transmitter buttons</li>
<li><code>LEVEL</code> - QwikSwitch OFF Transmitter buttons</li>
</ul>
<p>The list of recognized commands can be extended for Keyfobs, door sensors, and PIR transmitters with the <strong>button_events</strong> configuration option. <strong>button_events</strong> can be a list or comma separated list of additional commands that will fire Home Assistant events. By default, it is: TOGGLE,SCENE EXE,LEVEL.</p>
<p>On some QS Mobile servers button events are only generated for switches added to the QS Mobile application, so it might be best to test button presses through the <code>/&amp;listen</code> API</p>
<h3>Qwikswitch Sensors</h3>
<p>The sensor configuration is a list of sensors. Depending on the type of sensor, it will be a sensor or binary_sensor.</p>
<p>Example sensor configuration:</p>
<pre><code class="language-yaml">qwikswitch:
  ...
  sensors:
    - name: door sensor
      id: &quot;@id03&quot;
      type: door
    - name: Imod 1 sensor
      id: &quot;@id02&quot;
      channel: 1
      type: imod
    - name: Imod 2 sensor
      id: &quot;@id02&quot;
      channel: 2
      type: imod
</code></pre>
<h3>Switch</h3>
<p>The <code>qwikswitch</code> platform allows you to control your <a href="https://www.qwikswitch.co.za/">QwikSwitch</a> relays as switches from within Home Assistant.</p>
<p>If the device name in the QS Mobile application ends with <code>Switch</code> it will be created as a switch, otherwise as a light.</p>
:ET