I"<p>Markdown card is used to render <a href="https://commonmark.org/help/">Markdown</a>.</p>
<p>The renderer uses <a href="https://marked.js.org">Marked.js</a>, which supports <a href="https://marked.js.org/#/README.md#specifications">several specifications of Markdown</a>, including CommonMark, GitHub Flavored Markdown (GFM) and <code>markdown.pl</code>.</p>
<p class='img'>
<img src='/images/lovelace/lovelace_markdown.png' alt='Screenshot of the markdown card'>
Screenshot of the markdown card.
</p>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='type' href='#type'></a> type</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>markdown</p>
</span></p></dd><dt><a class='title-link' name='content' href='#content'></a> content</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Content to render as <a href="https://commonmark.org/help/">Markdown</a>. May contain <a href="/docs/configuration/templating/">templates</a>.</p>
</span></p></dd><dt><a class='title-link' name='title' href='#title'></a> title</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The card title.</p>
</span></p><p class='default'>
Default value: <p>none</p>
</p></dd><dt><a class='title-link' name='card_size' href='#card_size'></a> card_size</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The algorithm for placing cards aesthetically in lovelace may have problems with the markdown card if it contains templates. You can use this value to help it estimate the height of the card in units of 50 pixels (approximately 3 lines of text in default size). (e.g., <code>4</code>)</p>
</span></p><p class='default'>
Default value: <p>none</p>
</p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of entity IDs so a template in <code>content:</code> only reacts to the state changes of these entities. This can be used if the automatic analysis fails to find all relevant entities.</p>
</span></p><p class='default'>
Default value: <p>none</p>
</p></dd><dt><a class='title-link' name='theme' href='#theme'></a> theme</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Set to any theme within <code>themes.yaml</code></p>
</span></p></dd></dl>
</div>
<h2>Example</h2>
<pre><code class="language-yaml">type: markdown
content: &gt;
  ## Lovelace

  Starting with Home Assistant 0.72, we're experimenting with a new way of defining your interface. We're calling it the **Lovelace UI**.
</code></pre>
<h2>Template variables</h2>
<p>A special template variable - <code>config</code> is set up for the <code>content</code> of the card. It contains the configuration of the card.</p>
<p>E.g.</p>
<pre><code class="language-yaml">type: entity-filter
entities:
  - light.bed_light
  - light.ceiling_lights
  - light.kitchen_lights
state_filter:
  - 'on'
card:
  type: markdown
  content: |
    The lights that are on are:
    {% for l in config.entities %}
      - {{ l.entity }}
    {%- endfor %}

    And the door is {% if is_state('binary_sensor.door', 'on') %} open {% else %} closed {% endif %}.
</code></pre>
:ET