I" <p>This integration allows you to write Python scripts that are exposed as services in Home Assistant. Each Python file created in the <code>&lt;config&gt;/python_scripts/</code> folder will be exposed as a service. The content is not cached so you can easily develop: edit file, save changes, call service. The scripts are run in a sandboxed environment. The following variables are available in the sandbox:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hass</code></td>
<td>The Home Assistant object. Access is only allowed to call services, set/remove states and fire events. <a href="/developers/development_hass_object/">API reference</a></td>
</tr>
<tr>
<td><code>data</code></td>
<td>The data passed to the Python Script service call.</td>
</tr>
<tr>
<td><code>logger</code></td>
<td>A logger to allow you to log messages: <code>logger.info()</code>, <code>logger.warning()</code>, <code>logger.error()</code>. <a href="https://docs.python.org/3.7/library/logging.html#logger-objects">API reference</a></td>
</tr>
</tbody>
</table>
<div class='note'>
<p>It is not possible to use Python imports with this integration. If you want to do more advanced scripts, you can take a look at <a href="/docs/ecosystem/appdaemon/">AppDaemon</a></p>
</div>
<h2>Writing your first script</h2>
<ul>
<li>Add to <code>configuration.yaml</code>: <code>python_script:</code></li>
<li>Create folder <code>&lt;config&gt;/python_scripts</code></li>
<li>Create a file <code>hello_world.py</code> in the folder and give it this content:</li>
</ul>
<pre><code class="language-python">name = data.get(&quot;name&quot;, &quot;world&quot;)
logger.info(&quot;Hello %s&quot;, name)
hass.bus.fire(name, {&quot;wow&quot;: &quot;from a Python script!&quot;})
</code></pre>
<ul>
<li>Start Home Assistant</li>
<li>Call service <code>python_script.hello_world</code> with parameters</li>
</ul>
<pre><code class="language-yaml">name: you
</code></pre>
<h2>Calling Services</h2>
<p>The following example shows how to call a service from <code>python_script</code>. This script takes two parameters: <code>entity_id</code> (required), <code>rgb_color</code> (optional) and calls <code>light.turn_on</code> service by setting the brightness value to <code>255</code>.</p>
<pre><code class="language-python"># turn_on_light.py
entity_id = data.get(&quot;entity_id&quot;)
rgb_color = data.get(&quot;rgb_color&quot;, [255, 255, 255])
if entity_id is not None:
    service_data = {&quot;entity_id&quot;: entity_id, &quot;rgb_color&quot;: rgb_color, &quot;brightness&quot;: 255}
    hass.services.call(&quot;light&quot;, &quot;turn_on&quot;, service_data, False)
</code></pre>
<p>The above <code>python_script</code> can be called using the following JSON as an input.</p>
<pre><code class="language-yaml">entity_id: light.bedroom
rgb_color: [255, 0, 0]
</code></pre>
<h2>Documenting your Python scripts</h2>
<p>You can add descriptions for your Python scripts that will be shown in the Call Services tab of the Developer Options page. To do so, simply create a <code>services.yaml</code> file in your <code>&lt;config&gt;/python_scripts</code> folder. Using the above Python script as an example, the <code>services.yaml</code> file would look like:</p>
<pre><code class="language-yaml"># services.yaml
turn_on_light:
  description: Turn on a light and set its color. 
  fields:
    entity_id:
      description: The light that will be turned on.
      example: light.bedroom
    rgb_color:
      description: The color to which the light will be set.
      example: [255, 0, 0]
</code></pre>
<p>For more examples, visit the <a href="https://community.home-assistant.io/c/projects/scripts">Scripts section</a> in our forum.</p>
:ET