I"<p>You can create scenes that capture the states you want certain entities to be. For example, a scene can specify that light A should be turned on and light B should be bright red.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
scene:
  - name: Romantic
    entities:
      light.tv_back_light: on
      light.ceiling:
        state: on
        xy_color: [0.33, 0.66]
        brightness: 200
  - name: Movies
    entities:
      light.tv_back_light:
        state: on
        brightness: 125
      light.ceiling: off
      media_player.sony_bravia_tv:
        state: on
        source: HDMI 1
        state: on
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Friendly name of scene.</p>
</span></p></dd><dt><a class='title-link' name='entities' href='#entities'></a> entities</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>Entities to control and their desired state.</p>
</span></p></dd></dl>
</div>
<p>As you can see, there are two ways to define the states of each <code>entity_id</code>:</p>
<ul>
<li>Define the <code>state</code> directly with the entity. Be aware, that <code>state</code> needs to be defined.</li>
<li>Define a complex state with its attributes. You can see all attributes available for a particular entity under <code>developer-tools -&gt; state</code>.</li>
</ul>
<p>Scenes can be activated using the service <code>scene.turn_on</code> (there is no ‘scene.turn_off’ service).</p>
<pre><code class="language-yaml"># Example automation
automation:
  trigger:
    platform: state
    entity_id: device_tracker.sweetheart
    from: &quot;not_home&quot;
    to: &quot;home&quot;
  action:
    service: scene.turn_on
    entity_id: scene.romantic
</code></pre>
<h2>Applying a scene without defining it</h2>
<p>With the <code>scene.apply</code> service you are able to apply a scene without first defining it via configuration. Instead, you pass the states as part of the service data. The format of the data is the same as the <code>entities</code> field in a configuration.</p>
<pre><code class="language-yaml"># Example automation
automation:
  trigger:
    platform: state
    entity_id: device_tracker.sweetheart
    from: &quot;not_home&quot;
    to: &quot;home&quot;
  action:
    service: scene.apply
    data:
      entities:
        light.tv_back_light:
          state: on
          brightness: 100
        light.ceiling: off
        media_player.sony_bravia_tv:
          state: on
          source: HDMI 1
</code></pre>
<h2>Reloading scenes</h2>
<p>Whenever you make a change to your scene configuration, you can call the <code>scene.reload</code> service to reload the scenes.</p>
:ET