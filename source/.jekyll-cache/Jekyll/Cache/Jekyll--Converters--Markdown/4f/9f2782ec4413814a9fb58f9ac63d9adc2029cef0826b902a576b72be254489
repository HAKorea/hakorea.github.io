I"k<p>The <code>pcal9535a</code> integration is the base for all related pcal9535a platforms in Home Assistant. There is no setup needed for the integration itself, for the platforms, please check their corresponding sections.</p>
<p>One of the use cases is <a href="http://wiki.seeedstudio.com/Raspberry_Pi_Relay_Board_v1.0/">Seeed studio Raspberry Pi Relay Board</a>.</p>
<p>For more details about the PCAL9535A I2C I/O port expander, you can find its datasheet here: <a href="https://www.nxp.com/docs/en/data-sheet/PCAL9535A.pdf">PCAL9535A</a>.</p>
<h2>Binary Sensor</h2>
<p>The <code>pcal9535a</code> binary sensor platform allows you to read sensor values from the I/O pins of your <a href="https://www.nxp.com/products/interfaces/ic-spi-serial-interface-devices/ic-general-purpose-i-o/low-voltage-16-bit-ic-bus-i-o-port-with-interrupt-and-agile-i-o:PCAL9535A">PCAL9535A I2C I/O expander</a>.</p>
<p>The pin numbers are from 0 to 15, where: 0-7 correspond to port P0 (P0_0 - P0_7) and 8-15 to port P1 (P1_0 - P1_7).</p>
<h3>Configuration</h3>
<p>To use the I/O pins of an PCAL9535A connected to an I2C bus of your Raspberry Pi as binary sensors, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
binary_sensor:
  - platform: pcal9535a
    pins:
      0: PIR Office
      1: PIR Bedroom
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='i2c_bus' href='#i2c_bus'></a> i2c_bus</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>i2c bus number of PCAL9535A chip.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='i2c_address' href='#i2c_address'></a> i2c_address</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>i2c address of PCAL9535A chip.</p>
</span></p><p class='default'>
Default value: <p><code>0x20</code></p>
</p></dd><dt><a class='title-link' name='pins' href='#pins'></a> pins</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of used pins.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='pin-name' href='#pin-name'></a> pin: name</dt><dd><p class='desc'><span class='type'>(<span class='integer string'>integer | string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The pin numbers (from 0 to 15) and corresponding names.</p>
</span></p></dd></dl></dd><dt><a class='title-link' name='invert_logic' href='#invert_logic'></a> invert_logic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If <code>true</code>, inverts the input logic to ACTIVE LOW.</p>
</span></p><p class='default'>
Default value: <p><code>false</code> (ACTIVE HIGH)</p>
</p></dd><dt><a class='title-link' name='pull_mode' href='#pull_mode'></a> pull_mode</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Type of internal pull resistor to use. Options are <code>UP</code> - pull-up resistor, <code>DOWN</code> - pull-down resistor, <code>DISABLED</code> - resistors disconnected.</p>
</span></p><p class='default'>
Default value: <p><code>DISABLED</code></p>
</p></dd></dl>
</div>
<h2>Switch</h2>
<p>The <code>pcal9535a</code> switch platform allows you to write to the I/O pins of your <a href="https://www.nxp.com/products/interfaces/ic-spi-serial-interface-devices/ic-general-purpose-i-o/low-voltage-16-bit-ic-bus-i-o-port-with-interrupt-and-agile-i-o:PCAL9535A">PCAL9535A I2C I/O expander</a>.</p>
<p>The pin numbers are from 0 to 15, where: 0-7 correspond to port P0 (P0_0 - P0_7) and 8-15 to port P1 (P1_0 - P1_7).</p>
<h3>Configuration</h3>
<p>To use the I/O pins of a PCAL9535A connected to an I2C bus of your Raspberry Pi as switches, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: pcal9535a
    pins:
      11: Fan Office
      12: Light Desk
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='i2c_bus' href='#i2c_bus'></a> i2c_bus</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>i2c bus number of PCAL9535A chip.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='i2c_address' href='#i2c_address'></a> i2c_address</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>i2c address of PCAL9535A chip.</p>
</span></p><p class='default'>
Default value: <p><code>0x20</code></p>
</p></dd><dt><a class='title-link' name='pins' href='#pins'></a> pins</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Required)</span><span class='description'><p>Array of used pins.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='pin' href='#pin'></a> pin</dt><dd><p class='desc'><span class='type'>(<span class='integer string'>integer | string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The pin numbers (from 0 to 15) and corresponding names.</p>
</span></p></dd></dl></dd><dt><a class='title-link' name='invert_logic' href='#invert_logic'></a> invert_logic</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>If true, inverts the output logic to ACTIVE LOW.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='strength' href='#strength'></a> strength</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Control the output drive level of the GPIO. Each GPIO can be configured independently to one of the four possible output current levels. By programming these bits, the user is changing the number of transistor pairs or â€˜fingersâ€™ that drive the I/O pad. Options are <code>0.25</code>, <code>0.5</code>, <code>0.75</code>, <code>1.0</code>.</p>
</span></p><p class='default'>
Default value: <p><code>1.0</code></p>
</p></dd></dl>
</div>
:ET