I"¨)<p>The <code>harmony</code> remote platform allows you to control the state of your <a href="https://www.logitech.com/en-us/product/harmony-hub">Harmony Hub Device</a>.</p>
<p>Supported units:</p>
<ul>
<li>Harmony Hub</li>
<li>Harmony Companion</li>
<li>Harmony Pro</li>
<li>Harmony Elite</li>
</ul>
<p>The preferred way to setup the Harmony remote is by enabling the <a href="/integrations/discovery/">discovery component</a>.</p>
<p>However, if you want to manually configure the device, you will need to add its settings to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
remote:
  - platform: harmony
    name: Bedroom
    host: 10.168.1.13
</code></pre>
<p>You can override some default configuration values on a discovered hub (e.g., the <code>port</code> or <code>activity</code>) by adding a <code>configuration.yaml</code> setting. In this case leave the <code>host</code> setting empty so the platform will discover the host IP automatically, but set the <code>name</code> in the config to match exactly the name you have set for your Hub so the platform knows what Hub you are trying to configure.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry with discovery
  - platform: harmony
    name: Living Room
    activity: Watch TV
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The hub‚Äôs name to display in the frontend. This name must match the name you have set on the Hub.</p>
</span></p></dd><dt><a class='title-link' name='host' href='#host'></a> host</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The Harmony device‚Äôs IP address. Leave empty for the IP to be discovered automatically.</p>
</span></p></dd><dt><a class='title-link' name='port' href='#port'></a> port</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The Harmony device‚Äôs port.</p>
</span></p><p class='default'>
Default value: <p>5222</p>
</p></dd><dt><a class='title-link' name='activity' href='#activity'></a> activity</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Activity to use when <code>turn_on</code> service is called without any data. Overrides the <code>activity</code> setting for this discovered hub.</p>
</span></p></dd><dt><a class='title-link' name='delay_secs' href='#delay_secs'></a> delay_secs</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Default duration in seconds between sending commands to a device.</p>
</span></p><p class='default'>
Default value: <p>0.4</p>
</p></dd><dt><a class='title-link' name='hold_secs' href='#hold_secs'></a> hold_secs</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Default duration in seconds between sending the ‚Äúpress‚Äù command and sending the ‚Äúrelease‚Äù command.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd></dl>
</div>
<h3>Configuration file</h3>
<p>Upon startup one file will be written to your Home Assistant configuration directory per device in the following format: <code>harmony_REMOTENAME.conf</code>. The file will contain:</p>
<ul>
<li>List of all programmed activity names and ID numbers</li>
<li>List of all programmed device names and ID numbers</li>
<li>List of all available commands per programmed device</li>
</ul>
<p>This file will be overwritten whenever the Harmony HUB has a new configuration, there is no need to restart Home Assistant.</p>
<h3>Service <code>remote.turn_off</code></h3>
<p>Turn off all devices that were switched on from the start of the current activity.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID to target.</td>
</tr>
</tbody>
</table>
<h3>Service <code>remote.turn_on</code></h3>
<p>Start an activity. Will start the default <code>activity</code> from configuration.yaml if no activity is specified.  The specified activity can either be the activity name or the activity ID from the configuration file written to your <a href="/docs/configuration/">Home Assistant configuration directory</a>.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID to target.</td>
</tr>
<tr>
<td><code>activity</code></td>
<td>yes</td>
<td>Activity ID or Activity Name to start.</td>
</tr>
</tbody>
</table>
<h5>Example</h5>
<p>In the file ‚Äòharmony_REMOTENAME.conf‚Äô you can find the available activities, for example:</p>
<pre><code class="language-text">{
    &quot;Activities&quot;: {
        &quot;-1&quot;: &quot;PowerOff&quot;,
        &quot;20995306&quot;: &quot;Watch TV&quot;,
        &quot;20995307&quot;: &quot;Play Games&quot;,
        &quot;20995308&quot;: &quot;Listen Music&quot;
    }
}
</code></pre>
<p>Using the activity name ‚ÄòWatch TV‚Äô, you can call a service via automation to switch this activity on:</p>
<pre><code class="language-yaml">action:
  - service: remote.turn_on
    entity_id: remote.bed_room_hub
    data:
       activity: &quot;Watch TV&quot;
</code></pre>
<h3>Service <code>remote.send_command</code></h3>
<p>Send a single command or a set of commands to one device, device ID and available commands are written to the configuration file at startup. You can optionally specify the number of times you wish to repeat the command(s) and delay you want between repeated command(s).</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID to target.</td>
</tr>
<tr>
<td><code>device</code></td>
<td>no</td>
<td>Device ID or Device Name to send the command to.</td>
</tr>
<tr>
<td><code>command</code></td>
<td>no</td>
<td>A single command or a list of commands to send.</td>
</tr>
<tr>
<td><code>num_repeats</code></td>
<td>yes</td>
<td>The number of times to repeat the command(s).</td>
</tr>
<tr>
<td><code>delay_secs</code></td>
<td>yes</td>
<td>The number of seconds between sending each command.</td>
</tr>
</tbody>
</table>
<p>In the file ‚Äòharmony_REMOTENAME.conf‚Äô you can find the available devices and commands, for example:</p>
<pre><code class="language-text">{
    &quot;Devices&quot;: {
        &quot;TV&quot;: {
            &quot;commands&quot;: [
                &quot;PowerOff&quot;,
                &quot;PowerOn&quot;
            ],
            &quot;id&quot;: &quot;327297814&quot;
        },
        &quot;Receiver&quot;: {
            &quot;commands&quot;: [
                &quot;PowerOff&quot;,
                &quot;PowerOn&quot;,
                &quot;VolumeUp&quot;,
                &quot;VolumeDown&quot;,
                &quot;Mute&quot;
            ],
            &quot;id&quot;: &quot;428297615&quot;
        }
    }
}
</code></pre>
<p>A typical service call for sending several button presses looks like this:</p>
<pre><code class="language-yaml">service: remote.send_command
data:
  entity_id: remote.tv_room
  command:
    - PowerOn
    - Mute
  device: Receiver
  delay_secs: 0.6
</code></pre>
<p>OR</p>
<pre><code class="language-yaml">service: remote.send_command
data:
  entity_id: remote.tv_room
  command:
    - PowerOn
    - Mute
  device: 428297615
  delay_secs: 0.6
</code></pre>
<h3>Service <code>harmony.change_channel</code></h3>
<p>Sends the change channel command to the Harmony HUB</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID to target.</td>
</tr>
<tr>
<td><code>channel</code></td>
<td>no</td>
<td>Channel number to change to</td>
</tr>
</tbody>
</table>
<p>A typical service call for changing the channel would be::</p>
<pre><code class="language-yaml">service: harmony.change_channel
data:
  entity_id: remote.tv_room
  channel: 200
</code></pre>
<h3>Service <code>harmony.sync</code></h3>
<p>Force synchronization between the Harmony device and the Harmony cloud.</p>
<table>
<thead>
<tr>
<th>Service data attribute</th>
<th>Optional</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>entity_id</code></td>
<td>no</td>
<td>Entity ID to target.</td>
</tr>
</tbody>
</table>
<h3>Examples</h3>
<p>Template sensors can be utilized to display current activity in the frontend.</p>
<pre><code class="language-yaml">sensor:
  - platform: template
    sensors:
      family_room:
        value_template: '{{ state_attr(&quot;remote.family_room&quot;, &quot;current_activity&quot;) }}'
        friendly_name: 'Family Room'
      bedroom:
        value_template: '{{ state_attr(&quot;remote.bedroom&quot;, &quot;current_activity&quot;) }}'
        friendly_name: 'bedroom'
</code></pre>
<p>The example below shows how to control an <code>input_boolean</code> switch using the Harmony remote‚Äôs current activity. The switch will turn on when the remote‚Äôs state changes and the Kodi activity is started and off when the remote‚Äôs state changes and the current activity is ‚ÄúPowerOff‚Äù.</p>
<pre><code class="language-yaml">automation:
  - alias: &quot;Watch TV started from harmony hub&quot;
    trigger:
      platform: state
      entity_id: remote.family_room
    condition:
      condition: template
      value_template: '{{ trigger.to_state.attributes.current_activity == &quot;Kodi&quot; }}'
    action:
      service: input_boolean.turn_on
      entity_id: input_boolean.notify
  - alias: &quot;PowerOff started from harmony hub&quot;
    trigger:
      platform: state
      entity_id: remote.family_room
    condition:
      condition: template
      value_template: '{{ trigger.to_state.attributes.current_activity == &quot;PowerOff&quot; }}'
    action:
      service: input_boolean.turn_off
      entity_id: input_boolean.notify
</code></pre>
:ET