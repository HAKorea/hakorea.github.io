I"¬!<p>The <code>template</code> platform creates switches that combines components.</p>
<p>For example, if you have a garage door with a toggle switch that operates the motor and a sensor that allows you know whether the door is open or closed, you can combine these into a switch that knows whether the garage door is open or closed.</p>
<p>This can simplify the GUI and make it easier to write automations. You can mark the integrations you have combined as <code>hidden</code> so they donâ€™t appear themselves.</p>
<h2>Configuration</h2>
<p>To enable Template Switches in your installation, add the following to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  - platform: template
    switches:
      skylight:
        value_template: &quot;{{ is_state('sensor.skylight', 'on') }}&quot;
        turn_on:
          service: switch.turn_on
          data:
            entity_id: switch.skylight_open
        turn_off:
          service: switch.turn_off
          data:
            entity_id: switch.skylight_close
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='switches' href='#switches'></a> switches</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>List of your switches.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='friendly_name' href='#friendly_name'></a> friendly_name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='entity_id' href='#entity_id'></a> entity_id</dt><dd><p class='desc'><span class='type'>(<span class='string list'>string | list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of entity IDs so the switch only reacts to state changes of these entities. This can be used if the automatic analysis fails to find all relevant entities.</p>
</span></p></dd><dt><a class='title-link' name='value_template' href='#value_template'></a> value_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines a template to set the state of the switch.</p>
</span></p></dd><dt><a class='title-link' name='availability_template' href='#availability_template'></a> availability_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template to get the <code>available</code> state of the component. If the template returns <code>true</code>, the device is <code>available</code>. If the template returns any other value, the device will be <code>unavailable</code>. If <code>availability_template</code> is not configured, the component will always be <code>available</code>.</p>
</span></p><p class='default'>
Default value: <p>true</p>
</p></dd><dt><a class='title-link' name='turn_on' href='#turn_on'></a> turn_on</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines an action to run when the switch is turned on.</p>
</span></p></dd><dt><a class='title-link' name='turn_off' href='#turn_off'></a> turn_off</dt><dd><p class='desc'><span class='type'>(<span class='action'><a href="/docs/scripts/">action</a></span>)</span><span class='required'>(Required)</span><span class='description'><p>Defines an action to run when the switch is turned off.</p>
</span></p></dd><dt><a class='title-link' name='icon_template' href='#icon_template'></a> icon_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for the icon of the switch.</p>
</span></p></dd><dt><a class='title-link' name='entity_picture_template' href='#entity_picture_template'></a> entity_picture_template</dt><dd><p class='desc'><span class='type'>(<span class='template'><a href="/docs/configuration/templating/">template</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Defines a template for the picture of the switch.</p>
</span></p></dd></dl></dd></dl>
</div>
<h2>Considerations</h2>
<p>If you are using the state of a platform that takes extra time to load, the Template Switch may get an <code>unknown</code> state during startup. This results in error messages in your log file until that platform has completed loading. If you use <code>is_state()</code> function in your template, you can avoid this situation. For example, you would replace <code>{{ states.switch.source.state == 'on') }}</code> with this equivalent that returns <code>true</code>/<code>false</code> and never gives an unknown result: <code>{{ is_state('switch.source', 'on') }}</code></p>
<h2>Examples</h2>
<p>In this section you find some real-life examples of how to use this switch.</p>
<h3>Copy Switch</h3>
<p>This example shows a switch that copies another switch.</p>
<pre><code class="language-yaml">switch:
  - platform: template
    switches:
      copy:
        value_template: &quot;{{ is_state('switch.source', 'on') }}&quot;
        turn_on:
          service: switch.turn_on
          data:
            entity_id: switch.target
        turn_off:
          service: switch.turn_off
          data:
            entity_id: switch.target
</code></pre>
<h3>Toggle Switch</h3>
<p>This example shows a switch that takes its state from a sensor and toggles a switch.</p>
<pre><code class="language-yaml">switch:
  - platform: template
    switches:
      blind:
        friendly_name: &quot;Blind&quot;
        value_template: &quot;{{ is_state_attr('switch.blind_toggle', 'sensor_state', 'on') }}&quot;
        turn_on:
          service: switch.toggle
          data:
            entity_id: switch.blind_toggle
        turn_off:
          service: switch.toggle
          data:
            entity_id: switch.blind_toggle
</code></pre>
<h3>Sensor and Two Switches</h3>
<p>This example shows a switch that takes its state from a sensor, and uses two
momentary switches to control a device.</p>
<pre><code class="language-yaml">switch:
  - platform: template
    switches:
      skylight:
        friendly_name: &quot;Skylight&quot;
        value_template: &quot;{{ is_state('sensor.skylight', 'on') }}&quot;
        turn_on:
          service: switch.turn_on
          data:
            entity_id: switch.skylight_open
        turn_off:
          service: switch.turn_on
          data:
            entity_id: switch.skylight_close
</code></pre>
<h3>Change The Icon</h3>
<p>This example shows how to change the icon based on the day/night cycle.</p>
<pre><code class="language-yaml">switch:
  - platform: template
    switches:
      garage:
        value_template: &quot;{{ is_state('cover.garage_door', 'on') }}&quot;
        turn_on:
          service: cover.open_cover
          data:
            entity_id: cover.garage_door
        turn_off:
          service: cover.close_cover
          data:
            entity_id: cover.garage_door
        icon_template: &gt;-
          {% if is_state('cover.garage_door', 'open') %}
            mdi:garage-open
          {% else %}
            mdi:garage
          {% endif %}
</code></pre>
<h3>Change The Entity Picture</h3>
<p>This example shows how to change the entity picture based on the day/night cycle.</p>
<pre><code class="language-yaml">switch:
  - platform: template
    switches:
      garage:
        value_template: &quot;{{ is_state('cover.garage_door', 'on') }}&quot;
        turn_on:
          service: cover.open_cover
          data:
            entity_id: cover.garage_door
        turn_off:
          service: cover.close_cover
          data:
            entity_id: cover.garage_door
        entity_picture_template: &gt;-
          {% if is_state('cover.garage_door', 'open') %}
            /local/garage-open.png
          {% else %}
            /local/garage-closed.png
          {% endif %}
</code></pre>
:ET