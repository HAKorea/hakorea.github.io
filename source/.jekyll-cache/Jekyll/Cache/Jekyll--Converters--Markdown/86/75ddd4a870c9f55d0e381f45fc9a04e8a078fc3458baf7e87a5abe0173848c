I"ê<p>Integrates MySensors switches into Home Assistant. See the <a href="/integrations/mysensors/">main component</a> for configuration instructions.</p>
<h2>Supported actuator types</h2>
<p>The following actuator types are supported:</p>
<h3>MySensors version 1.4 and higher</h3>
<table>
<thead>
<tr>
<th>S_TYPE</th>
<th>V_TYPE</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_DOOR</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_MOTION</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_SMOKE</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_LIGHT</td>
<td>V_LIGHT</td>
</tr>
<tr>
<td>S_LOCK</td>
<td>V_LOCK_STATUS</td>
</tr>
<tr>
<td>S_IR</td>
<td>V_IR_SEND, V_LIGHT</td>
</tr>
</tbody>
</table>
<h3>MySensors version 1.5 and higher</h3>
<table>
<thead>
<tr>
<th>S_TYPE</th>
<th>V_TYPE</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_LIGHT</td>
<td>V_STATUS</td>
</tr>
<tr>
<td>S_BINARY</td>
<td>[V_STATUS or V_LIGHT]</td>
</tr>
<tr>
<td>S_SPRINKLER</td>
<td>V_STATUS</td>
</tr>
<tr>
<td>S_WATER_LEAK</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_SOUND</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_VIBRATION</td>
<td>V_ARMED</td>
</tr>
<tr>
<td>S_MOISTURE</td>
<td>V_ARMED</td>
</tr>
</tbody>
</table>
<h3>MySensors version 2.0 and higher</h3>
<table>
<thead>
<tr>
<th>S_TYPE</th>
<th>V_TYPE</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_WATER_QUALITY</td>
<td>V_STATUS</td>
</tr>
</tbody>
</table>
<p>All V_TYPES for each S_TYPE above are required to activate the actuator for the platform. Use either V_LIGHT or V_STATUS depending on library version for cases where that V_TYPE is required.</p>
<p>For more information, visit the <a href="https://www.mysensors.org/download">serial api</a> of MySensors.</p>
<h2>Services</h2>
<p>The MySensors switch platform exposes a service to change an IR code attribute for an IR switch device and turn the switch on. The IR switch will automatically be turned off after being turned on, if <code>optimistic</code> is set to <code>true</code> in the <a href="/integrations/mysensors/#configuration">config</a> for the MySensors component. This will simulate a push button on a remote. If <code>optimistic</code> is <code>false</code>, the MySensors device will have to report its updated state to reset the switch. See the <a href="#ir-switch-sketch">example sketch</a> for the IR switch below.</p>
<table>
<thead>
<tr>
<th>Service</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>mysensors.send_ir_code</td>
<td>Set an IR code as a state attribute for a MySensors IR device switch and turn the switch on.</td>
</tr>
</tbody>
</table>
<p>The service can be used as part of an automation script. For example:</p>
<pre><code class="language-yaml"># Example configuration.yaml automation entry
automation:
  - alias: Turn HVAC on
    trigger:
      platform: time
      at: '5:30:00'
    action:
      service: mysensors.send_ir_code
      entity_id: switch.hvac_1_1
      data:
        V_IR_SEND: '0xC284'  # the IR code to send

  - alias: Turn HVAC off
    trigger:
      platform: time
      at: '0:30:00'
    action:
      service: mysensors.send_ir_code
      entity_id: switch.hvac_1_1
      data:
        V_IR_SEND: '0xC288'  # the IR code to send
</code></pre>
<h2>Example sketches</h2>
<h3>Switch sketch</h3>
<pre><code class="language-cpp">/*
 * Documentation: https://www.mysensors.org
 * Support Forum: https://forum.mysensors.org
 *
 * https://www.mysensors.org/build/relay
 */

#include &lt;MySensor.h&gt;
#include &lt;SPI.h&gt;

#define SN &quot;Relay&quot;
#define SV &quot;1.0&quot;
#define CHILD_ID 1
#define RELAY_PIN 3

MySensor gw;
MyMessage msgRelay(CHILD_ID, V_STATUS);

void setup()
{
  gw.begin(incomingMessage);
  gw.sendSketchInfo(SN, SV);
  // Initialize the digital pin as an output.
  pinMode(RELAY_PIN, OUTPUT);
  gw.present(CHILD_ID, S_BINARY);
  gw.send(msgRelay.set(0));
}

void loop()
{
  gw.process();
}

void incomingMessage(const MyMessage &amp;message)
{
  if (message.type == V_STATUS) {
     // Change relay state.
     digitalWrite(RELAY_PIN, message.getBool() ? 1 : 0);
     gw.send(msgRelay.set(message.getBool() ? 1 : 0));
  }
}
</code></pre>
<h3>IR switch sketch</h3>
<pre><code class="language-cpp">/*
 * Documentation: https://www.mysensors.org
 * Support Forum: https://forum.mysensors.org
 *
 * https://www.mysensors.org/build/ir
 */

#include &lt;MySensor.h&gt;
#include &lt;SPI.h&gt;
#include &lt;IRLib.h&gt;

#define SN &quot;IR Sensor&quot;
#define SV &quot;1.0&quot;
#define CHILD_ID 1

MySensor gw;

char code[10] = &quot;abcd01234&quot;;
char oldCode[10] = &quot;abcd01234&quot;;
MyMessage msgCodeRec(CHILD_ID, V_IR_RECEIVE);
MyMessage msgCode(CHILD_ID, V_IR_SEND);
MyMessage msgSendCode(CHILD_ID, V_LIGHT);

void setup()
{
  gw.begin(incomingMessage);
  gw.sendSketchInfo(SN, SV);
  gw.present(CHILD_ID, S_IR);
  // Send initial values.
  gw.send(msgCodeRec.set(code));
  gw.send(msgCode.set(code));
  gw.send(msgSendCode.set(0));
}

void loop()
{
  gw.process();
  // IR receiver not implemented, just a dummy report of code when it changes
  if (String(code) != String(oldCode)) {
    Serial.print(&quot;Code received &quot;);
    Serial.println(code);
    gw.send(msgCodeRec.set(code));
    strcpy(oldCode, code);
  }
}

void incomingMessage(const MyMessage &amp;message) {
  if (message.type==V_LIGHT) {
    // IR sender not implemented, just a dummy print.
    if (message.getBool()) {
      Serial.print(&quot;Sending code &quot;);
      Serial.println(code);
    }
    gw.send(msgSendCode.set(message.getBool() ? 1 : 0));
    // Always turn off device
    gw.wait(100);
    gw.send(msgSendCode.set(0));
  }
  if (message.type == V_IR_SEND) {
    // Retrieve the IR code value from the incoming message.
    String codestring = message.getString();
    codestring.toCharArray(code, sizeof(code));
    Serial.print(&quot;Changing code to &quot;);
    Serial.println(code);
    gw.send(msgCode.set(code));
  }
}
</code></pre>
:ET