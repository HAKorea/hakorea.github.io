I"	J<p>The <code>html5</code> notification platform enables you to receive push notifications to Chrome or Firefox, no matter where you are in the world. <code>html5</code> also supports Chrome and Firefox on Android, which enables native-app-like integrations without actually needing a native app.</p>
<div class='note'>
<p>HTML5 push notifications <strong>do not</strong> work on iOS.</p>
</div>
<div class='note warning'>
<p>The GCM configuration option is deprecated and stopped working in May 2019, see <a href="https://developers.google.com/cloud-messaging/faq">https://developers.google.com/cloud-messaging/faq</a>. If you are installing this platform for the first time, follow the VAPID configuration steps. To migrate your current installation from GCM to VAPID configuration, follow the instructions below. You can skip the first 3 steps and continue in step 4 with your existing project. You will also need to delete <code>html5_push_registrations.conf</code> and <a href="#setting-up-your-browser">re-enable the notifications in your browser</a>.</p>
</div>
<h2>Configuration</h2>
<p>To enable this platform, add the following lines to your <code>configuration.yaml</code> file:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
notify:
  - platform: html5
    name: NOTIFIER_NAME
    vapid_pub_key: YOUR_PUBLIC_KEY
    vapid_prv_key: YOUR_PRIVATE_KEY
    vapid_email: YOUR_EMAIL
</code></pre>
<p>Or</p>
<pre><code class="language-yaml"># Example configuration.yaml entry. 
# Warning: this option will be deprecated soon!
notify:
  - platform: html5
    name: NOTIFIER_NAME
    gcm_api_key: YOUR_API_KEY
    gcm_sender_id: YOUR_SENDER_ID
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Setting the optional parameter <code>name</code> allows multiple notifiers to be created. The notifier will bind to the service <code>notify.NOTIFIER_NAME</code>.</p>
</span></p><p class='default'>
Default value: <p>notify</p>
</p></dd><dt><a class='title-link' name='vapid_pub_key' href='#vapid_pub_key'></a> vapid_pub_key</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The VAPID public key generated by Google (this is the key that is immediately visible under “webpush certificates”), <a href="#configuring-the-platform">see configuring the platform</a>.</p>
</span></p></dd><dt><a class='title-link' name='vapid_prv_key' href='#vapid_prv_key'></a> vapid_prv_key</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The VAPID private key generated by Google, <a href="#configuring-the-platform">see configuring the platform</a>.</p>
</span></p></dd><dt><a class='title-link' name='vapid_email' href='#vapid_email'></a> vapid_email</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The e-mail account associated with your Firebase project, <a href="#configuring-the-platform">see configuring the platform</a>.</p>
</span></p></dd><dt><a class='title-link' name='gcm_api_key' href='#gcm_api_key'></a> gcm_api_key</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The API Server key provided to you by Google for Google Cloud Messaging (GCM).</p>
</span></p></dd><dt><a class='title-link' name='gcm_sender_id' href='#gcm_sender_id'></a> gcm_sender_id</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The sender ID provided to you by Google for Google Cloud Messaging (GCM).</p>
</span></p></dd></dl>
</div>
<h3>Requirements</h3>
<p>The <code>html5</code> platform can only function if all of the following requirements are met:</p>
<ul>
<li>You are using Chrome and/or Firefox on any desktop platform, ChromeOS or Android.</li>
<li>Your Home Assistant instance is accessible from outside your network over HTTPS or can perform an alternative <a href="https://support.google.com/webmasters/answer/9008080#domain_name_verification">Domain Name Verification Method</a> on the domain used by Home Assistant.</li>
<li>If using a proxy, HTTP basic authentication must be off for registering or unregistering for push notifications. It can be re-enabled afterwards.</li>
<li>If you don’t run Hass.io: <code>pywebpush</code> must be installed. <code>libffi-dev</code>, <code>libpython-dev</code> and <code>libssl-dev</code> must be installed prior to <code>pywebpush</code> (i.e. <code>pywebpush</code> probably won’t automatically install).</li>
<li>You have configured SSL/TLS for your Home Assistant. It doesn’t need to be configured in Home Assistant though, e.g., you can be running <a href="/ecosystem/nginx/">NGINX</a> in front of Home Assistant and this will still work. The certificate must be trustworthy (i.e. not self signed).</li>
<li>You are willing to accept the notification permission in your browser.</li>
</ul>
<h3>Configuring the platform</h3>
<ol>
<li>Make sure you can access your Home Assistant installation from outside your network over HTTPS (<a href="/docs/configuration/remote/">see docs</a>) or can perform an alternative <a href="https://support.google.com/webmasters/answer/9008080#domain_name_verification">Domain Name Verification Method</a> on the domain used by Home Assistant.</li>
<li>Create a new project at <a href="https://console.cloud.google.com/home/dashboard">https://console.cloud.google.com/home/dashboard</a>, this project will be imported into Firebase later (alternatively, the project can also be created during step 4).</li>
<li>Go to <a href="https://console.cloud.google.com/apis/credentials/domainverification">https://console.cloud.google.com/apis/credentials/domainverification</a> and verify your domain via Google Webmaster Central / Search Console - <a href="#verify-your-domain">see below</a>.</li>
<li>With the domain verified, go to <a href="https://console.firebase.google.com">https://console.firebase.google.com</a>, select import Google project and select the project you created.</li>
<li>Then, click the cogwheel on top left and select “Project settings”.</li>
<li>Select ‘Cloud Messaging’ tab.</li>
<li>Generate a new key pair under the Web configuration listing at the bottom of the page. To view the private key click the three dots to the right and ‘Show private key’.</li>
</ol>
<h3>Setting up your browser</h3>
<p>Assuming you have already configured the platform:</p>
<ol>
<li>Open Home Assistant in Chrome or Firefox.</li>
<li>Load profile page by clicking on the badge next to the Home Assistant title in the sidebar. Assuming you have met all the <a href="#requirements">requirements</a> above then you should see a new slider for Push Notifications. If the slider is greyed out, ensure you are viewing Home Assistant via its external HTTPS address. If the slider is not visible, ensure you are not in the user configuration (Sidebar, Configuration, Users, View User).</li>
<li>Slide it to the on position.</li>
<li>Name the device you’re using in the alert that appears.</li>
<li>Within a few seconds you should be prompted to allow notifications from Home Assistant.</li>
<li>Assuming you accept, that’s all there is to it!</li>
</ol>
<p><strong>Note:</strong> If you aren’t prompted for a device name when enabling notifications, open the <code>html5_push_registrations.conf</code> file in your configuration directory. You will see a new entry for the browser you just added. Rename it from <code>unnamed device</code> to a name of your choice, which will make it easier to identify later. <em>Do not change anything else in this file!</em> You need to restart Home Assistant after making any changes to the file.</p>
<h3>Testing</h3>
<p>Assuming the previous test completed successfully and your browser was registered, you can test the notification as follows:</p>
<ol>
<li>Open Home Assistant in Chrome or Firefox.</li>
<li>Open the sidebar and click the Services button at the bottom (shaped like a remote control), located below the Developer Tools.</li>
<li>From the Services dropdown, search for your HTML5 notify service (e.g., notify.NOTIFIER_NAME) and select it.</li>
<li>In the Service Data text box enter: <code>{&quot;message&quot;:&quot;hello world&quot;}</code>, then press the CALL SERVICE button.</li>
<li>If everything worked you should see a popup notification.</li>
</ol>
<h3>Usage</h3>
<p>The <code>html5</code> platform accepts a standard notify payload. However, there are also some special features built in which you can control in the payload.</p>
<h4>Actions</h4>
<p>Chrome supports notification actions, which are configurable buttons that arrive with the notification and can cause actions on Home Assistant to happen when pressed. You can send up to 2 actions.</p>
<pre><code class="language-yaml">message: Anne has arrived home
data:
  actions:
    - action: open
      icon: &quot;/static/icons/favicon-192x192.png&quot;
      title: Open Home Assistant
    - action: open_door
      title: Open door
</code></pre>
<h4>Data</h4>
<p>Any parameters that you pass in the notify payload that aren’t valid for use in the HTML5 notification (<code>actions</code>, <code>badge</code>, <code>body</code>, <code>dir</code>, <code>icon</code>, <code>image</code>, <code>lang</code>, <code>renotify</code>, <code>requireInteraction</code>, <code>tag</code>, <code>timestamp</code>, <code>vibrate</code>, <code>priority</code>, <code>ttl</code>) will be sent back to you in the <a href="#automating-notification-events">callback events</a>.</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
data:
  my-custom-parameter: front-door-open
</code></pre>
<h4>Tag</h4>
<p>By default, every notification sent has a randomly generated UUID (v4) set as its <em>tag</em> or unique identifier. The tag is unique to the notification, <em>not</em> to a specific target. If you pass your own tag in the notify payload you can replace the notification by sending another notification with the same tag. You can provide a <code>tag</code> like so:</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
data:
  tag: front-door-notification
</code></pre>
<p>Example of adding a tag to your notification. This won’t create new notification if there already exists one with the same tag.</p>
<pre><code class="language-yaml">  - alias: Push/update notification of sensor state with tag
    trigger:
      - platform: state
        entity_id: sensor.sensor
    action:
      service: notify.notify
      data_template:
        message: &quot;Last known sensor state is {{ states('sensor.sensor') }}.&quot;
      data:
        data:
          tag: 'notification-about-sensor'
</code></pre>
<h4>Targets</h4>
<p>If you do not provide a <code>target</code> parameter in the notify payload a notification will be sent to all registered targets as listed in <code>html5_push_registrations.conf</code>. You can provide a <code>target</code> parameter like so:</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
target: unnamed device
</code></pre>
<p><code>target</code> can also be a string array of targets like so:</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
target:
  - unnamed device
  - unnamed device 2
</code></pre>
<h4>Overrides</h4>
<p>You can pass any of the parameters listed <a href="https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification#Parameters">here</a> in the <code>data</code> dictionary. Please note, Chrome specifies that the maximum size for an icon is 320px by 320px, the maximum <code>badge</code> size is 96px by 96px and the maximum icon size for an action button is 128px by 128px.</p>
<h4>URL</h4>
<p>You can provide a URL to open when the notification is clicked by putting <code>url</code> in the data dictionary like so:</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
data:
  url: https://google.com
</code></pre>
<p>If no URL or actions are provided, interacting with a notification will open your Home Assistant in the browser. You can use relative URLs to refer to Home Assistant, i.e. <code>/map</code> would turn into <code>https://192.168.1.2:8123/map</code>.</p>
<h4>TTL and Priority</h4>
<p>Newer Android versions introduced stronger battery optimization, so notifications by default are delivered only when phone is awake.
Options TTL and priority tries to help users solve those problems. Default value of TTL is <code>86400s</code> and priority is <code>normal</code>.
You can set priority to either <code>normal</code> or <code>high</code>. TTL is any integer value.</p>
<pre><code class="language-yaml">title: Front door
message: The front door is open
data:
  ttl: 86400
  priority: high
</code></pre>
<h3>Dismiss</h3>
<p>You can dismiss notifications by using service html5.dismiss like so:</p>
<pre><code class="language-json">{
  &quot;target&quot;: [&quot;my phone&quot;],
  &quot;data&quot;: {
    &quot;tag&quot;: &quot;notification_tag&quot;
  }
}
</code></pre>
<p>If no target is provided, it dismisses for all.
If no tag is provided, it dismisses all notifications.</p>
<h3>Automating notification events</h3>
<p>During the lifespan of a single push notification, Home Assistant will emit a few different events to the event bus which you can use to write automations against.</p>
<p>Common event payload parameters are:</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>action</code></td>
<td>The <code>action</code> key that you set when sending the notification of the action clicked. Only appears in the <code>clicked</code> event.</td>
</tr>
<tr>
<td><code>data</code></td>
<td>The data dictionary you originally passed in the notify payload, minus any parameters that were added to the HTML5 notification (<code>actions</code>, <code>badge</code>, <code>body</code>, <code>dir</code>, <code>icon</code>, <code>image</code>, <code>lang</code>, <code>renotify</code>, <code>requireInteraction</code>, <code>tag</code>, <code>timestamp</code>, <code>vibrate</code>).</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>The unique identifier of the notification. Can be overridden when sending a notification to allow for replacing existing notifications.</td>
</tr>
<tr>
<td><code>target</code></td>
<td>The target that this notification callback describes.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>The type of event callback received. Can be <code>received</code>, <code>clicked</code> or <code>closed</code>.</td>
</tr>
</tbody>
</table>
<p>You can use the <code>target</code> parameter to write automations against a single <code>target</code>. For more granularity, use <code>action</code> and <code>target</code> together to write automations which will do specific things based on what target clicked an action.</p>
<h4>received event</h4>
<p>You will receive an event named <code>html5_notification.received</code> when the
notification is received on the device.</p>
<pre><code class="language-yaml">- alias: HTML5 push notification received and displayed on device
  trigger:
    platform: event
    event_type: html5_notification.received
</code></pre>
<h4>clicked event</h4>
<p>You will receive an event named <code>html5_notification.clicked</code> when the notification or a notification action button is clicked. The action button clicked is available as <code>action</code> in the <code>event_data</code>.</p>
<pre><code class="language-yaml">- alias: HTML5 push notification clicked
  trigger:
    platform: event
    event_type: html5_notification.clicked
</code></pre>
<p>or</p>
<pre><code class="language-yaml">- alias: HTML5 push notification action button clicked
  trigger:
    platform: event
    event_type: html5_notification.clicked
    event_data:
      action: open_door
</code></pre>
<h4>closed event</h4>
<p>You will receive an event named <code>html5_notification.closed</code> when the notification is closed.</p>
<pre><code class="language-yaml">- alias: HTML5 push notification clicked
  trigger:
    platform: event
    event_type: html5_notification.closed
</code></pre>
<h3>Making notifications work with NGINX proxy</h3>
<p>If you use <a href="/ecosystem/nginx/">NGINX</a> as a proxy with authentication in front of your Home Assistant instance, you may have trouble with receiving events back to Home Assistant. It’s because of authentication token that cannot be passed through the proxy.</p>
<p>To solve the issue put additional location into your nginx site’s configuration:</p>
<pre><code class="language-bash">location /api/notify.html5/callback {
    if ($http_authorization = &quot;&quot;) { return 403; }
    allow all;
    proxy_pass http://localhost:8123;
    proxy_set_header Host $host;
    proxy_redirect http:// https://;
}
</code></pre>
<p>This rule check if request have <code>Authorization</code> HTTP header and bypass the htpasswd (if you use one).</p>
<p>If you still have the problem, even with mentioned rule, try to add this code:</p>
<pre><code class="language-bash">    proxy_set_header Authorization $http_authorization;
    proxy_pass_header Authorization;
</code></pre>
<h4>Verify your domain</h4>
<p>If you need to verify domain ownership with Google Webmaster Central/Search Console while configuring this component, follow these steps:</p>
<ol>
<li>Enter your domain and add <code>/local</code> at the end, e.g., <code>https://example.com:8123/local</code></li>
<li>Select HTML file verification and download the google*.html file.</li>
<li>Create a directory named <code>www</code> in your Home Assistant configuration directory (<code>/config/</code> share from Samba add-on).</li>
<li>Place the downloaded <code>google*.html</code> file in the <code>www</code> directory.</li>
<li>RESTART Home Assistant. <strong>This is important!</strong></li>
<li>Verify the file can be accessed in the browser, e.g., <code>https://example.com:8123/local/google123456789.html</code> (change filename). You should see a plain text message saying “google-site-verification: …”. If you see “404: Not Found” or something else, retry the above steps.</li>
<li>Go back to Google Webmaster Central/Search Console and proceed with the verification.</li>
</ol>
:ET