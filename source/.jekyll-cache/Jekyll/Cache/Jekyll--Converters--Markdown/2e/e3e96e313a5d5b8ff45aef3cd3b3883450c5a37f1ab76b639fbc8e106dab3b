I"<p>In Home Assistant 0.45 we introduced the first version of our automation editor. If you just created a new configuration with Home Assistant, then you’re all set! Go to the UI and enjoy.</p>
<p>From the UI choose <strong>Configuration</strong> which is located in the sidebar, then click on <strong>Automation</strong> to go to the automation editor. Press the <strong>+</strong> sign in the lower right corner to get started. This example is based on the manual steps described in the <a href="/getting-started/automation/">Getting started section</a> for a <a href="/integrations/random#sensor"><code>random</code> sensor</a>.</p>
<p>Choose a meaningful name for your automation rules.</p>
<p class='img'>
  <img src='/images/docs/automation-editor/new-automation.png' />
</p>
<p>If the value of the sensor is greater than 10, then the automation rule should apply.</p>
<p class='img'>
  <img src='/images/docs/automation-editor/new-trigger.png' />
</p>
<p>Firing a <a href="/integrations/persistent_notification/">persistent notification</a> is the result.</p>
<p class='img'>
  <img src='/images/docs/automation-editor/new-action.png' />
</p>
<p>As “Service Data” we want a simple text that is shown as part of the notification.</p>
<pre><code class="language-json">{ 
  &quot;message&quot;: &quot;Sensor value greater than 10&quot;
}
</code></pre>
<p>Don’t forget to save your new automation rule. For your saved automation rule to come into effect, you will need to go to the <strong>Configuration</strong> page and click on <strong>Reload Automation</strong>.</p>
<h2>Updating your configuration to use the editor</h2>
<p>First, check that you have activated the configuration editor.</p>
<pre><code class="language-yaml"># Activate the configuration editor
config:
</code></pre>
<p>The automation editor reads and writes to the file <code>automations.yaml</code> in the root of your <a href="/docs/configuration/">configuration</a> folder.
Currently, both the name of this file and its location are fixed.
Make sure that you have set up the automation integration to read from it:</p>
<pre><code class="language-yaml"># Configuration.yaml example
automation: !include automations.yaml
</code></pre>
<p>If you still want to use your old automation section, add a label to the old entry:</p>
<pre><code class="language-yaml">automation old:
- trigger:
    platform: ...
</code></pre>
<p>You can use the <code>automation:</code> and <code>automation old:</code> sections at the same time:</p>
<ul>
<li><code>automation old:</code> to keep your manual designed automations</li>
<li><code>automation:</code> to save the automation created by the online editor</li>
</ul>
<pre><code class="language-yaml">automation: !include automations.yaml
automation old: !include_dir_merge_list automations
</code></pre>
<h2>Migrating your automations to <code>automations.yaml</code></h2>
<p>If you want to migrate your old automations to use the editor, you’ll have to copy them to <code>automations.yaml</code>. Make sure that <code>automations.yaml</code> remains a list! For each automation that you copy over, you’ll have to add an <code>id</code>. This can be any string as long as it’s unique.</p>
<p>For example, the below automation will be triggered when the sun goes from below the horizon to above the horizon. Then, if the temperature is between 17 and 25 degrees, a light will be turned on.</p>
<pre><code class="language-yaml"># Example automations.yaml entry
- id: my_unique_id  # &lt;-- Required for editor to work, for automations created with the editor the id will be automatically generated.
  alias: Hello world
  trigger:
  - platform: state 
    entity_id: sun.sun
    from: below_horizon
    to: above_horizon
  condition:
  - condition: numeric_state
    entity_id: sensor.temperature
    above: 17
    below: 25
    value_template: '{{ float(state.state) + 2 }}'
  action:
  - service: light.turn_on
</code></pre>
<div class='note'>
Any comments in the YAML file will be lost and templates will be reformatted when you update an automation via the editor.
</div>
:ET