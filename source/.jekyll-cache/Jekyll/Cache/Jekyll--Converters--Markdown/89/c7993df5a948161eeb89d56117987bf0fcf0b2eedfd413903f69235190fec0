I"5$<p>The <code>input_number</code> integration allows the user to define values that can be controlled via the frontend and can be used within conditions of automation. The frontend can display a slider, or a numeric input box. Changes to the slider or numeric input box generate state events. These state events can be utilized as <code>automation</code> triggers as well.</p>
<p>To enable this input number in your installation, add the following lines to your <code>configuration.yaml</code>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
input_number:
  slider1:
    name: Slider
    initial: 30
    min: -20
    max: 35
    step: 1
  box1:
    name: Numeric Input Box
    initial: 30
    min: -20
    max: 35
    step: 1
    mode: box
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='input_number' href='#input_number'></a> input_number</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>Alias for the input. Multiple entries are allowed.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='min' href='#min'></a> min</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Required)</span><span class='description'><p>Minimum value.</p>
</span></p></dd><dt><a class='title-link' name='max' href='#max'></a> max</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Required)</span><span class='description'><p>Maximum value.</p>
</span></p></dd><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Friendly name of the input.</p>
</span></p></dd><dt><a class='title-link' name='initial' href='#initial'></a> initial</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Initial value when Home Assistant starts.</p>
</span></p><p class='default'>
Default value: <p>The value at shutdown</p>
</p></dd><dt><a class='title-link' name='step' href='#step'></a> step</dt><dd><p class='desc'><span class='type'>(<span class='float'>float</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Step value for the slider. Smallest value <code>0.001</code>.</p>
</span></p><p class='default'>
Default value: <p>1</p>
</p></dd><dt><a class='title-link' name='mode' href='#mode'></a> mode</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Can specify <code>box</code> or <code>slider</code>.</p>
</span></p><p class='default'>
Default value: <p>slider</p>
</p></dd><dt><a class='title-link' name='unit_of_measurement' href='#unit_of_measurement'></a> unit_of_measurement</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Unit of measurement in which the value of the slider is expressed in.</p>
</span></p></dd><dt><a class='title-link' name='icon' href='#icon'></a> icon</dt><dd><p class='desc'><span class='type'>(<span class='icon'><a href="/docs/configuration/customizing-devices/#icon">icon</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Icon to display in front of the input element in the frontend.</p>
</span></p></dd></dl></dd></dl>
</div>
<h3>Services</h3>
<p>This integration provides the following services to modify the state of the <code>input_number</code> and a service to reload the
configuration without restarting Home Assistant itself.</p>
<table>
<thead>
<tr>
<th>Service</th>
<th>Data</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>decrement</code></td>
<td><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Decrement the value of specific <code>input_number</code> entities by <code>step</code></td>
</tr>
<tr>
<td><code>increment</code></td>
<td><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Increment the value of specific <code>input_number</code> entities by <code>step</code></td>
</tr>
<tr>
<td><code>reload</code></td>
<td></td>
<td>Reload <code>input_number</code> configuration</td>
</tr>
<tr>
<td><code>set_value</code></td>
<td><code>value</code><br><code>entity_id(s)</code><br><code>area_id(s)</code></td>
<td>Set the value of specific <code>input_number</code> entities</td>
</tr>
</tbody>
</table>
<h3>Restore State</h3>
<p>If you set a valid value for <code>initial</code> this integration will start with state set to that value. Otherwise, it will restore the state it had prior to Home Assistant stopping.</p>
<h3>Scenes</h3>
<p>To set the value of an input_number in a <a href="/integrations/scene/">Scene</a>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
scene:
  - name: Example Scene
    entities:
      input_number.example_number: 13
</code></pre>
<h2>Automation Examples</h2>
<p>Here’s an example of <code>input_number</code> being used as a trigger in an automation.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry using 'input_number' as a trigger in an automation
input_number:
  bedroom_brightness:
    name: Brightness
    initial: 254
    min: 0
    max: 254
    step: 1
automation:
  - alias: Bedroom Light - Adjust Brightness
    trigger:
      platform: state
      entity_id: input_number.bedroom_brightness
    action:
      - service: light.turn_on
        # Note the use of 'data_template:' below rather than the normal 'data:' if you weren't using an input variable
        data_template:
          entity_id: light.bedroom
          brightness: &quot;{{ trigger.to_state.state | int }}&quot;
</code></pre>
<p>Another code example using <code>input_number</code>, this time being used in an action in an automation.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry using 'input_number' in an action in an automation
input_select:
  scene_bedroom:
    name: Scene
    options:
      - Select
      - Concentrate
      - Energize
      - Reading
      - Relax
      - 'OFF'
    initial: 'Select'
input_number:
  bedroom_brightness:
    name: Brightness
    initial: 254
    min: 0
    max: 254
    step: 1
automation:
  - alias: Bedroom Light - Custom
    trigger:
      platform: state
      entity_id: input_select.scene_bedroom
      to: CUSTOM
    action:
      - service: light.turn_on
        # Again, note the use of 'data_template:' rather than the normal 'data:' if you weren't using an input variable.
        data_template:
          entity_id: light.bedroom
          brightness: &quot;{{ states('input_number.bedroom_brightness') | int }}&quot;
</code></pre>
<p>Example of <code>input_number</code> being used in a bidirectional manner, both being set by and controlled by an MQTT action in an automation.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry using 'input_number' in an action in an automation
input_number:
  target_temp:
    name: Target Heater Temperature Slider
    min: 1
    max: 30
    step: 1
    unit_of_measurement: step  
    icon: mdi:target

# This automation script runs when a value is received via MQTT on retained topic: setTemperature
# It sets the value slider on the GUI. This slides also had its own automation when the value is changed.
automation:
  - alias: Set temp slider
    trigger:
      platform: mqtt
      topic: 'setTemperature'
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.target_temp
        value: &quot;{{ trigger.payload }}&quot;

# This second automation script runs when the target temperature slider is moved.
# It publishes its value to the same MQTT topic it is also subscribed to.
  - alias: Temp slider moved
    trigger:
      platform: state
      entity_id: input_number.target_temp
    action:
      service: mqtt.publish
      data_template:
        topic: 'setTemperature'
        retain: true
        payload: &quot;{{ states('input_number.target_temp') | int }}&quot;
</code></pre>
<p>Here’s an example of <code>input_number</code> being used as a delay in an automation.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry using 'input_number' as a delay in an automation
input_number:
  minutes:
    name: minutes
    icon: mdi:clock-start
    initial: 3
    min: 0
    max: 6
    step: 1
    
  seconds:
    name: seconds
    icon: mdi:clock-start
    initial: 30
    min: 0
    max: 60
    step: 10
    
automation:
 - alias: turn something off after x time after turning it on
   trigger:
     platform: state
     entity_id: switch.something
     to: 'on'
   action:
     - delay: '00:{{ states('input_number.minutes') | int }}:{{ states('input_number.seconds') | int }}'
     - service: switch.turn_off
       entity_id: switch.something
</code></pre>
:ET