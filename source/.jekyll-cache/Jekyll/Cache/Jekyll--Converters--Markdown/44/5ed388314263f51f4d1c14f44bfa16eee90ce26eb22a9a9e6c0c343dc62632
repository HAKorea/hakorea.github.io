I"Ç<p>The <code>rfxtrx</code> platform support switches that communicate in the frequency range of 433.92 MHz.</p>
<h2>Configuration</h2>
<p>First you have to set up your <a href="/integrations/rfxtrx/">rfxtrx hub</a>.
The easiest way to find your switches is to add this to your <code>configuration.yaml</code>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: rfxtrx
  automatic_add: true
</code></pre>
<p>Launch your Home Assistant and go to the website.
Push your remote and your device should be added:</p>
<p class='img'>
<img src='/images/integrations/rfxtrx/switch.png' />
</p>
<p>Here the name is <code>0b11000102ef9f210010f70</code> and you can verify that it works from the frontend.
Then you should update your configuration to:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: rfxtrx
  devices:
    0b11000102ef9f210010f70:
      name: device_name
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='devices' href='#devices'></a> devices</dt><dd><p class='desc'><span class='type'>(<span class='list'>list</span>)</span><span class='required'>(Optional)</span><span class='description'><p>A list of devices.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Override the name to use in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='fire_event' href='#fire_event'></a> fire_event</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Fires an event even if the state is the same as before, for example, a doorbell switch. Can also be used for automations.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd></dl></dd><dt><a class='title-link' name='automatic_add' href='#automatic_add'></a> automatic_add</dt><dd><p class='desc'><span class='type'>(<span class='boolean'>boolean</span>)</span><span class='required'>(Optional)</span><span class='description'><p>To enable the automatic addition of new switches.</p>
</span></p><p class='default'>
Default value: <p>false</p>
</p></dd><dt><a class='title-link' name='signal_repetitions' href='#signal_repetitions'></a> signal_repetitions</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Because the RFXtrx device sends its actions via radio and from most receivers, itâ€™s impossible to know if the signal was received or not. Therefore you can configure the switch to try to send each signal repeatedly.</p>
</span></p></dd></dl>
</div>
<div class='note warning'>
<p>This integration and the <a href="/integrations/binary_sensor.rfxtrx/">rfxtrx binary sensor</a> can steal each otherâ€™s devices when setting the <code>automatic_add</code> configuration parameter to <code>true</code>. Set <code>automatic_add</code> only when you have some devices to add to your installation, otherwise leave it to <code>false</code>.</p>
</div>
<div class='note warning'>
If a device ID consists of only numbers, please make sure to surround it with quotes.
This is a known limitation in YAML, because the device ID will be interpreted as a number otherwise.
</div>
<p>Generate codes:</p>
<p>If you need to generate codes for switches you can use a template (useful for example COCO switches).</p>
<ul>
<li>Go to home-assistant-IP:8123/dev-template</li>
<li>Use this code to generate a code:</li>
</ul>
<pre><code class="language-yaml">0b11000{{ range(100,700) | random | int }}bc0cfe0{{ range(0,10) | random | int }}010f70
</code></pre>
<ul>
<li>Use this code to add a new switch in your configuration.yaml</li>
<li>Launch your Home Assistant and go to the website.</li>
<li>Enable learning mode on your switch (i.e. push learn button or plug it in a wall socket)</li>
<li>Toggle your new switch in the Home Assistant interface</li>
</ul>
<h2>Examples</h2>
<p>Basic configuration with 3 devices:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: rfxtrx
  automatic_add: false
  signal_repetitions: 2
  devices:
    0b1100ce3213c7f210010f70:
      name: Movement1
    0b11000a02ef2gf210010f50:
      name: Movement2
    0b1111e003af16aa10000060:
      name: Door
      fire_event: true
</code></pre>
<p>Light hallway if doorbell is pressed (when is sun down):</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: rfxtrx
  automatic_add: false
  devices:
    0710014c440f0160:
      name: Hall
    &quot;0710010244080780&quot;:
      name: Door
      fire_event: true

automation:
  - alias: Switch the light on when doorbell rings if the sun is below the horizon and the light was off
    trigger:
      platform: event
      event_type: button_pressed
      event_data: {&quot;entity_id&quot;: &quot;switch.door&quot;}
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: sun.sun
          state: &quot;below_horizon&quot;
        - condition: state
          entity_id: switch.hall
          state: 'off'
    action:
      - service: switch.turn_on
        entity_id: switch.hall
</code></pre>
<p>Use remote to enable scene (using event_data):</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
switch:
  platform: rfxtrx
  automatic_add: false
  devices:
    0b1100ce3213c7f210010f70:
      name: Light1
    0b11000a02ef2gf210010f50:
      name: Light2
    0b1111e003af16aa10000060:
      name: Keychain remote
      fire_event: true
scene:
  name: Livingroom
  entities:
    switch.light1: on
    switch.light2: on

automation:
  - alias: Use remote to enable scene
    trigger:
      platform: event
      event_type: button_pressed
      event_data: {&quot;state&quot;: &quot;on&quot;, &quot;entity_id&quot;: &quot;switch.keychain_remote&quot;}
    action:
      service: scene.turn_on
      entity_id: scene.livingroom
</code></pre>
:ET