I"	<p>Integrates MySensors HVAC into Home Assistant. See the <a href="/integrations/mysensors/">main component</a> for configuration instructions.</p>
<p>The following actuator types are supported:</p>
<h5>MySensors version 1.5 and higher</h5>
<table>
<thead>
<tr>
<th>S_TYPE</th>
<th>V_TYPE</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_HVAC</td>
<td>V_HVAC_FLOW_STATE*, V_HVAC_SETPOINT_HEAT, V_HVAC_SETPOINT_COOL, V_HVAC_SPEED, V_TEMP</td>
</tr>
</tbody>
</table>
<p>V_HVAC_FLOW_STATE is mapped to the state of the Climate integration in Home Assistant as follows:</p>
<table>
<thead>
<tr>
<th>Home Assistant State</th>
<th>MySensors State</th>
</tr>
</thead>
<tbody>
<tr>
<td>HVAC_MODE_COOL</td>
<td>CoolOn</td>
</tr>
<tr>
<td>HVAC_MODE_HEAT</td>
<td>HeatOn</td>
</tr>
<tr>
<td>HVAC_MODE_AUTO</td>
<td>AutoChangeOver</td>
</tr>
<tr>
<td>HVAC_MODE_OFF</td>
<td>Off</td>
</tr>
</tbody>
</table>
<p>Currently humidity, away_mode, aux_heat, swing_mode is not supported. This will be included in later versions as feasible.</p>
<p>Set the target temperature using V_HVAC_SETPOINT_HEAT in Heat mode, and V_HVAC_SETPOINT_COOL in Cool Mode. In case of any Auto Change Over mode you can use V_HVAC_SETPOINT_HEAT as well as V_HVAC_SETPOINT_COOL to set the both the low bound and the high bound temperature of the device.</p>
<p>You can use V_HVAC_SPEED to control the Speed setting of the Fan in the HVAC.</p>
<p>You can use V_TEMP to send the current temperature from the node to Home Assistant.</p>
<p>For more information, visit the <a href="https://www.mysensors.org/download">serial api</a> of MySensors.</p>
<h3>Example sketch for MySensors 2.x</h3>
<pre><code class="language-cpp">/*
* Documentation: https://www.mysensors.org
* Support Forum: https://forum.mysensors.org
*/

#define MY_RADIO_NRF24
#define CHILD_ID_HVAC 0

#include &lt;MySensors.h&gt;

// Uncomment your heatpump model
//#include &lt;FujitsuHeatpumpIR.h&gt;
//#include &lt;PanasonicCKPHeatpumpIR.h&gt;
//#include &lt;PanasonicHeatpumpIR.h&gt;
//#include &lt;CarrierHeatpumpIR.h&gt;
//#include &lt;MideaHeatpumpIR.h&gt;
//#include &lt;MitsubishiHeatpumpIR.h&gt;
//#include &lt;SamsungHeatpumpIR.h&gt;
//#include &lt;SharpHeatpumpIR.h&gt;
//#include &lt;DaikinHeatpumpIR.h&gt;

//Some global variables to hold the states
int POWER_STATE;
int TEMP_STATE;
int FAN_STATE;
int MODE_STATE;
int VDIR_STATE;
int HDIR_STATE;

IRSenderPWM irSender(3);       // IR led on Arduino digital pin 3, using Arduino PWM

//Change to your Heatpump
HeatpumpIR *heatpumpIR = new PanasonicNKEHeatpumpIR();

/*
new PanasonicDKEHeatpumpIR()
new PanasonicJKEHeatpumpIR()
new PanasonicNKEHeatpumpIR()
new CarrierHeatpumpIR()
new MideaHeatpumpIR()
new FujitsuHeatpumpIR()
new MitsubishiFDHeatpumpIR()
new MitsubishiFEHeatpumpIR()
new SamsungHeatpumpIR()
new SharpHeatpumpIR()
new DaikinHeatpumpIR()
*/

MyMessage msgHVACSetPointC(CHILD_ID_HVAC, V_HVAC_SETPOINT_COOL);
MyMessage msgHVACSpeed(CHILD_ID_HVAC, V_HVAC_SPEED);
MyMessage msgHVACFlowState(CHILD_ID_HVAC, V_HVAC_FLOW_STATE);

bool initialValueSent = false;

void presentation() {
  sendSketchInfo(&quot;Heatpump&quot;, &quot;2.1&quot;);
  present(CHILD_ID_HVAC, S_HVAC, &quot;Thermostat&quot;);
}

void setup() {
}

void loop() {
  // put your main code here, to run repeatedly:
  if (!initialValueSent) {
    send(msgHVACSetPointC.set(20));
    send(msgHVACSpeed.set(&quot;Auto&quot;));
    send(msgHVACFlowState.set(&quot;Off&quot;));

    initialValueSent = true;
  }
}

void receive(const MyMessage &amp;message) {
  if (message.isAck()) {
     Serial.println(&quot;This is an ack from gateway&quot;);
     return;
  }

  Serial.print(&quot;Incoming message for: &quot;);
  Serial.print(message.sensor);

  String recvData = message.data;
  recvData.trim();

  Serial.print(&quot;, New status: &quot;);
  Serial.println(recvData);
  switch (message.type) {
    case V_HVAC_SPEED:
      Serial.println(&quot;V_HVAC_SPEED&quot;);

      if(recvData.equalsIgnoreCase(&quot;auto&quot;)) FAN_STATE = 0;
      else if(recvData.equalsIgnoreCase(&quot;min&quot;)) FAN_STATE = 1;
      else if(recvData.equalsIgnoreCase(&quot;normal&quot;)) FAN_STATE = 2;
      else if(recvData.equalsIgnoreCase(&quot;max&quot;)) FAN_STATE = 3;
    break;

    case V_HVAC_SETPOINT_COOL:
      Serial.println(&quot;V_HVAC_SETPOINT_COOL&quot;);
      TEMP_STATE = message.getFloat();
      Serial.println(TEMP_STATE);
    break;

    case V_HVAC_FLOW_STATE:
      Serial.println(&quot;V_HVAC_FLOW_STATE&quot;);
      if (recvData.equalsIgnoreCase(&quot;coolon&quot;)) {
        POWER_STATE = 1;
        MODE_STATE = MODE_COOL;
      }
      else if (recvData.equalsIgnoreCase(&quot;heaton&quot;)) {
        POWER_STATE = 1;
        MODE_STATE = MODE_HEAT;
      }
      else if (recvData.equalsIgnoreCase(&quot;autochangeover&quot;)) {
        POWER_STATE = 1;
        MODE_STATE = MODE_AUTO;
      }
      else if (recvData.equalsIgnoreCase(&quot;off&quot;)){
        POWER_STATE = 0;
      }
      break;
  }
  sendHeatpumpCommand();
  sendNewStateToGateway();
}

void sendNewStateToGateway() {
  send(msgHVACSetPointC.set(TEMP_STATE));
  send(msgHVACSpeed.set(FAN_STATE));
  send(msgHVACFlowState.set(MODE_STATE));
}

void sendHeatpumpCommand() {
  Serial.println(&quot;Power = &quot; + (String)POWER_STATE);
  Serial.println(&quot;Mode = &quot; + (String)MODE_STATE);
  Serial.println(&quot;Fan = &quot; + (String)FAN_STATE);
  Serial.println(&quot;Temp = &quot; + (String)TEMP_STATE);

  heatpumpIR-&gt;send(irSender, POWER_STATE, MODE_STATE, FAN_STATE, TEMP_STATE, VDIR_AUTO, HDIR_AUTO);
}
</code></pre>
<h3>Example sketch for MySensors 1.x</h3>
<pre><code class="language-cpp">/*
* Documentation: https://www.mysensors.org
* Support Forum: https://forum.mysensors.org
*/

#include &lt;MySensor.h&gt;
/*
* Include all the other Necessary code here.
* The example code is limited to message exchange for mysensors
* with the controller (ha).
*/

#define CHILD_ID_HVAC  0  // childId
MyMessage msgHVACSetPointC(CHILD_ID_HVAC, V_HVAC_SETPOINT_COOL);
MyMessage msgHVACSpeed(CHILD_ID_HVAC, V_HVAC_SPEED);
MyMessage msgHVACFlowState(CHILD_ID_HVAC, V_HVAC_FLOW_STATE);

/*
* Include all the other Necessary code here.
* The example code is limited to message exchange for mysensors
* with the controller (ha).
*/

void setup()
{
  // Startup and initialize MySensors library.
  // Set callback for incoming messages.
  gw.begin(incomingMessage);

  // Send the sketch version information to the gateway and Controller
  gw.sendSketchInfo(&quot;HVAC&quot;, &quot;0.1&quot;);

  gw.present(CHILD_ID_HVAC, S_HVAC, &quot;Thermostat&quot;);
  gw.send(msgHVACFlowState.set(&quot;Off&quot;));
  gw.send(msgHVACSetPointC.set(target_temp));
  gw.send(msgHVACSpeed.set(&quot;Max&quot;));
}

void loop() {
  // Process incoming messages (like config from server)
  gw.process();
}

void incomingMessage(const MyMessage &amp;message) {
  String recvData = message.data;
  recvData.trim();
  switch (message.type) {
    case V_HVAC_SPEED:
    if(recvData.equalsIgnoreCase(&quot;auto&quot;)) fan_speed = 0;
    else if(recvData.equalsIgnoreCase(&quot;min&quot;)) fan_speed = 1;
    else if(recvData.equalsIgnoreCase(&quot;normal&quot;)) fan_speed = 2;
    else if(recvData.equalsIgnoreCase(&quot;max&quot;)) fan_speed = 3;
    processHVAC();
    break;
    case V_HVAC_SETPOINT_COOL:
    target_temp = message.getFloat();
    processHVAC();
    break;
    case V_HVAC_FLOW_STATE:
    if(recvData.equalsIgnoreCase(&quot;coolon&quot;) &amp;&amp; (!Present_Power_On )){
      togglePower();
    }
    else if(recvData.equalsIgnoreCase(&quot;off&quot;) &amp;&amp; Present_Power_On ){
      togglePower();
    }
    break;
  }
}
</code></pre>
:ET