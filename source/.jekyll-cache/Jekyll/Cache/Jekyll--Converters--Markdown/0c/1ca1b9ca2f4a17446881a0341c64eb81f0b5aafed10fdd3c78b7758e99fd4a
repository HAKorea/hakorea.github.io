I"N*<p>The <code>geniushub</code> integration links Home Assistant with your Genius Hub CH/DHW system, including its zones, devices, and issues.</p>
<p>It uses the <a href="https://pypi.org/project/geniushub-client/">geniushub</a> client library, which provides data compatible with the v1 API that <em>may not</em> exactly match that of the official Web App.</p>
<h3>Zones</h3>
<p>Each zone controlled by your Genius Hub will be exposed as either a:</p>
<ul>
<li><code>Climate</code> entity, for <strong>Radiator</strong> and <strong>Wet Underfloor</strong> zones, and</li>
<li><code>Water Heater</code> entity, for <strong>Hot Water Temperature</strong> zones and</li>
<li><code>Switch</code> entity, for <strong>On/Off</strong> zones</li>
</ul>
<p><strong>Group</strong> zones are not supported.</p>
<p>Currently, there is no support for altering zone schedules, although entities can be switched to/from geniushub modes that utilize schedules.</p>
<p>There are limitations due to the differences between the Genius Hub and Home Assistant schemas (e.g. HA has no <strong>Footprint</strong> mode) - use the service handlers, below, for this functionality.</p>
<h3>Service Handlers</h3>
<p>Home Assistant is obligated to place restrictions upon integrations such as <strong>geniushub</strong> to maintain compatibility with other ecosystems (e.g. Google Home) and so not all of the <strong>geniushub</strong> functionality is available via the web UI. Some of this missing functionality is exposed via integration-specific service handlers:</p>
<ul>
<li><code>set_zone_override</code>: change the zone’s setpoint <em>for a specified duration</em> (up to 24h), and</li>
<li><code>set_zone_mode</code>: change the zone’s mode to one of <code>off</code>, <code>timer</code> or (if supported by the zone) <code>footprint</code></li>
</ul>
<h3>Climate and Water Heater Entities</h3>
<p>Climate and Water Heater entities will report their current temperature, setpoint and mode; other properties (e.g. occupied state) are available via their state attributes (see examples below). The Genius Hub mode will be reported as/set to:</p>
<table>
<thead>
<tr>
<th align="center">GH mode</th>
<th align="center">HA Operation</th>
<th align="center">HA Preset</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><strong>Off</strong></td>
<td align="center">Off</td>
<td align="center">N/A</td>
</tr>
<tr>
<td align="center"><strong>Timer</strong></td>
<td align="center">Heat</td>
<td align="center">None</td>
</tr>
<tr>
<td align="center"><strong>Override</strong></td>
<td align="center">Heat</td>
<td align="center">Boost</td>
</tr>
<tr>
<td align="center"><strong>Footprint</strong></td>
<td align="center">Heat</td>
<td align="center">Activity</td>
</tr>
</tbody>
</table>
<p><strong>Footprint</strong> mode is only available to <strong>Radiator</strong> zones that have room sensors.</p>
<h3>Switch Entities</h3>
<p>Switch entities will report back their state; other properties are available via their state attributes. Currently, HA switches do not have modes/presets, so the Home Assistant <code>state</code> will be <em>reported</em> as:</p>
<ul>
<li><code>On</code> for <strong>Override</strong> \ <strong>On</strong>, and</li>
<li><code>Off</code> otherwise (NB: the zone could still be ‘on’, e.g. with <strong>Timer</strong> mode)</li>
</ul>
<p>Note: if you turn a Switch entity <code>Off</code> via Home Assistant’s web UI, it will revert to <strong>Timer</strong> mode - this may not be the behaviour you are expecting.</p>
<p>Individual smart plugs are not yet exposed as switches - you can create one zone per smart plug as a work-around.</p>
<h3>Devices</h3>
<p>Each Device controlled by your Genius Hub will be exposed as either a:</p>
<ul>
<li><code>Sensor</code> entity with a % battery, for any Device with a battery (e.g., a Genius Valve), or</li>
<li><code>Binary Sensor</code> entity with on/off state for any Device that is a switch (e.g., Smart Plugs, DCRs)</li>
</ul>
<p>Such entities will report back their primary state and <code>assigned_zone</code>. If the Hub is directly polled using Option 1 (see below), then some additional state attributes such as <code>last_comms</code> (last communications time) are also available.</p>
<h3>Issues</h3>
<p>There are three <code>Sensor</code> entities that will indicate the number of <strong>Errors</strong>, <strong>Warnings</strong> and <strong>Information</strong> issues.</p>
<p>Each such entity has a state attribute that will contain a list of any such issues which can be used in automations, etc. For example:</p>
<pre><code class="language-yaml">- alias: GeniusHub Error Alerts
  trigger:
    platform: numeric_state
    entity_id: sensor.geniushub_errors
    above: 0
  action:
  - service: notify.pushbullet_notifier
    data_template:
      title: &quot;Genius Hub has errors&quot;
      message: &gt;-
        Genius Hub has the following {{ states('sensor.geniushub_errors') }} errors:
        {{ state_attr('sensor.geniushub_errors', 'error_list') }}
</code></pre>
<p>This alert may be useful to see if the CH is being turned on whilst you’re on a holiday!</p>
<pre><code class="language-yaml">- alias: GeniusHub CH State Change Alert
  trigger:
    platform: state
    entity_id: binary_sensor.dual_channel_receiver_2_1
  action:
  - service: notify.pushbullet_notifier
    data_template:
      title: &quot;Warning: CH State Change!&quot;
      message: &gt;-
        {{ trigger.to_state.attributes.friendly_name }} has changed
        from {{ trigger.from_state.state }} to {{ trigger.to_state.state }}.
</code></pre>
<h2>State Attributes</h2>
<p>Many zone/device properties are available via the corresponding entity’s state attributes. For example, in the case of <strong>Radiator</strong>-derived <code>Climate</code> entities (note ‘status’):</p>
<pre><code class="language-json">{
  &quot;status&quot;: {
    &quot;type&quot;: &quot;radiator&quot;,
    &quot;mode&quot;: &quot;off&quot;,
    &quot;temperature&quot;: 19,
    &quot;occupied&quot;: False,
    &quot;override&quot;: {
      &quot;duration&quot;: 0,
      &quot;setpoint&quot;: 16
    }
  }
}
</code></pre>
<p>… and for <strong>Genius Valve</strong>-derived <code>Sensor</code> entities (note ‘state’):</p>
<pre><code class="language-json">{
  &quot;state&quot;: {
    &quot;set_temperature&quot;: 4.0,
    &quot;measured_temperature&quot;: 20.030000686645508,
    &quot;setback&quot;: 3.5,
    &quot;wakeup_interval&quot;: 450
  }
}
</code></pre>
<p>This data can be accessed in automations, etc. via a value template. For example:</p>
<pre><code class="language-yaml">value_template: &quot;{{ state_attr('water_heater.genius_zone_2', 'status').override.setpoint }}&quot;
</code></pre>
<p>In the specific case of <strong>Radiator</strong> zones with room sensors:</p>
<pre><code class="language-yaml">value_template: &quot;{{ state_attr('climate.genius_zone_12', 'status').occupied }}&quot;
</code></pre>
<h2>Configuration</h2>
<p>To set up this integration, add one of the following to your <strong>configuration.yaml</strong> file.</p>
<p>If required, you can switch between one Option and the other and, as the <code>unique_id</code> remains consistent, state history will be preserved. This assumes that the correct MAC address is provided for Option 2, below. If a wrong MAC address was provided for Option 1, then the MAC address can be overridden for Option 1 to maintain these links within the entity registry.</p>
<h3>Option 1: hub hostname/address with user credentials</h3>
<p>This is the recommended option.</p>
<ul>
<li>Requires your <strong>username</strong> &amp; <strong>password</strong>, as used with <a href="https://www.geniushub.co.uk/app">geniushub.co.uk/app</a>.</li>
<li>Uses the v3 API - unofficial, but there are additional features (e.g., battery levels).</li>
<li>Polls the hub directly (so is faster, say ~1s response time).</li>
<li>You have the option of specifying a MAC address (not recommended, see above).</li>
</ul>
<p>The hub does not have to be in the same subnet as your Home Assistant server.</p>
<h3>Option 2: hub token only</h3>
<p>This option is recommended only if Option 1 does not work. The MAC address should match that written on the back of the Hub.</p>
<ul>
<li>Requires a <strong>hub token</strong> obtained from <a href="https://my.geniushub.co.uk/tokens">my.geniushub.co.uk/tokens</a>.</li>
<li>Uses the v1 API - which is well-documented.</li>
<li>Polls Heat Genius’ own servers (so is slower, say ~5-10s response time).</li>
<li>You should use the Hub’s MAC address (although any valid MAC will do).</li>
</ul>
<pre><code class="language-yaml"># Example configuration.yaml entry, using a Hub Token
geniushub:
  token: GENIUS_HUB_TOKEN
  mac : GENIUS_HUB_MAC
</code></pre>
<pre><code class="language-yaml"># Example configuration.yaml entry, directly polling the Hub
geniushub:
  host: IP_ADDRESS
  username: GENIUS_HUB_USERNAME
  password: GENIUS_HUB_PASSWORD
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='token' href='#token'></a> token</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The Hub Token of the Genius Hub.</p>
</span></p></dd><dt><a class='title-link' name='mac' href='#mac'></a> mac</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>The MAC address of the Hub’s ethernet port.</p>
</span></p></dd><dt><a class='title-link' name='host' href='#host'></a> host</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>The hostname/IP address of the Genius Hub.</p>
</span></p></dd><dt><a class='title-link' name='username' href='#username'></a> username</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Your Genius Hub username.</p>
</span></p></dd><dt><a class='title-link' name='password' href='#password'></a> password</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Your Genius Hub password.</p>
</span></p></dd></dl>
</div>
<p>Note: <code>username</code> and <code>password</code> are only required when <code>host</code> is used (instead of <code>token</code>).</p>
<p>Note: <code>mac</code> is required if <code>token</code> is used (instead of <code>host</code>) and is optional otherwise.</p>
:ET