I"|	<p>This integration can expose regular shell commands as services. Services can be called from a <a href="/integrations/script/">script</a> or in <a href="/getting-started/automation/">automation</a>.
Shell commands aren’t allowed for a camel-case naming, please use lowercase naming only and separate the names with underscores.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
# Exposes service shell_command.restart_pow
shell_command:
  restart_pow: touch ~/.pow/restart.txt
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='alias' href='#alias'></a> alias</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Required)</span><span class='description'><p>Give the shell command a name (alias) as a variable and set the command you want to execute after the colon. e.g., <code>alias</code>:<code>the shell command you want to execute</code>.</p>
</span></p></dd></dl>
</div>
<p>The commands can be dynamic, using templates to insert values for arguments. When using templates, shell_command runs in a more secure environment which doesn’t allow any shell helpers like automatically expanding the home dir <code>~</code> or using pipe symbols to run multiple commands. Similarly, only content after the first space can be generated by a template. This means the command name itself cannot be generated by a template, but it must be literally provided.</p>
<p>Any service data passed into the service call to activate the shell command will be available as a variable within the template.</p>
<p><code>stdout</code> and <code>stderr</code> output from the command are both captured and will be logged by setting the <a href="/integrations/logger/">log level</a> to debug.</p>
<pre><code class="language-yaml">
# Apply value of a GUI slider to the shell_command
automation:
  - alias: run_set_ac
    trigger:
      platform: state
      entity_id: input_number.ac_temperature
    action:
      service: shell_command.set_ac_to_slider

input_number:
  ac_temperature:
    name: A/C Setting
    initial: 24
    min: 18
    max: 32
    step: 1


shell_command:
  set_ac_to_slider: 'irsend SEND_ONCE DELONGHI AC_{{ states(&quot;input_number.ac_temperature&quot;) }}_AUTO'

</code></pre>
:ET