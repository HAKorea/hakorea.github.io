I"≥<p>The <code>input_text</code> integration allows the user to define values that can be controlled via the frontend and can be used within conditions of automation. Changes to the value stored in the text box generate state events. These state events can be utilized as <code>automation</code> triggers as well. It can also be configured in password mode (obscured text).</p>
<pre><code class="language-yaml"># Example configuration.yaml entries
input_text:
  text1:
    name: Text 1
    initial: Some Text
  text2:
    name: Text 2
    min: 8
    max: 40
  text3:
    name: Text 3
    pattern: '[a-fA-F0-9]*'
  text4:
    name: Text 4
    mode: password
</code></pre>
<div class="config-vars">
  <h3><a class="title-link" name="configuration-variables" href="#configuration-variables"></a> Configuration Variables</h3>
  <dl class=''><dt><a class='title-link' name='input_text' href='#input_text'></a> input_text</dt><dd><p class='desc'><span class='type'>(<span class='map'>map</span>)</span><span class='required'>(Required)</span><span class='description'><p>Alias for the input. Multiple entries are allowed.</p>
</span></p></dd><dd><dl class='nested'><dt><a class='title-link' name='name' href='#name'></a> name</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Friendly name of the text input.</p>
</span></p></dd><dt><a class='title-link' name='min' href='#min'></a> min</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Minimum length for the text value.</p>
</span></p><p class='default'>
Default value: <p>0</p>
</p></dd><dt><a class='title-link' name='max' href='#max'></a> max</dt><dd><p class='desc'><span class='type'>(<span class='integer'>integer</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Maximum length for the text value. 255 is the maximum number of characters allowed in an entity state.</p>
</span></p><p class='default'>
Default value: <p>100</p>
</p></dd><dt><a class='title-link' name='initial' href='#initial'></a> initial</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Initial value when Home Assistant starts.</p>
</span></p></dd><dt><a class='title-link' name='icon' href='#icon'></a> icon</dt><dd><p class='desc'><span class='type'>(<span class='icon'><a href="/docs/configuration/customizing-devices/#icon">icon</a></span>)</span><span class='required'>(Optional)</span><span class='description'><p>Icon to display in front of the input element in the frontend.</p>
</span></p></dd><dt><a class='title-link' name='pattern' href='#pattern'></a> pattern</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Regex pattern for client side validation.</p>
</span></p><p class='default'>
Default value: <p>empty</p>
</p></dd><dt><a class='title-link' name='mode' href='#mode'></a> mode</dt><dd><p class='desc'><span class='type'>(<span class='string'>string</span>)</span><span class='required'>(Optional)</span><span class='description'><p>Can specify <code>text</code> or <code>password</code>. Elements of type ‚Äúpassword‚Äù provide a way for the user to securely enter a value.</p>
</span></p><p class='default'>
Default value: <p>text</p>
</p></dd></dl></dd></dl>
</div>
<h3>Services</h3>
<p>This integration provides a service to modify the state of the <code>input_text</code> and a service to reload the <code>input_text</code> configuration without restarting Home Assistant itself.</p>
<table>
<thead>
<tr>
<th>Service</th>
<th>Data</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set_value</code></td>
<td><code>value</code><br><code>entity_id(s)</code></td>
<td>Set the value for specific <code>input_text</code> entities.</td>
</tr>
<tr>
<td><code>reload</code></td>
<td></td>
<td>Reload <code>input_text</code> configuration</td>
</tr>
</tbody>
</table>
<h3>Restore State</h3>
<p>If you set a valid value for <code>initial</code> this integration will start with state set to that value. Otherwise, it will restore the state it had prior to Home Assistant stopping.</p>
<h3>Scenes</h3>
<p>To set the state of the input_text in a <a href="/integrations/scene/">Scene</a>:</p>
<pre><code class="language-yaml"># Example configuration.yaml entry
scene:
  - name: Example1
    entities:
      input_text.example: Hello!
</code></pre>
<h2>Automation Examples</h2>
<p>Here‚Äôs an example using <code>input_text</code> in an action in an automation.</p>
<pre><code class="language-yaml"># Example configuration.yaml entry using 'input_text' in an action in an automation
input_select:
  scene_bedroom:
    name: Scene
    options:
      - Select
      - Concentrate
      - Energize
      - Reading
      - Relax
      - 'OFF'
    initial: 'Select'
input_text:
  bedroom:
    name: Brightness
    
automation:
  - alias: Bedroom Light - Custom
    trigger:
      platform: state
      entity_id: input_select.scene_bedroom
    action:
      - service: input_text.set_value
        # Again, note the use of 'data_template:' rather than the normal 'data:' if you weren't using an input variable.
        data_template:
          entity_id: input_text.bedroom
          value: &quot;{{ states('input_select.scene_bedroom') }}&quot;
</code></pre>
:ET