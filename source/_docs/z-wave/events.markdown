---
title: "Z-Wave Events"
description: "Events generated by the Z-Wave component."
---

## zwave.network_complete

Home Assistant will trigger an event when the Z-Wave network is complete, meaning all of the nodes on the network have been queried. This can take quite some time, depending on wakeup intervals on the battery-powered devices on the network.

```yaml
 - alias: Z-Wave network is complete
   trigger:
     platform: event
     event_type: zwave.network_complete
```

## zwave.network_complete_some_dead

Home Assistant will trigger an event when the Z-Wave network is complete, but some nodes are marked dead, meaning all of the nodes on the network have been queried. This can take quite some time, depending on wakeup intervals on the battery-powered devices on the network.

```yaml
 - alias: Z-Wave network is complete some dead
   trigger:
     platform: event
     event_type: zwave.network_complete_some_dead
```

## zwave.network_ready

Home Assistant will trigger an event when the Z-Wave network is ready for use. Between `zwave.network_start` and `zwave.network_ready` Home Assistant will feel sluggish when trying to send commands to Z-Wave nodes. This is because the controller is requesting information from all of the nodes on the network. When this is triggered, all awake nodes have been queried and sleeping nodes will be queried when they awake.

```yaml
 - alias: Z-Wave network is ready
   trigger:
     platform: event
     event_type: zwave.network_ready
```

## zwave.network_start

Home Assistant will trigger an event when the Z-Wave network is set up to be started.

```yaml
 - alias: Z-Wave network is starting
   trigger:
     platform: event
     event_type: zwave.network_start
```

## zwave.network_stop

Home Assistant will trigger an event when the Z-Wave network is stopping.

```yaml
 - alias: Z-Wave network is stopping
   trigger:
     platform: event
     event_type: zwave.network_stop
```

## zwave.node_event
Home Assistant will trigger an event when command_class_basic changes value on a node. This can be virtually anything, so tests have to be made to determine what value equals what. You can use this for automations.

Example:

```yaml
 - alias: Minimote Button Pressed
   trigger:
     platform: event
     event_type: zwave.node_event
     event_data:
       entity_id: zwave.aeon_labs_minimote
       basic_level: 255
```

The *entity_id* and *basic_level* of all triggered events can be seen in the console output.

## zwave.scene_activated

Some devices can also trigger scene activation events, which can be used in automation scripts (for example, the press of a button on a wall switch):

```yaml
# Example configuration.yaml automation entry
automation:
  - alias: Turn on Desk light
    trigger:
      platform: event
      event_type: zwave.scene_activated
      event_data:
        entity_id: zwave.zwaveme_zme_wallcs_secure_wall_controller
        scene_id: 11
```

Some devices (like the HomeSeer wall switches) allow you to do things like double, and triple click the up and down buttons and fire an event.  These devices will also send `scene_data` to differentiate the events.  This is an example of double clicking the on/up button:

```yaml
# Example configuration.yaml automation entry
automation
  - alias: 'Dining room dimmer - double tap up'
    trigger:
      - event_type: zwave.scene_activated
        platform: event
        event_data:
          entity_id: zwave.dining_room_cans
          scene_id: 1
          scene_data: 3
```

The *entity_id* and *scene_id* of all triggered events can be seen in the console output.

For more information on HomeSeer devices and similar devices, please see the [device specific page](/docs/z-wave/device-specific/#homeseer-switches).
